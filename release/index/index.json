{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/iterator\/next()",
                    "title" : "func next() async -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/iterator",
                "title" : "AsyncChannel.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/finish()",
                "title" : "func finish()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/send(_:)",
                "title" : "func send(Element) async",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/asynciterator",
                "title" : "AsyncChannel.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/element",
                "title" : "AsyncChannel.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(by:into:)-3ls94",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(by:into:)-6ugu2",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:or:)-2lm6a",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:or:)-5c06n",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:or:into:)-4yfgk",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/chunks(ofcount:or:into:)-dapz",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/compactmap(_:)-24cw5",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/compactmap(_:)-7cfmu",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/flatmap(_:)-1fadd",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/flatmap(_:)-5vnyd",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/interspersed(every:with:)-29083",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/interspersed(every:with:)-4648q",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/interspersed(every:with:)-4h7ik",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/interspersed(every:with:)-5s35q",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/interspersed(every:with:)-vcxk",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/map(_:)-d25v",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/map(_:)-rzrm",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(_:_:)-1mjet",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(_:_:)-6zcl4",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(into:_:)-2hos3",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/reductions(into:_:)-9qah1",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchannel\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchannel",
            "title" : "AsyncChannel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/iterator\/next()",
                    "title" : "func next() async throws -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/iterator",
                "title" : "AsyncThrowingChannel.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/fail(_:)",
                "title" : "func fail(Error)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/finish()",
                "title" : "func finish()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/send(_:)",
                "title" : "func send(Element) async",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/asynciterator",
                "title" : "AsyncThrowingChannel.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/element",
                "title" : "AsyncThrowingChannel.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(by:into:)-4dy1h",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(by:into:)-9cnm8",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:or:)-5fo0p",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:or:)-7nri8",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:or:into:)-6q6so",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/chunks(ofcount:or:into:)-7lgud",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/compactmap(_:)-3j086",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/compactmap(_:)-6bayd",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/flatmap(_:)-3ikei",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/flatmap(_:)-8bm8p",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/interspersed(every:with:)-1g5t9",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/interspersed(every:with:)-495h0",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/interspersed(every:with:)-7q587",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/interspersed(every:with:)-9co9g",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/interspersed(every:with:)-atb",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/map(_:)-2fp1y",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/map(_:)-3wpxf",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(_:_:)-8fpp3",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(_:_:)-9na5l",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(into:_:)-13kql",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/reductions(into:_:)-65u9g",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrowingchannel",
            "title" : "AsyncThrowingChannel",
            "type" : "class"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> (Base.Element, Base.Element)?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/iterator\/element",
                    "title" : "AsyncAdjacentPairsSequence.Iterator.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/iterator",
                "title" : "AsyncAdjacentPairsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/element",
                "title" : "AsyncAdjacentPairsSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(by:into:)-9ex6q",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(by:into:)-9pgz5",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:or:)-4c65x",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:or:)-8y2vb",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:or:into:)-17evj",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/chunks(ofcount:or:into:)-5j04z",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/compactmap(_:)-8f7bl",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/compactmap(_:)-yde1",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/flatmap(_:)-60qnq",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/flatmap(_:)-8b9ti",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/interspersed(every:with:)-2dd0t",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/interspersed(every:with:)-2lmnt",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/interspersed(every:with:)-4x7kf",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/interspersed(every:with:)-7y7mb",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/interspersed(every:with:)-84nrf",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/map(_:)-1w3ji",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/map(_:)-5tmp2",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(_:_:)-23t09",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(_:_:)-2fu3d",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(into:_:)-2m6oh",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/reductions(into:_:)-7jvu5",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncadjacentpairssequence",
            "title" : "AsyncAdjacentPairsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/iterator",
                "title" : "AsyncBufferSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/asynciterator",
                "title" : "AsyncBufferSequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/element",
                "title" : "AsyncBufferSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(by:into:)-6588t",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(by:into:)-663wg",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:or:)-6eh9a",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:or:)-6oz8v",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:or:into:)-2pro7",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/chunks(ofcount:or:into:)-8g71x",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/compactmap(_:)-1tl72",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/compactmap(_:)-bv66",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/flatmap(_:)-1l3sb",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/flatmap(_:)-277gw",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/interspersed(every:with:)-1y8ra",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/interspersed(every:with:)-51url",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/interspersed(every:with:)-7azjg",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/interspersed(every:with:)-9a6nu",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/interspersed(every:with:)-oy16",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/map(_:)-5k84n",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/map(_:)-78sa9",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(_:_:)-7p6fl",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(_:_:)-9jpv0",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(into:_:)-78zlg",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/reductions(into:_:)-942q",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequence",
            "title" : "AsyncBufferSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequencepolicy\/unbounded",
                "title" : "static var unbounded: `Self`",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequencepolicy\/bounded(_:)",
                "title" : "static func bounded(Int) -> AsyncBufferSequencePolicy",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequencepolicy\/bufferinglatest(_:)",
                "title" : "static func bufferingLatest(Int) -> AsyncBufferSequencePolicy",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequencepolicy\/bufferingoldest(_:)",
                "title" : "static func bufferingOldest(Int) -> AsyncBufferSequencePolicy",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncbuffersequencepolicy",
            "title" : "AsyncBufferSequencePolicy",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/init(capacity:readfunction:)",
                "title" : "init(capacity: Int, readFunction: (UnsafeMutableRawBufferPointer) async throws -> Int)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/next()",
                "title" : "func next() async throws -> UInt8?",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator\/element",
                "title" : "AsyncBufferedByteIterator.Element",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncbufferedbyteiterator",
            "title" : "AsyncBufferedByteIterator",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/iterator",
                "title" : "AsyncChain2Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(by:into:)-4bq9c",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(by:into:)-4bqb2",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:or:)-2c5um",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:or:)-8yyex",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:or:into:)-55pim",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/chunks(ofcount:or:into:)-6b6r0",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/compactmap(_:)-21ibv",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/compactmap(_:)-47dj",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/flatmap(_:)-511jm",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/flatmap(_:)-8hdnk",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/interspersed(every:with:)-3kuqh",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/interspersed(every:with:)-55ffa",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/interspersed(every:with:)-86h5n",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/interspersed(every:with:)-9ejy6",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/interspersed(every:with:)-yzic",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/map(_:)-7nk1f",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/map(_:)-900ww",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(_:_:)-3wrzl",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(_:_:)-9etkw",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(into:_:)-1fdh1",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/reductions(into:_:)-9i52p",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/element",
                    "title" : "AsyncChain2Sequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchain2sequence",
            "title" : "AsyncChain2Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/iterator",
                "title" : "AsyncChain3Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(by:into:)-5kb77",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(by:into:)-l278",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:or:)-4jk04",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:or:)-7ip8m",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:or:into:)-50dgb",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/chunks(ofcount:or:into:)-97ky4",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/compactmap(_:)-72nuc",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/compactmap(_:)-9ab8i",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/flatmap(_:)-2h55n",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/flatmap(_:)-9e6z2",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/interspersed(every:with:)-1h0wu",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/interspersed(every:with:)-37zfi",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/interspersed(every:with:)-7a3ip",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/interspersed(every:with:)-7w9su",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/interspersed(every:with:)-7xfpr",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/map(_:)-47zgr",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/map(_:)-7yh27",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(_:_:)-4byh6",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(_:_:)-6o0u4",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(into:_:)-2gxcq",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/reductions(into:_:)-5yub0",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/element",
                    "title" : "AsyncChain3Sequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchain3sequence",
            "title" : "AsyncChain3Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Collected?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/iterator",
                "title" : "AsyncChunkedByGroupSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/element",
                "title" : "AsyncChunkedByGroupSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(by:into:)-6p38q",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(by:into:)-8mv40",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:or:)-5gyam",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:or:)-8cpyr",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:or:into:)-6g5yu",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/chunks(ofcount:or:into:)-79kif",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/compactmap(_:)-2e7eu",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/compactmap(_:)-35f1c",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/flatmap(_:)-5ckkd",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/flatmap(_:)-d79b",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/interspersed(every:with:)-2h8jg",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/interspersed(every:with:)-4egaj",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/interspersed(every:with:)-6m64f",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/interspersed(every:with:)-74yii",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/interspersed(every:with:)-99hpi",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/map(_:)-4959b",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/map(_:)-57shn",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(_:_:)-3z0kv",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(_:_:)-60cri",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(into:_:)-7p7c2",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/reductions(into:_:)-7pcof",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchunkedbygroupsequence",
            "title" : "AsyncChunkedByGroupSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> (Subject, Collected)?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/iterator",
                "title" : "AsyncChunkedOnProjectionSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/element",
                "title" : "AsyncChunkedOnProjectionSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(by:into:)-1qwcz",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(by:into:)-7i8zs",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:or:)-5583l",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:or:)-7zmhh",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:or:into:)-2no4r",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/chunks(ofcount:or:into:)-43d91",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/compactmap(_:)-4yrtm",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/compactmap(_:)-6j7hm",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/flatmap(_:)-7lnu5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/flatmap(_:)-906c2",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/interspersed(every:with:)-5zwj6",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/interspersed(every:with:)-6128y",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/interspersed(every:with:)-674ex",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/interspersed(every:with:)-78549",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/interspersed(every:with:)-8ht2k",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/map(_:)-16x5",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/map(_:)-7jw3m",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(_:_:)-4dn03",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(_:_:)-no1",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(into:_:)-1aa7y",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/reductions(into:_:)-3tvc0",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchunkedonprojectionsequence",
            "title" : "AsyncChunkedOnProjectionSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Collected?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/iterator",
                "title" : "AsyncChunksOfCountOrSignalSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/element",
                "title" : "AsyncChunksOfCountOrSignalSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(by:into:)-9g6ae",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(by:into:)-x8kf",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:or:)-29u2x",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:or:)-9rkv6",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:or:into:)-4xcy2",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/chunks(ofcount:or:into:)-8fhcw",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/compactmap(_:)-5htrq",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/compactmap(_:)-8dsre",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/flatmap(_:)-3p70w",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/flatmap(_:)-3v0xr",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/interspersed(every:with:)-3x13s",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/interspersed(every:with:)-3yai1",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/interspersed(every:with:)-4ykp1",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/interspersed(every:with:)-6akte",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/interspersed(every:with:)-7aqgb",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/map(_:)-1w3rt",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/map(_:)-2xla5",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(_:_:)-46il4",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(_:_:)-748sr",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(into:_:)-5vgsk",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/reductions(into:_:)-9ablj",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountorsignalsequence",
            "title" : "AsyncChunksOfCountOrSignalSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Collected?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/iterator",
                "title" : "AsyncChunksOfCountSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/element",
                "title" : "AsyncChunksOfCountSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(by:into:)-3pq9r",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(by:into:)-4iywh",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:or:)-3ubjk",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:or:)-q9o3",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:or:into:)-1cawq",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/chunks(ofcount:or:into:)-1nzm0",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/compactmap(_:)-1os9s",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/compactmap(_:)-5gu8z",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/flatmap(_:)-1zxci",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/flatmap(_:)-4d21d",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/interspersed(every:with:)-24mtj",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/interspersed(every:with:)-2vznp",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/interspersed(every:with:)-4cusj",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/interspersed(every:with:)-5ovib",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/interspersed(every:with:)-9mbda",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/map(_:)-266ni",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/map(_:)-7d3ey",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(_:_:)-5cznd",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(_:_:)-7rhy3",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(into:_:)-3mzh0",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/reductions(into:_:)-wzc3",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncchunksofcountsequence",
            "title" : "AsyncChunksOfCountSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/iterator",
                "title" : "AsyncCombineLatest2Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> AsyncIterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/asynciterator",
                "title" : "AsyncCombineLatest2Sequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/element",
                "title" : "AsyncCombineLatest2Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(by:into:)-60ak9",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(by:into:)-668lv",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:or:)-7m8bz",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:or:)-9582w",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:or:into:)-4t3v8",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/chunks(ofcount:or:into:)-8xok1",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/compactmap(_:)-2jhv4",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/compactmap(_:)-2wqma",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/flatmap(_:)-5m0tb",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/flatmap(_:)-5umsw",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/interspersed(every:with:)-4zs3n",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/interspersed(every:with:)-5qllh",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/interspersed(every:with:)-6apl0",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/interspersed(every:with:)-79bjp",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/interspersed(every:with:)-7ectj",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/map(_:)-64jnp",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/map(_:)-6w8ax",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(_:_:)-2chro",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(_:_:)-4hjff",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(into:_:)-1wij9",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/reductions(into:_:)-689yt",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest2sequence",
            "title" : "AsyncCombineLatest2Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/iterator",
                "title" : "AsyncCombineLatest3Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> AsyncIterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/asynciterator",
                "title" : "AsyncCombineLatest3Sequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/element",
                "title" : "AsyncCombineLatest3Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(by:into:)-20xoh",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(by:into:)-6c6kc",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:or:)-3l13o",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:or:)-7ga68",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:or:into:)-1z3",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/chunks(ofcount:or:into:)-6dbts",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/compactmap(_:)-1md0n",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/compactmap(_:)-3s2sz",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/flatmap(_:)-2d2xe",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/flatmap(_:)-3okwp",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/interspersed(every:with:)-1qnh1",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/interspersed(every:with:)-7vlt8",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/interspersed(every:with:)-8fwq0",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/interspersed(every:with:)-8hwhq",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/interspersed(every:with:)-8m8pc",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/map(_:)-6h242",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/map(_:)-90xuv",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(_:_:)-2ro5r",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(_:_:)-375zy",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(into:_:)-90f79",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/reductions(into:_:)-fe74",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynccombinelatest3sequence",
            "title" : "AsyncCombineLatest3Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/iterator",
                "title" : "AsyncCompactedSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(by:into:)-4rvm9",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(by:into:)-owiu",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:or:)-1n7q8",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:or:)-2ywx0",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:or:into:)-7ph9s",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/chunks(ofcount:or:into:)-93kgs",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/compactmap(_:)-1imol",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/compactmap(_:)-3c170",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/flatmap(_:)-1g1wi",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/flatmap(_:)-27epm",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/interspersed(every:with:)-1fwcm",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/interspersed(every:with:)-1w7r3",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/interspersed(every:with:)-2sj3g",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/interspersed(every:with:)-336lh",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/interspersed(every:with:)-9jkna",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/map(_:)-1ja6u",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/map(_:)-1lz7i",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(_:_:)-4lz5n",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(_:_:)-82spl",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(into:_:)-28hzd",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/reductions(into:_:)-7en25",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynccompactedsequence",
            "title" : "AsyncCompactedSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/iterator",
                "title" : "AsyncDebounceSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(by:into:)-8vn84",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(by:into:)-8yqe7",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:or:)-6nsxo",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:or:)-9fb9b",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:or:into:)-7veip",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/chunks(ofcount:or:into:)-9jqtn",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/compactmap(_:)-8a4i7",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/compactmap(_:)-9og8s",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/flatmap(_:)-171w9",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/flatmap(_:)-2dbsd",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/interspersed(every:with:)-1cugh",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/interspersed(every:with:)-4528d",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/interspersed(every:with:)-684nf",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/interspersed(every:with:)-69q6r",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/interspersed(every:with:)-8hf2c",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/map(_:)-63tmm",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/map(_:)-94lyj",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(_:_:)-2uzlu",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(_:_:)-3mcly",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(into:_:)-6l53c",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/reductions(into:_:)-cxxg",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/element",
                    "title" : "AsyncDebounceSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncdebouncesequence",
            "title" : "AsyncDebounceSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/iterator",
                "title" : "AsyncExclusiveReductionsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(by:into:)-5z7vc",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(by:into:)-690oe",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:or:)-3nkd3",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:or:)-4rouc",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:or:into:)-16uth",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/chunks(ofcount:or:into:)-3aa4b",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/compactmap(_:)-4w0a0",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/compactmap(_:)-6aquc",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/flatmap(_:)-4cwvn",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/flatmap(_:)-59cvf",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/interspersed(every:with:)-490re",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/interspersed(every:with:)-7vdrh",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/interspersed(every:with:)-8i32a",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/interspersed(every:with:)-bn9a",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/interspersed(every:with:)-psc2",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/map(_:)-15grs",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/map(_:)-5ccqs",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(_:_:)-607ey",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(_:_:)-9xhbw",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(into:_:)-2eltp",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/reductions(into:_:)-978i0",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncexclusivereductionssequence",
            "title" : "AsyncExclusiveReductionsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Base.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/iterator",
                "title" : "AsyncInclusiveReductionsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(by:into:)-2lxdj",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(by:into:)-82m32",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:or:)-6clvo",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:or:)-8ej9c",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:or:into:)-30zc5",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/chunks(ofcount:or:into:)-9yjng",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/compactmap(_:)-5f6gc",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/compactmap(_:)-7o7oj",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/flatmap(_:)-1zhcy",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/flatmap(_:)-36qfc",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/interspersed(every:with:)-1q65m",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/interspersed(every:with:)-5uas4",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/interspersed(every:with:)-62kug",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/interspersed(every:with:)-7cvr9",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/interspersed(every:with:)-9ej09",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/map(_:)-5ikee",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/map(_:)-6849h",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(_:_:)-2q35a",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(_:_:)-3ztk2",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(into:_:)-21r02",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/reductions(into:_:)-6c6se",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/element",
                    "title" : "AsyncInclusiveReductionsSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncinclusivereductionssequence",
            "title" : "AsyncInclusiveReductionsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Base.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/iterator",
                "title" : "AsyncInterspersedSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(by:into:)-2i2a0",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(by:into:)-9z67k",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:or:)-750tr",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:or:)-7l635",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:or:into:)-2v4fm",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/chunks(ofcount:or:into:)-4lgki",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/compactmap(_:)-2wp1v",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/compactmap(_:)-8r1n4",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/flatmap(_:)-8ukns",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/flatmap(_:)-ud4u",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/interspersed(every:with:)-21l92",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/interspersed(every:with:)-5ylc9",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/interspersed(every:with:)-7h2c1",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/interspersed(every:with:)-8r5cf",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/interspersed(every:with:)-9q589",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/map(_:)-2d7qs",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/map(_:)-5eski",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(_:_:)-3hqnh",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(_:_:)-6y8eo",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(into:_:)-6wj27",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/reductions(into:_:)-bk8k",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/element",
                    "title" : "AsyncInterspersedSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncinterspersedsequence",
            "title" : "AsyncInterspersedSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Base.Element.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/iterator",
                "title" : "AsyncJoinedBySeparatorSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/asynciterator",
                "title" : "AsyncJoinedBySeparatorSequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/element",
                "title" : "AsyncJoinedBySeparatorSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(by:into:)-497vw",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(by:into:)-7mgyt",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:or:)-73m7x",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:or:)-80tkb",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:or:into:)-5effw",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/chunks(ofcount:or:into:)-9ejqp",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/compactmap(_:)-5084a",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/compactmap(_:)-5zeop",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/flatmap(_:)-2btzh",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/flatmap(_:)-zx0l",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/interspersed(every:with:)-4hzrv",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/interspersed(every:with:)-7bms0",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/interspersed(every:with:)-7xc80",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/interspersed(every:with:)-egtj",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/interspersed(every:with:)-va06",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/map(_:)-4yzh4",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/map(_:)-6cfv",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(_:_:)-132f6",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(_:_:)-2klax",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(into:_:)-1rbu8",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/reductions(into:_:)-95v8y",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncjoinedbyseparatorsequence",
            "title" : "AsyncJoinedBySeparatorSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Base.Element.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/iterator",
                "title" : "AsyncJoinedSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/asynciterator",
                "title" : "AsyncJoinedSequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/element",
                "title" : "AsyncJoinedSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(by:into:)-3bsj8",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(by:into:)-8frkq",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:or:)-1zvyv",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:or:)-6ipb4",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:or:into:)-7skor",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/chunks(ofcount:or:into:)-9t2y5",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/compactmap(_:)-6hiwz",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/compactmap(_:)-9r9yt",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/flatmap(_:)-2f6f5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/flatmap(_:)-3x0wh",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/interspersed(every:with:)-2w5tn",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/interspersed(every:with:)-46utd",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/interspersed(every:with:)-4bcv7",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/interspersed(every:with:)-525wb",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/interspersed(every:with:)-5yv3p",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/map(_:)-36lgq",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/map(_:)-885kb",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(_:_:)-1obhx",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(_:_:)-74zlv",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(into:_:)-6qg2h",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/reductions(into:_:)-8kf2o",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncjoinedsequence",
            "title" : "AsyncJoinedSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/iterator",
                "title" : "AsyncMerge2Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/element",
                "title" : "AsyncMerge2Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(by:into:)-2327g",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(by:into:)-86xor",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:or:)-1ngdw",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:or:)-2expp",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:or:into:)-84tx2",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/chunks(ofcount:or:into:)-96u5w",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/compactmap(_:)-3vx4e",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/compactmap(_:)-7tqjt",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/flatmap(_:)-3k0lz",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/flatmap(_:)-xp9x",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/interspersed(every:with:)-19zna",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/interspersed(every:with:)-7ir2p",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/interspersed(every:with:)-7zpuw",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/interspersed(every:with:)-8l3dc",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/interspersed(every:with:)-w4fi",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/map(_:)-3qgeu",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/map(_:)-7yaat",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(_:_:)-41zr",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(_:_:)-57g5v",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(into:_:)-3gfuc",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/reductions(into:_:)-4p85w",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncmerge2sequence",
            "title" : "AsyncMerge2Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/iterator",
                "title" : "AsyncMerge3Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/element",
                "title" : "AsyncMerge3Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(by:into:)-1kwbc",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(by:into:)-1wlb4",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:or:)-25lw0",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:or:)-7vay",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:or:into:)-6h10e",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/chunks(ofcount:or:into:)-9fwom",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/compactmap(_:)-2nc3p",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/compactmap(_:)-5waaf",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/flatmap(_:)-2ed3h",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/flatmap(_:)-dme0",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/interspersed(every:with:)-15h68",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/interspersed(every:with:)-3005p",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/interspersed(every:with:)-46dve",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/interspersed(every:with:)-4rs5q",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/interspersed(every:with:)-6r4wr",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/map(_:)-74mg2",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/map(_:)-760yk",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(_:_:)-3a09p",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(_:_:)-712wq",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(into:_:)-3avj3",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/reductions(into:_:)-5qc05",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncmerge3sequence",
            "title" : "AsyncMerge3Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/iterator",
                "title" : "AsyncRemoveDuplicatesSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/element",
                "title" : "AsyncRemoveDuplicatesSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(by:into:)-49i2k",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(by:into:)-8s17m",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:or:)-21p7l",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:or:)-5756w",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:or:into:)-557pt",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/chunks(ofcount:or:into:)-7ecfn",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/compactmap(_:)-895qt",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/compactmap(_:)-g03a",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/flatmap(_:)-4rdxn",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/flatmap(_:)-5l3m5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/interspersed(every:with:)-3zdb6",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/interspersed(every:with:)-7ft6x",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/interspersed(every:with:)-87h55",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/interspersed(every:with:)-98tvx",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/interspersed(every:with:)-s16k",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/map(_:)-20wy4",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/map(_:)-5xo1b",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(_:_:)-2fufi",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(_:_:)-8ie2k",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(into:_:)-464w5",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/reductions(into:_:)-8r98r",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncremoveduplicatessequence",
            "title" : "AsyncRemoveDuplicatesSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/iterator\/next()",
                    "title" : "func next() async -> Base.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/iterator",
                "title" : "AsyncSyncSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/element",
                "title" : "AsyncSyncSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunked(by:into:)-3qqa0",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunked(by:into:)-r28r",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunks(ofcount:or:)-8qvne",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunks(ofcount:or:)-96o8s",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunks(ofcount:or:into:)-76u58",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/chunks(ofcount:or:into:)-95ix5",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/compactmap(_:)-955kt",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/compactmap(_:)-9leml",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/flatmap(_:)-6vkyg",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/flatmap(_:)-zoxt",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/interspersed(every:with:)-3zuki",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/interspersed(every:with:)-5v1qt",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/interspersed(every:with:)-6lt47",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/interspersed(every:with:)-8m6da",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/interspersed(every:with:)-r4gr",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/map(_:)-4ij7w",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/map(_:)-4p6uo",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/reductions(_:_:)-71bpj",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/reductions(_:_:)-7wq4i",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/reductions(into:_:)-1qzka",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/reductions(into:_:)-8vml",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncsyncsequence",
            "title" : "AsyncSyncSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/iterator\/next()",
                    "title" : "func next() async throws -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/iterator",
                "title" : "AsyncThrowingExclusiveReductionsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(by:into:)-4lezz",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(by:into:)-5tygy",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:or:)-2jl5u",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:or:)-80gdw",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:or:into:)-kg6v",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/chunks(ofcount:or:into:)-ped7",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/compactmap(_:)-6u376",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/compactmap(_:)-83j65",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/flatmap(_:)-548yi",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/flatmap(_:)-811m0",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/interspersed(every:with:)-25eit",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/interspersed(every:with:)-3oppr",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/interspersed(every:with:)-4rpf4",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/interspersed(every:with:)-795u0",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/interspersed(every:with:)-7fnwr",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/map(_:)-3wt95",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/map(_:)-7q5on",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(_:_:)-22k1m",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(_:_:)-7se72",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(into:_:)-4tjxp",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/reductions(into:_:)-5udzf",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrowingexclusivereductionssequence",
            "title" : "AsyncThrowingExclusiveReductionsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/iterator\/next()",
                    "title" : "func next() async throws -> Base.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/iterator",
                "title" : "AsyncThrowingInclusiveReductionsSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(by:into:)-23zxe",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(by:into:)-2qm85",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:or:)-10hv7",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:or:)-8rhtw",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:or:into:)-8oyst",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/chunks(ofcount:or:into:)-9ycfm",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/compactmap(_:)-1lzsq",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/compactmap(_:)-6zw2y",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/flatmap(_:)-6t526",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/flatmap(_:)-7cpdo",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/interspersed(every:with:)-2wb2r",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/interspersed(every:with:)-3mjlc",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/interspersed(every:with:)-3v4fy",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/interspersed(every:with:)-715te",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/interspersed(every:with:)-9xxgk",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/map(_:)-4fu4r",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/map(_:)-9ggzu",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(_:_:)-28cnm",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(_:_:)-93q5c",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(into:_:)-25udw",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/reductions(into:_:)-8k410",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/element",
                    "title" : "AsyncThrowingInclusiveReductionsSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginclusivereductionssequence",
            "title" : "AsyncThrowingInclusiveReductionsSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/iterator\/next()",
                    "title" : "func next() async throws -> Base.Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/iterator",
                "title" : "AsyncThrowingInterspersedSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunked(by:into:)-5691p",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunked(by:into:)-dj2l",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunks(ofcount:or:)-35m96",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunks(ofcount:or:)-6ql4g",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunks(ofcount:or:into:)-4t19r",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/chunks(ofcount:or:into:)-73u1l",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/compactmap(_:)-2xh6u",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/compactmap(_:)-8ou8z",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/flatmap(_:)-5f69w",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/flatmap(_:)-o632",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/interspersed(every:with:)-1bsul",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/interspersed(every:with:)-51bie",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/interspersed(every:with:)-5kjoi",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/interspersed(every:with:)-8p0g2",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/interspersed(every:with:)-g9fh",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/makeasynciterator()",
                    "title" : "func makeAsyncIterator() -> Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/map(_:)-3ov18",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/map(_:)-65je7",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/reductions(_:_:)-2he1n",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/reductions(_:_:)-9y8op",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/reductions(into:_:)-9x0kr",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/reductions(into:_:)-xla1",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/element",
                    "title" : "AsyncThrowingInterspersedSequence.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrowinginterspersedsequence",
            "title" : "AsyncThrowingInterspersedSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/iterator\/next()",
                    "title" : "func next() async throws -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/iterator",
                "title" : "AsyncThrowingRemoveDuplicatesSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/element",
                "title" : "AsyncThrowingRemoveDuplicatesSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(by:into:)-2mmen",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(by:into:)-ltul",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:or:)-2a76d",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:or:)-35evc",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:or:into:)-1xssb",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/chunks(ofcount:or:into:)-7z5ip",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/compactmap(_:)-5xlsh",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/compactmap(_:)-7tejq",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/flatmap(_:)-7oo4i",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/flatmap(_:)-8wrke",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/interspersed(every:with:)-1fnj9",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/interspersed(every:with:)-45vf6",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/interspersed(every:with:)-4z8g9",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/interspersed(every:with:)-5rct9",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/interspersed(every:with:)-rmvw",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/map(_:)-3st6w",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/map(_:)-5jaa7",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(_:_:)-2b973",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(_:_:)-9hszc",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(into:_:)-49030",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/reductions(into:_:)-kljz",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asyncthrowingremoveduplicatessequence",
            "title" : "AsyncThrowingRemoveDuplicatesSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/iterator\/next()",
                    "title" : "func next() async -> C.Instant?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/iterator",
                "title" : "AsyncTimerSequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/init(interval:tolerance:clock:)",
                "title" : "init(interval: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> Iterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/element",
                "title" : "AsyncTimerSequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/repeating(every:tolerance:)",
                "title" : "static func repeating(every: Duration, tolerance: Duration?) -> AsyncTimerSequence<SuspendingClock>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/repeating(every:tolerance:clock:)",
                "title" : "static func repeating(every: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncTimerSequence<C>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(by:into:)-4wv00",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(by:into:)-5o9w3",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:or:)-4rmp2",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:or:)-4sfex",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:or:into:)-5j7np",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/chunks(ofcount:or:into:)-95ot5",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/compactmap(_:)-2ybse",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/compactmap(_:)-6fdqt",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/flatmap(_:)-5f7pc",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/flatmap(_:)-5i000",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/interspersed(every:with:)-1qonj",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/interspersed(every:with:)-3b56i",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/interspersed(every:with:)-4jhuy",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/interspersed(every:with:)-4m2ak",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/interspersed(every:with:)-6oabv",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/joined()",
                    "title" : "func joined() -> AsyncJoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> AsyncJoinedBySeparatorSequence<Self, Separator>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/map(_:)-5dnxh",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/map(_:)-871hb",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/max()",
                    "title" : "func max() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/min()",
                    "title" : "func min() async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(_:_:)-31r18",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(_:_:)-6cgze",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(into:_:)-6fpo9",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/reductions(into:_:)-9tk2s",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynctimersequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynctimersequence",
            "title" : "AsyncTimerSequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/iterator",
                "title" : "AsyncZip2Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> AsyncIterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/asynciterator",
                "title" : "AsyncZip2Sequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/element",
                "title" : "AsyncZip2Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(by:into:)-43vv3",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(by:into:)-53c8k",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:or:)-4pz3k",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:or:)-m01g",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:or:into:)-7mu8k",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/chunks(ofcount:or:into:)-7tl8v",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/compactmap(_:)-8bxhi",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/compactmap(_:)-9258f",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/flatmap(_:)-7fatu",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/flatmap(_:)-9e7uy",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/interspersed(every:with:)-1ouz1",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/interspersed(every:with:)-377fr",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/interspersed(every:with:)-47wm9",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/interspersed(every:with:)-84og6",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/interspersed(every:with:)-9vlap",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/map(_:)-19yvg",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/map(_:)-1ho08",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(_:_:)-6n8t3",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(_:_:)-6qx6h",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(into:_:)-5l5yj",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/reductions(into:_:)-8tk71",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynczip2sequence",
            "title" : "AsyncZip2Sequence",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/iterator\/next()",
                    "title" : "func next() async rethrows -> Element?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/iterator",
                "title" : "AsyncZip3Sequence.Iterator",
                "type" : "struct"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> AsyncIterator",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/asynciterator",
                "title" : "AsyncZip3Sequence.AsyncIterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/element",
                "title" : "AsyncZip3Sequence.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/buffer(policy:)",
                    "title" : "func buffer(policy: AsyncBufferSequencePolicy) -> AsyncBufferSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(by:)",
                    "title" : "func chunked(by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(by:into:)-6bx6n",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(by:into:)-8y3yt",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Element, Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:or:)-4nqfs",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:or:)-8pbyi",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:or:into:)-1pnho",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/chunks(ofcount:or:into:)-6vob6",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/compactmap(_:)-493ac",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/compactmap(_:)-71k3f",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/flatmap(_:)-4uy4f",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/flatmap(_:)-5nsoo",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/interspersed(every:with:)-10woa",
                    "title" : "func interspersed(every: Int, with: Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/interspersed(every:with:)-3e8vy",
                    "title" : "func interspersed(every: Int, with: () -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/interspersed(every:with:)-4mg5",
                    "title" : "func interspersed(every: Int, with: () async throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/interspersed(every:with:)-6or57",
                    "title" : "func interspersed(every: Int, with: () async -> Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/interspersed(every:with:)-77n8t",
                    "title" : "func interspersed(every: Int, with: () throws -> Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/map(_:)-2s1gx",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/map(_:)-8hezx",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(_:)",
                    "title" : "func reductions((Element, Element) async -> Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(_:_:)-413xh",
                    "title" : "func reductions<Result>(Result, (Result, Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(_:_:)-5cvl6",
                    "title" : "func reductions<Result>(Result, (Result, Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(into:_:)-441ju",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/reductions(into:_:)-5n5ya",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Element, Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/asyncalgorithms\/asynczip3sequence",
            "title" : "AsyncZip3Sequence",
            "type" : "struct"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/chain(_:_:)",
            "title" : "func chain<Base1, Base2>(Base1, Base2) -> AsyncChain2Sequence<Base1, Base2>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/chain(_:_:_:)",
            "title" : "func chain<Base1, Base2, Base3>(Base1, Base2, Base3) -> AsyncChain3Sequence<Base1, Base2, Base3>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/combinelatest(_:_:)",
            "title" : "func combineLatest<Base1, Base2>(Base1, Base2) -> AsyncCombineLatest2Sequence<Base1, Base2>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/combinelatest(_:_:_:)",
            "title" : "func combineLatest<Base1, Base2, Base3>(Base1, Base2, Base3) -> AsyncCombineLatest3Sequence<Base1, Base2, Base3>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/merge(_:_:)",
            "title" : "func merge<Base1, Base2>(Base1, Base2) -> AsyncMerge2Sequence<Base1, Base2>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/merge(_:_:_:)",
            "title" : "func merge<Base1, Base2, Base3>(Base1, Base2, Base3) -> AsyncMerge3Sequence<Base1, Base2, Base3>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/zip(_:_:)",
            "title" : "func zip<Base1, Base2>(Base1, Base2) -> AsyncZip2Sequence<Base1, Base2>",
            "type" : "func"
          },
          {
            "path" : "\/documentation\/asyncalgorithms\/zip(_:_:_:)",
            "title" : "func zip<Base1, Base2, Base3>(Base1, Base2, Base3) -> AsyncZip3Sequence<Base1, Base2, Base3>",
            "type" : "func"
          }
        ],
        "path" : "\/documentation\/asyncalgorithms",
        "title" : "AsyncAlgorithms",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewcontroller\/init(query:store:viewsynchronizer:)",
                "title" : "init(query: OCKEventQuery, store: OCKAnyStoreProtocol, viewSynchronizer: OCKButtonLogTaskViewSynchronizer)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewcontroller",
            "title" : "OCKButtonLogTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKButtonLogTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKButtonLogTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockbuttonlogtaskviewsynchronizer",
            "title" : "OCKButtonLogTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/init(dateinterval:store:viewsynchronizer:computeprogress:)",
                "title" : "init(dateInterval: DateInterval, store: OCKAnyStoreProtocol, viewSynchronizer: ViewSynchronizer, computeProgress: (OCKAnyEvent) -> CareTaskProgress)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/calendarview",
                "title" : "var calendarView: ViewSynchronizer.View",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewcontroller\/calendarview(_:didselectdate:at:sender:)",
                "title" : "func calendarView(UIView & OCKCalendarDisplayable, didSelectDate: Date, at: Int, sender: Any?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcalendarviewcontroller",
            "title" : "OCKCalendarViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewcontroller\/init(plottype:selecteddate:configurations:store:)",
                "title" : "init(plotType: OCKCartesianGraphView.PlotType, selectedDate: Date, configurations: [OCKDataSeriesConfiguration], store: OCKAnyStoreProtocol)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewcontroller\/init(weekofdate:configurations:store:viewsynchronizer:)",
                "title" : "init(weekOfDate: Date, configurations: [OCKDataSeriesConfiguration], store: OCKAnyStoreProtocol, viewSynchronizer: OCKCartesianChartViewSynchronizer)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcartesianchartviewcontroller",
            "title" : "OCKCartesianChartViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/init(plottype:selecteddate:)",
                "title" : "init(plotType: OCKCartesianGraphView.PlotType, selectedDate: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/plottype",
                "title" : "let plotType: OCKCartesianGraphView.PlotType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/selecteddate",
                "title" : "let selectedDate: Date",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKCartesianChartView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKCartesianChartView, context: OCKSynchronizationContext<[OCKDataSeries]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcartesianchartviewsynchronizer",
            "title" : "OCKCartesianChartViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/init(weekofdate:configurations:store:viewsynchronizer:)",
                "title" : "init(weekOfDate: Date, configurations: [OCKDataSeriesConfiguration], store: OCKAnyStoreProtocol, viewSynchronizer: ViewSynchronizer)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/chartview",
                "title" : "var chartView: ViewSynchronizer.View",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/didselectchartview(_:)",
                "title" : "func didSelectChartView(UIView & OCKChartDisplayable)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchartviewcontroller",
            "title" : "OCKChartViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewcontroller\/init(query:store:viewsynchronizer:)",
                "title" : "init(query: OCKEventQuery, store: OCKAnyStoreProtocol, viewSynchronizer: OCKChecklistTaskViewSynchronizer)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchecklisttaskviewcontroller",
            "title" : "OCKChecklistTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKChecklistTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKChecklistTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchecklisttaskviewsynchronizer",
            "title" : "OCKChecklistTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/init(query:store:viewsynchronizer:)",
                "title" : "init(query: OCKContactQuery, store: OCKAnyStoreProtocol, viewSynchronizer: ViewSynchronizer)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/contactview",
                "title" : "var contactView: ViewSynchronizer.View",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactviewcontroller",
            "title" : "OCKContactViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/init(store:)",
                "title" : "init(store: OCKAnyStoreProtocol)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/init(store:contactviewsynchronizer:)",
                "title" : "init(store: OCKAnyStoreProtocol, contactViewSynchronizer: ContactViewSynchronizer)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactslistviewcontroller",
            "title" : "OCKContactsListViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/init(store:computeprogress:)",
                "title" : "init(store: OCKAnyStoreProtocol, computeProgress: (OCKAnyEvent) -> CareTaskProgress)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/currentpage",
                "title" : "var currentPage: OCKListViewController?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/datasource",
                "title" : "var dataSource: OCKDailyPageViewControllerDataSource?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/delegate",
                "title" : "var delegate: OCKDailyPageViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/selecteddate",
                "title" : "var selectedDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/store",
                "title" : "let store: OCKAnyStoreProtocol",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/dailypageviewcontroller(_:didfailwitherror:)",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, didFailWithError: Error)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/dailypageviewcontroller(_:prepare:for:)",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, prepare: OCKListViewController, for: Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/loadview()",
                "title" : "func loadView()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/pageviewcontroller(_:didfinishanimating:previousviewcontrollers:transitioncompleted:)",
                "title" : "func pageViewController(UIPageViewController, didFinishAnimating: Bool, previousViewControllers: [UIViewController], transitionCompleted: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/pageviewcontroller(_:viewcontrollerafter:)",
                "title" : "func pageViewController(UIPageViewController, viewControllerAfter: UIViewController) -> UIViewController?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/pageviewcontroller(_:viewcontrollerbefore:)",
                "title" : "func pageViewController(UIPageViewController, viewControllerBefore: UIViewController) -> UIViewController?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/reload()",
                "title" : "func reload()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/selectdate(_:animated:)",
                "title" : "func selectDate(Date, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/viewsafeareainsetsdidchange()",
                "title" : "func viewSafeAreaInsetsDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/weekcalendarpageviewcontroller(_:didchangedateinterval:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didChangeDateInterval: DateInterval)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/weekcalendarpageviewcontroller(_:didencountererror:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didEncounterError: Error)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontroller\/weekcalendarpageviewcontroller(_:didselectdate:previousdate:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didSelectDate: Date, previousDate: Date)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailypageviewcontroller",
            "title" : "OCKDailyPageViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontroller\/tasksdelegate",
                "title" : "var tasksDelegate: OCKDailyTasksPageViewControllerDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontroller\/dailypageviewcontroller(_:prepare:for:)",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, prepare: OCKListViewController, for: Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontroller\/dailytaskspageviewcontroller(_:viewcontrollerfortask:events:eventquery:)",
                "title" : "func dailyTasksPageViewController(OCKDailyTasksPageViewController, viewControllerForTask: OCKAnyTask, events: [OCKAnyEvent], eventQuery: OCKEventQuery) -> UIViewController?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontroller",
            "title" : "OCKDailyTasksPageViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailviewcontroller\/init(html:imageoverlaystyle:showsclosebutton:)",
                "title" : "init(html: OCKDetailView.StyledHTML?, imageOverlayStyle: UIUserInterfaceStyle, showsCloseButton: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailviewcontroller\/detailview",
                "title" : "var detailView: OCKDetailView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdetailviewcontroller",
            "title" : "OCKDetailViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewcontroller\/init(query:store:viewsynchronizer:)",
                "title" : "init(query: OCKContactQuery, store: OCKAnyStoreProtocol, viewSynchronizer: OCKDetailedContactViewSynchronizer)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdetailedcontactviewcontroller",
            "title" : "OCKDetailedContactViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKDetailedContactView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKDetailedContactView, context: OCKSynchronizationContext<OCKAnyContact?>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdetailedcontactviewsynchronizer",
            "title" : "OCKDetailedContactViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/init(query:store:viewsynchronizer:)",
                "title" : "init(query: OCKEventQuery, store: OCKAnyStoreProtocol, viewSynchronizer: OCKGridTaskViewSynchronizer)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/collectionview(_:cellforitemat:)",
                "title" : "func collectionView(UICollectionView, cellForItemAt: IndexPath) -> UICollectionViewCell",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/collectionview(_:numberofitemsinsection:)",
                "title" : "func collectionView(UICollectionView, numberOfItemsInSection: Int) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockgridtaskviewcontroller",
            "title" : "OCKGridTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKGridTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKGridTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockgridtaskviewsynchronizer",
            "title" : "OCKGridTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewcontroller\/init(query:store:viewsynchronizer:)",
                "title" : "init(query: OCKEventQuery, store: OCKAnyStoreProtocol, viewSynchronizer: OCKInstructionsTaskViewSynchronizer)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockinstructionstaskviewcontroller",
            "title" : "OCKInstructionsTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKInstructionsTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKInstructionsTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockinstructionstaskviewsynchronizer",
            "title" : "OCKInstructionsTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/appendview(_:animated:)",
                "title" : "func appendView(UIView, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/appendviewcontroller(_:animated:)",
                "title" : "func appendViewController(UIViewController, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/clear()",
                "title" : "func clear()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/insertview(_:at:animated:)",
                "title" : "func insertView(UIView, at: Int, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/insertviewcontroller(_:at:animated:)",
                "title" : "func insertViewController(UIViewController, at: Int, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/loadview()",
                "title" : "func loadView()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocklistviewcontroller\/remove(at:)",
                "title" : "func remove(at: Int)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocklistviewcontroller",
            "title" : "OCKListViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewcontroller\/init(query:store:viewsynchronizer:)",
                "title" : "init(query: OCKContactQuery, store: OCKAnyStoreProtocol, viewSynchronizer: OCKSimpleContactViewSynchronizer)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksimplecontactviewcontroller",
            "title" : "OCKSimpleContactViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKSimpleContactView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKSimpleContactView, context: OCKSynchronizationContext<OCKAnyContact?>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksimplecontactviewsynchronizer",
            "title" : "OCKSimpleContactViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewcontroller\/init(query:store:viewsynchronizer:)",
                "title" : "init(query: OCKEventQuery, store: OCKAnyStoreProtocol, viewSynchronizer: OCKSimpleTaskViewSynchronizer)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksimpletaskviewcontroller",
            "title" : "OCKSimpleTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKSimpleTaskView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKSimpleTaskView, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksimpletaskviewsynchronizer",
            "title" : "OCKSimpleTaskViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/init(query:store:viewsynchronizer:modifytaskevents:)",
                "title" : "init(query: OCKEventQuery, store: OCKAnyStoreProtocol, viewSynchronizer: ViewSynchronizer, modifyTaskEvents: (OCKTaskEvents) -> OCKTaskEvents)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/taskview",
                "title" : "var taskView: ViewSynchronizer.View",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/didselecttaskview(_:eventindexpath:)",
                "title" : "func didSelectTaskView(UIView & OCKTaskDisplayable, eventIndexPath: IndexPath)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/taskview(_:didcompleteevent:at:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCompleteEvent: Bool, at: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/taskview(_:didcreateoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCreateOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/taskview(_:didselectoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didSelectOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocktaskviewcontroller",
            "title" : "OCKTaskViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/init(store:computeprogress:)",
                "title" : "init(store: OCKAnyStoreProtocol, computeProgress: (OCKAnyEvent) -> CareTaskProgress)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/calendardelegate",
                "title" : "var calendarDelegate: OCKWeekCalendarPageViewControllerDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/selecteddate",
                "title" : "var selectedDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/store",
                "title" : "let store: OCKAnyStoreProtocol",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/calendarview(_:didselectdate:at:sender:)",
                "title" : "func calendarView(UIView & OCKCalendarDisplayable, didSelectDate: Date, at: Int, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/pageviewcontroller(_:didfinishanimating:previousviewcontrollers:transitioncompleted:)",
                "title" : "func pageViewController(UIPageViewController, didFinishAnimating: Bool, previousViewControllers: [UIViewController], transitionCompleted: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/pageviewcontroller(_:viewcontrollerafter:)",
                "title" : "func pageViewController(UIPageViewController, viewControllerAfter: UIViewController) -> UIViewController?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/pageviewcontroller(_:viewcontrollerbefore:)",
                "title" : "func pageViewController(UIPageViewController, viewControllerBefore: UIViewController) -> UIViewController?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/pageviewcontroller(_:willtransitionto:)",
                "title" : "func pageViewController(UIPageViewController, willTransitionTo: [UIViewController])",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/selectdate(_:animated:)",
                "title" : "func selectDate(Date, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontroller",
            "title" : "OCKWeekCalendarPageViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewcontroller\/init(store:viewsynchronizer:computeprogress:)",
                "title" : "init(store: OCKAnyStoreProtocol, viewSynchronizer: OCKWeekCalendarViewSynchronizer, computeProgress: (OCKAnyEvent) -> CareTaskProgress)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewcontroller\/init(weekofdate:store:computeprogress:)",
                "title" : "init(weekOfDate: Date, store: OCKAnyStoreProtocol, computeProgress: (OCKAnyEvent) -> CareTaskProgress)",
                "type" : "init"
              }
            ],
            "path" : "\/documentation\/carekit\/ockweekcalendarviewcontroller",
            "title" : "OCKWeekCalendarViewController",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewsynchronizer\/init(weekofdate:)",
                "title" : "init(weekOfDate: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewsynchronizer\/makeview()",
                "title" : "func makeView() -> OCKWeekCalendarView",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarviewsynchronizer\/updateview(_:context:)",
                "title" : "func updateView(OCKWeekCalendarView, context: OCKSynchronizationContext<[OCKCompletionState]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockweekcalendarviewsynchronizer",
            "title" : "OCKWeekCalendarViewSynchronizer",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/synchronizedviewcontroller\/init(initialviewmodel:viewmodels:viewsynchronizer:)",
                "title" : "init<S>(initialViewModel: ViewSynchronizer.ViewModel, viewModels: S, viewSynchronizer: ViewSynchronizer)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/synchronizedviewcontroller\/typedview",
                "title" : "var typedView: ViewSynchronizer.View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/synchronizedviewcontroller\/viewmodel",
                "title" : "var viewModel: ViewSynchronizer.ViewModel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/synchronizedviewcontroller\/viewdidload()",
                "title" : "func viewDidLoad()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/synchronizedviewcontroller",
            "title" : "SynchronizedViewController",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ockanycontactviewsynchronizerprotocol\/makeanyview()-6j8wg",
                        "title" : "func makeAnyView() -> UIView & OCKContactDisplayable",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactViewSynchronizerProtocol Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockanycontactviewsynchronizerprotocol\/makeanyview()-8equp",
                "title" : "func makeAnyView() -> UIView & OCKContactDisplayable",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ockanycontactviewsynchronizerprotocol\/updateanyview(_:context:)-2yb9w",
                        "title" : "func updateAnyView(UIView & OCKContactDisplayable, context: OCKSynchronizationContext<OCKAnyContact?>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactViewSynchronizerProtocol Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockanycontactviewsynchronizerprotocol\/updateanyview(_:context:)-yxgy",
                "title" : "func updateAnyView(UIView & OCKContactDisplayable, context: OCKSynchronizationContext<OCKAnyContact?>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockanycontactviewsynchronizerprotocol",
            "title" : "OCKAnyContactViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ockanytaskviewsynchronizerprotocol\/makeanyview()-3reg",
                        "title" : "func makeAnyView() -> UIView & OCKTaskDisplayable",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskViewSynchronizerProtocol Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockanytaskviewsynchronizerprotocol\/makeanyview()-7qmez",
                "title" : "func makeAnyView() -> UIView & OCKTaskDisplayable",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ockanytaskviewsynchronizerprotocol\/updateanyview(_:context:)-2dddq",
                        "title" : "func updateAnyView(UIView & OCKTaskDisplayable, context: OCKSynchronizationContext<OCKTaskEvents>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskViewSynchronizerProtocol Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockanytaskviewsynchronizerprotocol\/updateanyview(_:context:)-81zzl",
                "title" : "func updateAnyView(UIView & OCKTaskDisplayable, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockanytaskviewsynchronizerprotocol",
            "title" : "OCKAnyTaskViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewsynchronizerprotocol\/view",
                "title" : "View",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewsynchronizerprotocol\/makeview()",
                "title" : "func makeView() -> View",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcalendarviewsynchronizerprotocol\/updateview(_:context:)",
                "title" : "func updateView(View, context: OCKSynchronizationContext<[OCKCompletionState]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcalendarviewsynchronizerprotocol",
            "title" : "OCKCalendarViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewsynchronizerprotocol\/view",
                "title" : "View",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewsynchronizerprotocol\/makeview()",
                "title" : "func makeView() -> View",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockchartviewsynchronizerprotocol\/updateview(_:context:)",
                "title" : "func updateView(View, context: OCKSynchronizationContext<[OCKDataSeries]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockchartviewsynchronizerprotocol",
            "title" : "OCKChartViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol\/view",
                "title" : "View",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol\/makeview()",
                "title" : "func makeView() -> View",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol\/updateview(_:context:)",
                "title" : "func updateView(View, context: OCKSynchronizationContext<OCKAnyContact?>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockcontactviewsynchronizerprotocol",
            "title" : "OCKContactViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdatasource\/dailypageviewcontroller(_:prepare:for:)",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, prepare: OCKListViewController, for: Date)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdatasource",
            "title" : "OCKDailyPageViewControllerDataSource",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdelegate\/dailypageviewcontroller(_:didfailwitherror:)-2692e",
                        "title" : "func dailyPageViewController(OCKDailyPageViewController, didFailWithError: Error)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKDailyPageViewControllerDelegate Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdelegate\/dailypageviewcontroller(_:didfailwitherror:)-2d52y",
                "title" : "func dailyPageViewController(OCKDailyPageViewController, didFailWithError: Error)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailypageviewcontrollerdelegate",
            "title" : "OCKDailyPageViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontrollerdelegate\/dailytaskspageviewcontroller(_:viewcontrollerfortask:events:eventquery:)",
                "title" : "func dailyTasksPageViewController(OCKDailyTasksPageViewController, viewControllerForTask: OCKAnyTask, events: [OCKAnyEvent], eventQuery: OCKEventQuery) -> UIViewController?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdailytaskspageviewcontrollerdelegate",
            "title" : "OCKDailyTasksPageViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol\/view",
                "title" : "View",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol\/makeview()",
                "title" : "func makeView() -> View",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol\/updateview(_:context:)",
                "title" : "func updateView(View, context: OCKSynchronizationContext<OCKTaskEvents>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ocktaskviewsynchronizerprotocol",
            "title" : "OCKTaskViewSynchronizerProtocol",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontrollerdelegate\/weekcalendarpageviewcontroller(_:didchangedateinterval:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didChangeDateInterval: DateInterval)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontrollerdelegate\/weekcalendarpageviewcontroller(_:didselectdate:previousdate:)",
                "title" : "func weekCalendarPageViewController(OCKWeekCalendarPageViewController, didSelectDate: Date, previousDate: Date)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/ockweekcalendarpageviewcontrollerdelegate",
            "title" : "OCKWeekCalendarPageViewControllerDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/viewsynchronizing\/view",
                "title" : "View",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekit\/viewsynchronizing\/viewmodel",
                "title" : "ViewModel",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/viewsynchronizing\/makeview()",
                "title" : "func makeView() -> View",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/viewsynchronizing\/updateview(_:context:)",
                "title" : "func updateView(View, context: OCKSynchronizationContext<ViewModel>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/viewsynchronizing",
            "title" : "ViewSynchronizing",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchrequest\/configuration\/query",
                    "title" : "var query: Query",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/configuration",
                "title" : "CareStoreFetchRequest.Configuration",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/init(query:)-76xs7",
                "title" : "init(query: OCKOutcomeQuery)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/init(query:)-7io2h",
                "title" : "init(query: OCKEventQuery)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/init(query:)-7mrlf",
                "title" : "init(query: OCKCarePlanQuery)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/init(query:)-7qj8t",
                "title" : "init(query: OCKTaskQuery)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/init(query:)-8izl2",
                "title" : "init(query: OCKContactQuery)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/init(query:)-ggiz",
                "title" : "init(query: OCKPatientQuery)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/projectedvalue",
                "title" : "var projectedValue: Binding<Configuration>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/wrappedvalue",
                "title" : "var wrappedValue: CareStoreFetchedResults<Result, Query>",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchrequest\/update()",
                "title" : "func update()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekit\/carestorefetchrequest",
            "title" : "CareStoreFetchRequest",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresult\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresult\/result",
                "title" : "var result: Result",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresult\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresult\/==(_:_:)",
                    "title" : "static func == (CareStoreFetchedResult<Result>, CareStoreFetchedResult<Result>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekit\/carestorefetchedresult\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/carestorefetchedresult",
            "title" : "CareStoreFetchedResult",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/endindex",
                "title" : "var endIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/query",
                "title" : "var query: Query",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/startindex",
                "title" : "var startIndex: Int",
                "type" : "property"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/subscript(_:)",
                "title" : "subscript(Int) -> CareStoreFetchedResult<Result>",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/element",
                "title" : "CareStoreFetchedResults.Element",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/index",
                "title" : "CareStoreFetchedResults.Index",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/indices",
                "title" : "CareStoreFetchedResults.Indices",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/iterator",
                "title" : "CareStoreFetchedResults.Iterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/subsequence",
                "title" : "CareStoreFetchedResults.SubSequence",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/difference(from:)",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/formindex(before:)",
                    "title" : "func formIndex(before: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/lastindex(of:)",
                    "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/contains(_:)-5gcld",
                    "title" : "func contains<C>(C) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/firstrange(of:)",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/map(_:)-1f62x",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/split(separator:maxsplits:omittingemptysubsequences:)-42zcq",
                    "title" : "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/split(separator:maxsplits:omittingemptysubsequences:)-78sye",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/async",
                    "title" : "var async: AsyncSyncSequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/contains(_:)-92exe",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/flatmap(_:)-8r3rc",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/flatmap(_:)-9nwc7",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/map(_:)-2dhao",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/sorted(using:)-5maxo",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/sorted(using:)-vvk8",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/split(separator:maxsplits:omittingemptysubsequences:)-5exkz",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/carestorefetchedresults\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/carestorefetchedresults\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/carestorefetchedresults",
            "title" : "CareStoreFetchedResults",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/init(taskid:legendtitle:gradientstartcolor:gradientendcolor:markersize:computeprogress:)",
                "title" : "init(taskID: String, legendTitle: String, gradientStartColor: UIColor, gradientEndColor: UIColor, markerSize: CGFloat, computeProgress: (OCKAnyEvent) -> LinearCareTaskProgress)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/gradientendcolor",
                "title" : "var gradientEndColor: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/gradientstartcolor",
                "title" : "var gradientStartColor: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/legendtitle",
                "title" : "var legendTitle: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/markersize",
                "title" : "var markerSize: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ockdataseriesconfiguration\/taskid",
                "title" : "var taskID: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ockdataseriesconfiguration",
            "title" : "OCKDataSeriesConfiguration",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocklog\/level",
                "title" : "static var level: OSLogType",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekit\/ocklog",
            "title" : "OCKLog",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/init(viewmodel:oldviewmodel:animated:)",
                "title" : "init(viewModel: ViewModel, oldViewModel: ViewModel, animated: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/animated",
                "title" : "let animated: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/oldviewmodel",
                "title" : "let oldViewModel: ViewModel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/viewmodel",
                "title" : "let viewModel: ViewModel",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekit\/ocksynchronizationcontext\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ocksynchronizationcontext",
            "title" : "OCKSynchronizationContext",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/init(events:)",
                "title" : "init(events: [OCKAnyEvent])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/endindex",
                "title" : "var endIndex: Index",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/startindex",
                "title" : "var startIndex: Index",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/tasks",
                "title" : "var tasks: [OCKAnyTask]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/append(event:)",
                "title" : "func append(event: OCKAnyEvent) -> (OCKAnyEvent?, Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/contains(event:)",
                "title" : "func contains(event: OCKAnyEvent) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/events(fortask:)",
                "title" : "func events(forTask: OCKAnyTask) -> [OCKAnyEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/index(after:)",
                "title" : "func index(after: Index) -> Index",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/makeiterator()",
                "title" : "func makeIterator() -> Iterator",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/remove(event:)",
                "title" : "func remove(event: OCKAnyEvent) -> OCKAnyEvent?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/update(event:)",
                "title" : "func update(event: OCKAnyEvent) -> OCKAnyEvent?",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/subscript(_:)-429hr",
                "title" : "subscript(Index) -> Iterator.Element",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/subscript(_:)-vzqu",
                "title" : "subscript(Range<IndexPath.Index>) -> SubSequence",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/element",
                "title" : "OCKTaskEvents.Element",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/index",
                "title" : "OCKTaskEvents.Index",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/iterator",
                "title" : "OCKTaskEvents.Iterator",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekit\/ocktaskevents\/subsequence",
                "title" : "OCKTaskEvents.SubSequence",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/indices",
                    "title" : "var indices: DefaultIndices<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/contains(_:)-8fnfy",
                    "title" : "func contains<C>(C) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/distance(from:to:)",
                    "title" : "func distance(from: Self.Index, to: Self.Index) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/firstrange(of:)",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/formindex(after:)",
                    "title" : "func formIndex(after: inout Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/index(_:offsetby:)",
                    "title" : "func index(Self.Index, offsetBy: Int) -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/map(_:)-1dlmp",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/popfirst()",
                    "title" : "func popFirst() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/removefirst()",
                    "title" : "func removeFirst() -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/removefirst(_:)",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/split(separator:maxsplits:omittingemptysubsequences:)-2dydm",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/split(separator:maxsplits:omittingemptysubsequences:)-4zrz3",
                    "title" : "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/trimprefix(_:)",
                    "title" : "func trimPrefix<Prefix>(Prefix)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/trimprefix(while:)",
                    "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/subscript(_:)-7ieke",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/subscript(_:)-bt8k",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/carekit\/ocktaskevents\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/async",
                    "title" : "var async: AsyncSyncSequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/publisher",
                    "title" : "var publisher: Publishers.Sequence<Self, Never>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/compare(_:_:)",
                    "title" : "func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/contains(_:)-6i584",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/flatmap(_:)-2jj61",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/flatmap(_:)-4vl00",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/formatted(_:)",
                    "title" : "func formatted<S>(S) -> S.FormatOutput",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/joined(separator:)",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/map(_:)-4wyjy",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/sorted(using:)-8wz7j",
                    "title" : "func sorted<Comparator>(using: Comparator) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/sorted(using:)-987k8",
                    "title" : "func sorted<S, Comparator>(using: S) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/split(separator:maxsplits:omittingemptysubsequences:)-g1m4",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekit\/ocktaskevents\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekit\/ocktaskevents\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekit\/ocktaskevents",
            "title" : "OCKTaskEvents",
            "type" : "struct"
          }
        ],
        "path" : "\/documentation\/carekit",
        "title" : "CareKit",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/init(event:initialvalue:detailstitle:detailsinformation:action:)",
                "title" : "init(event: OCKAnyEvent, initialValue: OCKOutcomeValue, detailsTitle: String?, detailsInformation: String?, action: ((OCKOutcomeValue?) async throws -> OCKAnyOutcome)?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/detailsinformation",
                "title" : "var detailsInformation: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/detailstitle",
                "title" : "var detailsTitle: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/error",
                "title" : "var error: Error?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/event",
                "title" : "var event: OCKAnyEvent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/isinitialvalue",
                "title" : "var isInitialValue: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/value",
                "title" : "var value: OCKOutcomeValue",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/valueasdouble",
                "title" : "var valueAsDouble: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/valueasstring",
                "title" : "var valueAsString: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/updateoutcome(_:)",
                "title" : "func updateOutcome(OCKAnyOutcome)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/cardviewmodel\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/cardviewmodel\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/cardviewmodel",
            "title" : "CardViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel\/init(event:detailstitle:detailsinformation:initialvalue:startvalue:endvalue:incrementvalue:emojis:colorratio:action:)",
                "title" : "init(event: OCKAnyEvent, detailsTitle: String?, detailsInformation: String?, initialValue: Double?, startValue: Double, endValue: Double?, incrementValue: Double, emojis: [String], colorRatio: Double, action: ((OCKOutcomeValue?) async throws -> OCKAnyOutcome)?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel\/colorratio",
                "title" : "var colorRatio: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel\/emojis",
                "title" : "var emojis: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel\/endvalue",
                "title" : "var endValue: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel\/incrementvalue",
                "title" : "var incrementValue: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel\/isbuttondisabled",
                "title" : "var isButtonDisabled: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel\/startvalue",
                "title" : "var startValue: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel\/valueforbutton",
                "title" : "var valueForButton: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel\/getstoplightcolor(for:)",
                "title" : "func getStoplightColor(for: Double) -> Color",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/digitalcrownviewmodel",
            "title" : "DigitalCrownViewModel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskviewmodel\/init(event:detailstitle:detailsinformation:initialvalue:range:step:action:)",
                "title" : "init(event: OCKAnyEvent, detailsTitle: String?, detailsInformation: String?, initialValue: Double?, range: ClosedRange<Double>, step: Double, action: ((OCKOutcomeValue?) async throws -> OCKAnyOutcome)?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskviewmodel\/isactive",
                "title" : "var isActive: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskviewmodel\/previousvalues",
                "title" : "var previousValues: [Double]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskviewmodel\/range",
                "title" : "var range: ClosedRange<Double>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskviewmodel\/step",
                "title" : "var step: Double",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskviewmodel\/updateoutcome(_:)",
                "title" : "func updateOutcome(OCKAnyOutcome)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/sliderlogtaskviewmodel",
            "title" : "SliderLogTaskViewModel",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/carekitessentialview\/carestore",
                "title" : "var careStore: any OCKAnyStoreProtocol",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/carekitessentialview\/appendoutcomevalues(_:event:)",
                "title" : "func appendOutcomeValues([OCKOutcomeValue], event: OCKAnyEvent) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitessentials\/carekitessentialview\/createoutcomeforevent(_:)",
                "title" : "func createOutcomeForEvent(OCKAnyEvent) -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitessentials\/carekitessentialview\/deleteeventoutcome(_:)",
                "title" : "func deleteEventOutcome(OCKAnyEvent) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitessentials\/carekitessentialview\/saveoutcome(_:)-5hh4y",
                        "title" : "func saveOutcome(OCKAnyOutcome) async throws",
                        "type" : "method"
                      }
                    ],
                    "title" : "CareKitEssentialView Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/carekitessentialview\/saveoutcome(_:)-26ykh",
                "title" : "func saveOutcome(OCKAnyOutcome) async throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitessentials\/carekitessentialview\/saveoutcomevalues(_:event:)",
                "title" : "func saveOutcomeValues([OCKOutcomeValue], event: OCKAnyEvent) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitessentials\/carekitessentialview\/updateevent(_:with:)-6a0hu",
                        "title" : "func updateEvent(OCKAnyEvent, with: [OCKOutcomeValue]?) async throws -> OCKAnyOutcome",
                        "type" : "method"
                      }
                    ],
                    "title" : "CareKitEssentialView Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/carekitessentialview\/updateevent(_:with:)-42gv0",
                "title" : "func updateEvent(OCKAnyEvent, with: [OCKOutcomeValue]?) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitessentials\/carekitessentialview\/eventquery(with:on:)-9fjmw",
                        "title" : "static func eventQuery(with: [String], on: Date) -> OCKEventQuery",
                        "type" : "method"
                      }
                    ],
                    "title" : "CareKitEssentialView Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/carekitessentialview\/eventquery(with:on:)-96h06",
                "title" : "static func eventQuery(with: [String], on: Date) -> OCKEventQuery",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/carekitessentialview",
            "title" : "CareKitEssentialView",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/customlabelview\/init(event:initialvalue:detailstitle:detailsinformation:action:)",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, initialValue: OCKOutcomeValue, detailsTitle: String?, detailsInformation: String?, action: ((OCKOutcomeValue?) async throws -> OCKAnyOutcome)?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitessentials\/customlabelview\/init(event:initialvalue:detailstitle:detailsinformation:action:header:)",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, initialValue: OCKOutcomeValue, detailsTitle: String?, detailsInformation: String?, action: ((OCKOutcomeValue?) async throws -> OCKAnyOutcome)?, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitessentials\/customlabelview\/init(viewmodel:)",
                "title" : "init(viewModel: CardViewModel)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitessentials\/customlabelview\/init(viewmodel:header:)",
                "title" : "init(viewModel: CardViewModel, header: () -> Header)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/customlabelview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(activationpoint:)-7t5cs",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(activationpoint:)-9cmy9",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityaction(named:_:)-3bl2q",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityaction(named:_:)-9vdjs",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityaction(named:_:)-jvlp",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityactivationpoint(_:)-1t6dw",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityactivationpoint(_:)-90xij",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitycustomcontent(_:_:importance:)-1hesc",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitycustomcontent(_:_:importance:)-2wr32",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitycustomcontent(_:_:importance:)-42hnf",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitycustomcontent(_:_:importance:)-6buc9",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitycustomcontent(_:_:importance:)-787be",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitycustomcontent(_:_:importance:)-8mmk4",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitycustomcontent(_:_:importance:)-97ijk",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitycustomcontent(_:_:importance:)-b9eu",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityhint(_:)-5nybo",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityhint(_:)-72ns3",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityhint(_:)-9i7gf",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityinputlabels(_:)-4ddf4",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityinputlabels(_:)-8h806",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityinputlabels(_:)-9aypy",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitylabel(_:)-1k61y",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitylabel(_:)-378xr",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitylabel(_:)-8vh2q",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:)-21u4t",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:)-3oqgl",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:)-42u99",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:)-796kk",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2rj1e",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:entryid:entrylabel:)-64vke",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8buh8",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:entryid:entrylabel:)-ufjf",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:entrylabel:)-20mym",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:entrylabel:)-24qa2",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:entrylabel:)-31be5",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:entries:entrylabel:)-8q10m",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:textranges:)-1gp34",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:textranges:)-4tcgf",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:textranges:)-8jlva",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotor(_:textranges:)-d0r3",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityvalue(_:)-1pczj",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityvalue(_:)-3qxi0",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityvalue(_:)-84qlz",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:actions:)-6kz0u",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:actions:)-6r0uj",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:actions:)-ykgo",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:actions:message:)-4lzs1",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:actions:message:)-5vx9h",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:actions:message:)-6dobc",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:presenting:actions:)-9e778",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:presenting:actions:)-qyke",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:presenting:actions:)-wh0y",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:presenting:actions:message:)-3hr8h",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:presenting:actions:message:)-54h5v",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(_:ispresented:presenting:actions:message:)-8hkcx",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alignmentguide(_:computevalue:)-6zzzz",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alignmentguide(_:computevalue:)-u8a6",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/aspectratio(_:contentmode:)-4dysz",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/aspectratio(_:contentmode:)-7hxna",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/background(_:in:fillstyle:)-12bo4",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/background(_:in:fillstyle:)-869gz",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/background(in:fillstyle:)-7i3p1",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/background(in:fillstyle:)-7kyzb",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/badge(_:)-206xw",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/badge(_:)-25w7f",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/badge(_:)-5f9p5",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/badge(_:)-6a7i",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/buttonstyle(_:)-28b05",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/buttonstyle(_:)-5reu6",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(any OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2wn8u",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2x37n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5cl1p",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1vz2m",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-30jfn",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6bfiv",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4akl",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5dp7b",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-9xmqh",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1dfzc",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5symp",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-92t6z",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contentmargins(_:_:for:)-4msi2",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contentmargins(_:_:for:)-783t0",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/dialogsuppressiontoggle(_:issuppressed:)-3crfd",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/dialogsuppressiontoggle(_:issuppressed:)-3dzkh",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/dialogsuppressiontoggle(_:issuppressed:)-4wiry",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/dynamictypesize(_:)-54pnm",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/dynamictypesize(_:)-81yjm",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogconfirmationlabel(_:)-26k2d",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogconfirmationlabel(_:)-3hntx",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogconfirmationlabel(_:)-gb0n",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogmessage(_:)-4339y",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogmessage(_:)-7x4wu",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogmessage(_:)-8p2zd",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-37b8u",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-77j12",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-50zeq",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-oqal",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-1ltjf",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-7fjuq",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-4ug0e",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-h1j8",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporterfilenamelabel(_:)-2kec3",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporterfilenamelabel(_:)-9fn57",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileexporterfilenamelabel(_:)-x09m",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusedobject(_:)-3o7vy",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusedobject(_:)-8r8j5",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusedsceneobject(_:)-8gczt",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusedsceneobject(_:)-92zfb",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusedscenevalue(_:_:)-3ij2k",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusedscenevalue(_:_:)-83hn",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusedvalue(_:_:)-2uukd",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/focusedvalue(_:_:)-6ztxw",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/help(_:)-4sbji",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/help(_:)-50pi1",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/help(_:)-6u7z6",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listitemtint(_:)-26yyo",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listitemtint(_:)-8hxgv",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listsectionspacing(_:)-2y1bp",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/listsectionspacing(_:)-t18m",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbartitle(_:)-1kqla",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbartitle(_:)-433lq",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbartitle(_:)-5ktlz",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbartitle(_:displaymode:)-3exxu",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbartitle(_:displaymode:)-6s57m",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbartitle(_:displaymode:)-79emy",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationdocument(_:)-1ws38",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationdocument(_:)-icz3",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationdocument(_:preview:)-1n5ca",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationdocument(_:preview:)-55nis",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationdocument(_:preview:)-65klb",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationdocument(_:preview:)-6x061",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationtitle(_:)-1xo6h",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationtitle(_:)-1zo5m",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationtitle(_:)-2bi1u",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationtitle(_:)-5vg4g",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationtitle(_:)-8s1j1",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onchange(of:initial:_:)-1wyuq",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onchange(of:initial:_:)-miqb",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/oncontinuoushover(coordinatespace:perform:)-6nth9",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/oncontinuoushover(coordinatespace:perform:)-8iqmf",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ondrop(of:delegate:)-2n0aq",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ondrop(of:delegate:)-8bqh1",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ondrop(of:istargeted:perform:)-2o7qv",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ondrop(of:istargeted:perform:)-438v4",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ondrop(of:istargeted:perform:)-50qs0",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ondrop(of:istargeted:perform:)-8az82",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ontapgesture(count:coordinatespace:perform:)-6jrfk",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ontapgesture(count:coordinatespace:perform:)-70xhc",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/padding(_:)-65yr8",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/padding(_:)-qb4g",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/renameaction(_:)-2fi6q",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/renameaction(_:)-6dk0d",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/safeareainset(edge:alignment:spacing:content:)-1m4xe",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/safeareainset(edge:alignment:spacing:content:)-wy95",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/safeareapadding(_:)-4h3kj",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/safeareapadding(_:)-tetz",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scaleeffect(_:anchor:)-35n9t",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scaleeffect(_:anchor:)-4dn80",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchcompletion(_:)-4hqa7",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchcompletion(_:)-8uyqg",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2byu2",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3t096",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5oyg4",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:editabletokens:placement:prompt:token:)-264aj",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:editabletokens:placement:prompt:token:)-7qxn3",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:editabletokens:placement:prompt:token:)-9j3ps",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:ispresented:placement:prompt:)-3qkf8",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:ispresented:placement:prompt:)-6ftuy",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:ispresented:placement:prompt:)-6nj6i",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:placement:prompt:)-1pdyd",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:placement:prompt:)-4wwg3",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:placement:prompt:)-zuz9",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:placement:prompt:suggestions:)-12je",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:placement:prompt:suggestions:)-34fs1",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:placement:prompt:suggestions:)-9jzb8",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:ispresented:placement:prompt:token:)-3d6j",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:ispresented:placement:prompt:token:)-45lx6",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:ispresented:placement:prompt:token:)-71eka",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:placement:prompt:token:)-374c5",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:placement:prompt:token:)-5jy1l",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:placement:prompt:token:)-6068m",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-47itp",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9z4mx",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-ri2l",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1yxpc",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-63apn",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-74xrc",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/tint(_:)-4r0my",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/tint(_:)-86x3a",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbar(content:)-6pkc1",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbar(content:)-7xlna",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbarbackground(_:for:)-5095a",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbarbackground(_:for:)-9zby3",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/typeselectequivalent(_:)-8stlb",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/typeselectequivalent(_:)-945mb",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/typeselectequivalent(_:)-9kgpe",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/typesettinglanguage(_:isenabled:)-3wfte",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/typesettinglanguage(_:isenabled:)-92i6j",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlabelview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/customlabelview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/customlabelview",
            "title" : "CustomLabelView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/customlinearcaretaskprogress\/init(value:goal:)",
                "title" : "init(value: Double, goal: Double?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/customlinearcaretaskprogress\/fractioncompleted",
                "title" : "var fractionCompleted: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/customlinearcaretaskprogress\/goal",
                "title" : "var goal: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitessentials\/customlinearcaretaskprogress\/value",
                "title" : "var value: Double",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlinearcaretaskprogress\/iscompleted",
                    "title" : "var isCompleted: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/customlinearcaretaskprogress\/caretaskprogress-implementations",
                "title" : "CareTaskProgress Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/customlinearcaretaskprogress\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/customlinearcaretaskprogress\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/customlinearcaretaskprogress",
            "title" : "CustomLinearCareTaskProgress",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/detailsview\/init(event:title:details:)",
                "title" : "init(event: OCKAnyEvent, title: String?, details: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/detailsview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(activationpoint:)-6sj8k",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(activationpoint:)-817x2",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityaction(named:_:)-2y56q",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityaction(named:_:)-6mne6",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityaction(named:_:)-6sht9",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityactivationpoint(_:)-3w6sy",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityactivationpoint(_:)-6jvqt",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitycustomcontent(_:_:importance:)-2d1mf",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitycustomcontent(_:_:importance:)-3e9ip",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitycustomcontent(_:_:importance:)-44z8u",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitycustomcontent(_:_:importance:)-4ffta",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitycustomcontent(_:_:importance:)-5qgz",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitycustomcontent(_:_:importance:)-9l725",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitycustomcontent(_:_:importance:)-9t8tp",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitycustomcontent(_:_:importance:)-min",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityhint(_:)-4gg3r",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityhint(_:)-6grpi",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityhint(_:)-nr2u",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityinputlabels(_:)-1lvpn",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityinputlabels(_:)-1po3s",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityinputlabels(_:)-9dq8n",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitylabel(_:)-4eiw6",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitylabel(_:)-4qbon",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitylabel(_:)-5kx1v",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:)-18ish",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:)-2w3ub",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:)-3bhtf",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:)-7sxjl",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:entryid:entrylabel:)-45b4n",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:entryid:entrylabel:)-4epem",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:entryid:entrylabel:)-64j2m",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:entryid:entrylabel:)-81db2",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:entrylabel:)-2pnv6",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:entrylabel:)-450ir",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:entrylabel:)-7dpah",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:entries:entrylabel:)-8irj8",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:textranges:)-1vyql",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:textranges:)-339gm",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:textranges:)-4wvhh",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotor(_:textranges:)-7oa3t",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityvalue(_:)-8js8h",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityvalue(_:)-9oy9r",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityvalue(_:)-9sxnx",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:actions:)-5g2uo",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:actions:)-728o3",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:actions:)-uj4w",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:actions:message:)-59k2z",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:actions:message:)-60ufd",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:actions:message:)-7r2zt",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:presenting:actions:)-27gu2",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:presenting:actions:)-354c",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:presenting:actions:)-qa9h",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:presenting:actions:message:)-47irk",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:presenting:actions:message:)-9z2ld",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(_:ispresented:presenting:actions:message:)-l5af",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alignmentguide(_:computevalue:)-68ob4",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alignmentguide(_:computevalue:)-8htwb",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/aspectratio(_:contentmode:)-7mwym",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/aspectratio(_:contentmode:)-8mj0e",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/background(_:in:fillstyle:)-53nts",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/background(_:in:fillstyle:)-mvao",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/background(in:fillstyle:)-3vqt5",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/background(in:fillstyle:)-okky",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/badge(_:)-24jz7",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/badge(_:)-3mzu",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/badge(_:)-48wio",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/badge(_:)-95nq1",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/buttonstyle(_:)-65sze",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/buttonstyle(_:)-92t9c",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(any OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2it00",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4lmpt",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-6eomc",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-22hpy",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6izzw",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7zaiv",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-2fn5p",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3tpj0",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-81u2k",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1phww",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-4aofy",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-89jyz",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contentmargins(_:_:for:)-4yz88",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contentmargins(_:_:for:)-7zujp",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/dialogsuppressiontoggle(_:issuppressed:)-5a3d4",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/dialogsuppressiontoggle(_:issuppressed:)-8xw7a",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/dialogsuppressiontoggle(_:issuppressed:)-chea",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/dynamictypesize(_:)-1uvfs",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/dynamictypesize(_:)-3oux3",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogconfirmationlabel(_:)-3bhay",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogconfirmationlabel(_:)-9t2we",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogconfirmationlabel(_:)-gcgq",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogmessage(_:)-1h9gp",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogmessage(_:)-5aexm",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogmessage(_:)-6twve",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4qtt4",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-lxse",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6anoo",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-9m5xb",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-5nums",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-97lxq",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-5lnr2",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-8znv7",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporterfilenamelabel(_:)-4h6e5",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporterfilenamelabel(_:)-6xj5s",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileexporterfilenamelabel(_:)-9ihrq",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusedobject(_:)-63wy3",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusedobject(_:)-9sbri",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusedsceneobject(_:)-1zd29",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusedsceneobject(_:)-jjnx",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusedscenevalue(_:_:)-1d6py",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusedscenevalue(_:_:)-3uqzq",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusedvalue(_:_:)-6nfdd",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/focusedvalue(_:_:)-8rc5a",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/help(_:)-27t0e",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/help(_:)-8c85g",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/help(_:)-8dxgw",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listitemtint(_:)-7vxj4",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listitemtint(_:)-832y",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listsectionspacing(_:)-66zeg",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/listsectionspacing(_:)-x6zi",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbartitle(_:)-1tddo",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbartitle(_:)-4ge27",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbartitle(_:)-6u843",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbartitle(_:displaymode:)-5wcs9",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbartitle(_:displaymode:)-84lt7",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbartitle(_:displaymode:)-yscg",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationdocument(_:)-32jxx",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationdocument(_:)-4isud",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationdocument(_:preview:)-4plr2",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationdocument(_:preview:)-8snwx",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationdocument(_:preview:)-9pe1l",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationdocument(_:preview:)-9wlb",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationtitle(_:)-2stx",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationtitle(_:)-6it7l",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationtitle(_:)-6wp5j",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationtitle(_:)-7idbe",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationtitle(_:)-8r5v4",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onchange(of:initial:_:)-58gf2",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onchange(of:initial:_:)-6vqh2",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/oncontinuoushover(coordinatespace:perform:)-8d49u",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/oncontinuoushover(coordinatespace:perform:)-r20d",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ondrop(of:delegate:)-6ruq7",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ondrop(of:delegate:)-sgxd",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ondrop(of:istargeted:perform:)-15huo",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ondrop(of:istargeted:perform:)-3ea16",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ondrop(of:istargeted:perform:)-5qzfw",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ondrop(of:istargeted:perform:)-qvbq",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ontapgesture(count:coordinatespace:perform:)-7imy8",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ontapgesture(count:coordinatespace:perform:)-86mzg",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/padding(_:)-5j2pp",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/padding(_:)-9eadg",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/renameaction(_:)-195oz",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/renameaction(_:)-5r8vx",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/safeareainset(edge:alignment:spacing:content:)-1rjrz",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/safeareainset(edge:alignment:spacing:content:)-826r",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/safeareapadding(_:)-9wz7w",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/safeareapadding(_:)-y0rp",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scaleeffect(_:anchor:)-7ndm2",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scaleeffect(_:anchor:)-88wyz",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchcompletion(_:)-3x916",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchcompletion(_:)-7vig9",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3orte",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4mb94",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5kvtd",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:editabletokens:placement:prompt:token:)-4csmm",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:editabletokens:placement:prompt:token:)-4yizb",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:editabletokens:placement:prompt:token:)-7bpfb",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:ispresented:placement:prompt:)-1ef2i",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:ispresented:placement:prompt:)-34ol7",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:ispresented:placement:prompt:)-3j2nn",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:placement:prompt:)-47czp",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:placement:prompt:)-4nuv2",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:placement:prompt:)-5cqha",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:placement:prompt:suggestions:)-7dewl",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:placement:prompt:suggestions:)-978ca",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:placement:prompt:suggestions:)-97fdw",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:ispresented:placement:prompt:token:)-4f5ra",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6dilr",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6fltc",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:placement:prompt:token:)-5nj05",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:placement:prompt:token:)-83efe",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:placement:prompt:token:)-96tj2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-1y1zx",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2osax",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-6t1br",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5dk49",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7pwfy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-86td5",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/detailsview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/tint(_:)-5omiz",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/tint(_:)-8ipja",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbar(content:)-8r5tk",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbar(content:)-ruld",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbarbackground(_:for:)-20phi",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbarbackground(_:for:)-8xc3c",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/typeselectequivalent(_:)-1e5td",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/typeselectequivalent(_:)-8nver",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/typeselectequivalent(_:)-9j5xy",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/typesettinglanguage(_:isenabled:)-61ex3",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/typesettinglanguage(_:isenabled:)-6t1mw",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/detailsview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/detailsview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/detailsview",
            "title" : "DetailsView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/informationheaderview\/init(title:information:image:event:detailstitle:details:)",
                "title" : "init(title: Text, information: Text?, image: Image?, event: OCKAnyEvent, detailsTitle: String?, details: String?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/informationheaderview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(activationpoint:)-5egys",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(activationpoint:)-t6gm",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityaction(named:_:)-1eyov",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityaction(named:_:)-59xrm",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityaction(named:_:)-8a72f",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityactivationpoint(_:)-2qsjm",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityactivationpoint(_:)-8mjct",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitycustomcontent(_:_:importance:)-1lyi5",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitycustomcontent(_:_:importance:)-2mo50",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitycustomcontent(_:_:importance:)-4j52k",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitycustomcontent(_:_:importance:)-5qyzc",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitycustomcontent(_:_:importance:)-5x6ir",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitycustomcontent(_:_:importance:)-8cl9t",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitycustomcontent(_:_:importance:)-9iywu",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitycustomcontent(_:_:importance:)-pxt2",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityhint(_:)-65cmc",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityhint(_:)-67ai6",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityhint(_:)-8t7k3",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityinputlabels(_:)-1tnom",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityinputlabels(_:)-54ipv",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityinputlabels(_:)-8l2hz",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitylabel(_:)-1ltzq",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitylabel(_:)-3c3n0",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitylabel(_:)-7oek5",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:)-3ws1u",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:)-8fgh7",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:)-9oy8r",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:)-gges",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1gpi2",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6bue6",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6u9ee",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:entryid:entrylabel:)-nfh3",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:entrylabel:)-3qoah",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:entrylabel:)-4azb1",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:entrylabel:)-4wjd8",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:entries:entrylabel:)-8rnbb",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:textranges:)-4hpkn",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:textranges:)-5h62b",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:textranges:)-98bel",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotor(_:textranges:)-9cfk3",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityvalue(_:)-2wazh",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityvalue(_:)-5dmc9",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityvalue(_:)-9x7sr",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:actions:)-2gj2y",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:actions:)-5zcss",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:actions:)-9xmtj",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:actions:message:)-2om61",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:actions:message:)-47j0t",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:actions:message:)-5fr4o",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:presenting:actions:)-1htij",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:presenting:actions:)-2ldg1",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:presenting:actions:)-4urnc",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:presenting:actions:message:)-2pxwr",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:presenting:actions:message:)-7ztbw",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(_:ispresented:presenting:actions:message:)-87c35",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alignmentguide(_:computevalue:)-2kv2z",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alignmentguide(_:computevalue:)-5zhf2",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/aspectratio(_:contentmode:)-26b9t",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/aspectratio(_:contentmode:)-6w49t",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/background(_:in:fillstyle:)-6170h",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/background(_:in:fillstyle:)-6b3j0",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/background(in:fillstyle:)-6u10e",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/background(in:fillstyle:)-9u5ts",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/badge(_:)-46num",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/badge(_:)-7j0h",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/badge(_:)-8jhk1",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/badge(_:)-9l256",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/buttonstyle(_:)-3iicu",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/buttonstyle(_:)-4jsmh",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(any OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-25jte",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-32mr4",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-69qjs",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-10hul",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4ugq5",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6vihl",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-2wic5",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4b5no",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4ql8y",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-157bh",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-40ym7",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-pjwr",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contentmargins(_:_:for:)-3wlga",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contentmargins(_:_:for:)-5n57n",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/dialogsuppressiontoggle(_:issuppressed:)-12sju",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/dialogsuppressiontoggle(_:issuppressed:)-2a5vf",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/dialogsuppressiontoggle(_:issuppressed:)-4s5tz",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/dynamictypesize(_:)-7yv9h",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/dynamictypesize(_:)-um4q",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogconfirmationlabel(_:)-4rohw",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogconfirmationlabel(_:)-5z3fn",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogconfirmationlabel(_:)-6hgcf",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogmessage(_:)-1enyq",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogmessage(_:)-6ej3j",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogmessage(_:)-87frd",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5daf0",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-vlu1",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-34olm",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-942et",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-2sr31",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9srka",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-42wew",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-56jdm",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporterfilenamelabel(_:)-1qi3u",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporterfilenamelabel(_:)-272wh",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileexporterfilenamelabel(_:)-7f8yb",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusedobject(_:)-1dwmj",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusedobject(_:)-7fp9q",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusedsceneobject(_:)-1g58s",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusedsceneobject(_:)-6v7ap",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusedscenevalue(_:_:)-330ml",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusedscenevalue(_:_:)-3v8mz",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusedvalue(_:_:)-1rafd",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/focusedvalue(_:_:)-3xxt5",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/help(_:)-4ozv9",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/help(_:)-8uwii",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/help(_:)-uc6a",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listitemtint(_:)-6dmru",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listitemtint(_:)-8vjio",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listsectionspacing(_:)-2ta3z",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/listsectionspacing(_:)-9mvpb",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbartitle(_:)-6fzm4",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbartitle(_:)-7i7u",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbartitle(_:)-8kzxv",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbartitle(_:displaymode:)-4gk4d",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbartitle(_:displaymode:)-5ngyd",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbartitle(_:displaymode:)-6eipu",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationdocument(_:)-3p829",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationdocument(_:)-3vsyg",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationdocument(_:preview:)-3tdyr",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationdocument(_:preview:)-5jzat",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationdocument(_:preview:)-5xi1k",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationdocument(_:preview:)-8br2s",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationtitle(_:)-1h1qq",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationtitle(_:)-1uk9v",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationtitle(_:)-6c1jf",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationtitle(_:)-7v96f",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationtitle(_:)-ojh4",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onchange(of:initial:_:)-4bpuv",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onchange(of:initial:_:)-nsh2",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/oncontinuoushover(coordinatespace:perform:)-3ayvn",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/oncontinuoushover(coordinatespace:perform:)-yfxr",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ondrop(of:delegate:)-3r66x",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ondrop(of:delegate:)-3y8n0",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ondrop(of:istargeted:perform:)-5nh7k",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ondrop(of:istargeted:perform:)-68khq",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ondrop(of:istargeted:perform:)-75eec",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ondrop(of:istargeted:perform:)-a7wc",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ontapgesture(count:coordinatespace:perform:)-39tlo",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ontapgesture(count:coordinatespace:perform:)-8hjkk",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/padding(_:)-1wiyk",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/padding(_:)-3cdf",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/renameaction(_:)-3aclk",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/renameaction(_:)-9vh2c",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/safeareainset(edge:alignment:spacing:content:)-2k5mt",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/safeareainset(edge:alignment:spacing:content:)-83n2e",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/safeareapadding(_:)-3ljbk",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/safeareapadding(_:)-94dsd",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scaleeffect(_:anchor:)-2eaq7",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scaleeffect(_:anchor:)-7kbph",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchcompletion(_:)-5342k",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchcompletion(_:)-5xldf",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3iqnp",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5btz0",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8iphe",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:editabletokens:placement:prompt:token:)-33fen",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:editabletokens:placement:prompt:token:)-4ibjj",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:editabletokens:placement:prompt:token:)-62vuh",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:ispresented:placement:prompt:)-3gxc6",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:ispresented:placement:prompt:)-67tuz",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:ispresented:placement:prompt:)-9ulk1",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:placement:prompt:)-13c1y",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:placement:prompt:)-2u8eh",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:placement:prompt:)-4s9uf",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:placement:prompt:suggestions:)-4ms0e",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:placement:prompt:suggestions:)-4rwdl",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:placement:prompt:suggestions:)-9vrvy",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:ispresented:placement:prompt:token:)-423mw",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6jnpc",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:ispresented:placement:prompt:token:)-92b0u",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:placement:prompt:token:)-6pqb3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:placement:prompt:token:)-6yz2e",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:placement:prompt:token:)-8rdw5",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2p3p9",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-64x0x",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-pycy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3hipf",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-86p7j",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-hs5b",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/tint(_:)-1bqhd",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/tint(_:)-91ce5",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbar(content:)-1vhp9",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbar(content:)-6wx5e",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbarbackground(_:for:)-7tk5",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbarbackground(_:for:)-90bp9",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/typeselectequivalent(_:)-5a0uu",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/typeselectequivalent(_:)-6lf48",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/typeselectequivalent(_:)-7zrul",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/typesettinglanguage(_:isenabled:)-63gmx",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/typesettinglanguage(_:isenabled:)-64mx2",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/informationheaderview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/informationheaderview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/informationheaderview",
            "title" : "InformationHeaderView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/scheduleutility\/completedtimelabel(for:)",
                "title" : "static func completedTimeLabel(for: OCKAnyEvent) -> String?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitessentials\/scheduleutility\/schedulelabel(for:)-2to0q",
                "title" : "static func scheduleLabel(for: [OCKAnyEvent]) -> String?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitessentials\/scheduleutility\/schedulelabel(for:)-74mys",
                "title" : "static func scheduleLabel(for: OCKAnyEvent?) -> String?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitessentials\/scheduleutility\/timelabel(for:includesend:)",
                "title" : "static func timeLabel(for: OCKAnyEvent, includesEnd: Bool) -> String",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/scheduleutility",
            "title" : "ScheduleUtility",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/init(instructions:event:detailstitle:detailsinformation:range:step:action:header:slider:)",
                "title" : "init(instructions: Text?, event: CareStoreFetchedResult<OCKAnyEvent>, detailsTitle: String?, detailsInformation: String?, range: ClosedRange<Double>, step: Double, action: ((OCKOutcomeValue?) async throws -> OCKAnyOutcome)?, header: () -> Header, slider: () -> Slider)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/init(instructions:viewmodel:header:slider:)",
                "title" : "init(instructions: Text?, viewModel: SliderLogTaskViewModel, header: () -> Header, slider: () -> Slider)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/init(instructions:viewmodel:minimumimage:maximumimage:minimumdescription:maximumdescription:style:gradientcolors:header:)",
                "title" : "init(instructions: Text?, viewModel: SliderLogTaskViewModel, minimumImage: Image?, maximumImage: Image?, minimumDescription: String?, maximumDescription: String?, style: SliderStyle, gradientColors: [Color]?, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/init(title:detail:instructions:event:detailstitle:detailsinformation:initialvalue:range:step:action:minimumimage:maximumimage:minimumdescription:maximumdescription:style:gradientcolors:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, event: CareStoreFetchedResult<OCKAnyEvent>, detailsTitle: String?, detailsInformation: String?, initialValue: Double?, range: ClosedRange<Double>, step: Double, action: ((OCKOutcomeValue?) async throws -> OCKAnyOutcome)?, minimumImage: Image?, maximumImage: Image?, minimumDescription: String?, maximumDescription: String?, style: SliderStyle, gradientColors: [Color]?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/init(title:detail:instructions:viewmodel:minimumimage:maximumimage:minimumdescription:maximumdescription:style:gradientcolors:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, viewModel: SliderLogTaskViewModel, minimumImage: Image?, maximumImage: Image?, minimumDescription: String?, maximumDescription: String?, style: SliderStyle, gradientColors: [Color]?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/init(title:detail:instructions:viewmodel:slider:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, viewModel: SliderLogTaskViewModel, slider: () -> Slider)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(activationpoint:)-4nzg2",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(activationpoint:)-84ocn",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityaction(named:_:)-31078",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityaction(named:_:)-89ag0",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityaction(named:_:)-obn5",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityactivationpoint(_:)-48pr",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityactivationpoint(_:)-5hg0i",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitycustomcontent(_:_:importance:)-1cq1j",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitycustomcontent(_:_:importance:)-1r5o0",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitycustomcontent(_:_:importance:)-2w2gj",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitycustomcontent(_:_:importance:)-3onl1",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitycustomcontent(_:_:importance:)-4bl0y",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitycustomcontent(_:_:importance:)-79h6g",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitycustomcontent(_:_:importance:)-93bra",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitycustomcontent(_:_:importance:)-9rkmd",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityhint(_:)-3c7xp",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityhint(_:)-73kn4",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityhint(_:)-95hcq",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityinputlabels(_:)-2ywvp",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityinputlabels(_:)-4gr8q",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityinputlabels(_:)-8x4eg",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitylabel(_:)-1nzf7",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitylabel(_:)-34prr",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitylabel(_:)-7dtka",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:)-35wu2",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:)-3vqa5",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:)-4g4va",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:)-vo7",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2qor4",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9cb7b",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9ms6i",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9pf49",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:entrylabel:)-2mbh6",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:entrylabel:)-3tdpu",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:entrylabel:)-9c796",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:entries:entrylabel:)-ir4i",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:textranges:)-3q0lm",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:textranges:)-6mfj0",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:textranges:)-85ltu",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotor(_:textranges:)-8fq42",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityvalue(_:)-203mj",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityvalue(_:)-8vugu",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityvalue(_:)-pjyy",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:actions:)-21n",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:actions:)-9gbli",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:actions:)-s992",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:actions:message:)-466y0",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:actions:message:)-9mn1r",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:actions:message:)-rf8c",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:presenting:actions:)-4kcn5",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:presenting:actions:)-dz0s",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:presenting:actions:)-sc0n",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:presenting:actions:message:)-6eyqe",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:presenting:actions:message:)-6l1c8",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(_:ispresented:presenting:actions:message:)-6ya6e",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alignmentguide(_:computevalue:)-6msw6",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alignmentguide(_:computevalue:)-99fwy",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/aspectratio(_:contentmode:)-62ej8",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/aspectratio(_:contentmode:)-s5ao",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/background(_:in:fillstyle:)-119b0",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/background(_:in:fillstyle:)-15kua",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/background(in:fillstyle:)-8yob0",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/background(in:fillstyle:)-9a0l4",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/badge(_:)-3h9sx",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/badge(_:)-5a2gj",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/badge(_:)-64rin",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/badge(_:)-858p",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/buttonstyle(_:)-3vghb",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/buttonstyle(_:)-4rwn2",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(any OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-52zsf",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-7gd52",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-7j33y",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4o5vu",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-79ppe",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7yi6h",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3tds1",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3v5we",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-78bvl",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5sul9",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6ng81",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-h8fw",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contentmargins(_:_:for:)-2e1z3",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contentmargins(_:_:for:)-5yk8k",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/dialogsuppressiontoggle(_:issuppressed:)-29ckn",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/dialogsuppressiontoggle(_:issuppressed:)-5qbig",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/dialogsuppressiontoggle(_:issuppressed:)-6l7uy",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/dynamictypesize(_:)-7wqzt",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/dynamictypesize(_:)-8pbth",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogconfirmationlabel(_:)-5hjf2",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogconfirmationlabel(_:)-96uqy",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogconfirmationlabel(_:)-mamr",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogmessage(_:)-191et",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogmessage(_:)-35h74",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogmessage(_:)-3r9ox",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3dqak",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5wifa",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-3p2f",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-9cews",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-20jl1",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9csgz",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-2qtax",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-6ca01",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporterfilenamelabel(_:)-2kq3a",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporterfilenamelabel(_:)-6poio",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileexporterfilenamelabel(_:)-sgcb",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusedobject(_:)-29jkm",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusedobject(_:)-39ue9",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusedsceneobject(_:)-2rcc7",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusedsceneobject(_:)-7j992",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusedscenevalue(_:_:)-25b6n",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusedscenevalue(_:_:)-898bf",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusedvalue(_:_:)-29ucg",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/focusedvalue(_:_:)-5e479",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/help(_:)-3m2a2",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/help(_:)-6be22",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/help(_:)-m6h3",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listitemtint(_:)-26ejo",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listitemtint(_:)-npn0",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listsectionspacing(_:)-2idku",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/listsectionspacing(_:)-3tg9f",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbartitle(_:)-2ec9q",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbartitle(_:)-2wz42",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbartitle(_:)-py7p",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbartitle(_:displaymode:)-4znp5",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbartitle(_:displaymode:)-8dbos",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbartitle(_:displaymode:)-ivw0",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationdocument(_:)-6050n",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationdocument(_:)-7syd7",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationdocument(_:preview:)-2qq8g",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationdocument(_:preview:)-5959x",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationdocument(_:preview:)-8wlne",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationdocument(_:preview:)-zwdw",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationtitle(_:)-14hru",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationtitle(_:)-1aae2",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationtitle(_:)-55sd4",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationtitle(_:)-5nnb0",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationtitle(_:)-6uj79",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onchange(of:initial:_:)-4fffs",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onchange(of:initial:_:)-5q1gc",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/oncontinuoushover(coordinatespace:perform:)-181fw",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/oncontinuoushover(coordinatespace:perform:)-7uw60",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ondrop(of:delegate:)-1nv8y",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ondrop(of:delegate:)-7kh7u",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ondrop(of:istargeted:perform:)-16co0",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ondrop(of:istargeted:perform:)-2swnq",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ondrop(of:istargeted:perform:)-3ljee",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ondrop(of:istargeted:perform:)-7kp4",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ontapgesture(count:coordinatespace:perform:)-5cd93",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ontapgesture(count:coordinatespace:perform:)-6ne67",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/padding(_:)-3568g",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/padding(_:)-4iycd",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/renameaction(_:)-2dygq",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/renameaction(_:)-6woye",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/safeareainset(edge:alignment:spacing:content:)-kz1l",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/safeareainset(edge:alignment:spacing:content:)-pk4y",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/safeareapadding(_:)-7kelt",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/safeareapadding(_:)-rp57",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scaleeffect(_:anchor:)-4j33g",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scaleeffect(_:anchor:)-5xag4",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchcompletion(_:)-5e47r",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchcompletion(_:)-9l6uu",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-23jq9",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2ltgq",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8a9ce",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:editabletokens:placement:prompt:token:)-3g109",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:editabletokens:placement:prompt:token:)-5rnb3",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:editabletokens:placement:prompt:token:)-8rpwm",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:ispresented:placement:prompt:)-40mcp",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:ispresented:placement:prompt:)-6iddn",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:ispresented:placement:prompt:)-93v2u",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:placement:prompt:)-5cq6t",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:placement:prompt:)-72nc1",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:placement:prompt:)-76jzb",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:placement:prompt:suggestions:)-2cc9g",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:placement:prompt:suggestions:)-6d41r",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:placement:prompt:suggestions:)-927hn",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-29d8w",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6f0za",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9c5hu",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:placement:prompt:token:)-3kygw",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:placement:prompt:token:)-6kmd5",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:placement:prompt:token:)-iogw",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4pz97",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-6ms2k",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-szit",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3h4u1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7i3g4",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9psrw",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/tint(_:)-12jyb",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/tint(_:)-2jkil",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbar(content:)-31wox",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbar(content:)-6pkjs",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbarbackground(_:for:)-3yvi0",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbarbackground(_:for:)-69u9p",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/typeselectequivalent(_:)-5x3xa",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/typeselectequivalent(_:)-8cx7r",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/typeselectequivalent(_:)-93p5b",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/typesettinglanguage(_:isenabled:)-8ngtk",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/typesettinglanguage(_:isenabled:)-8vogi",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/sliderlogtaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/sliderlogtaskview",
            "title" : "SliderLogTaskView",
            "type" : "struct"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderstyle\/system",
                "title" : "case system",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitessentials\/sliderstyle\/ticked",
                "title" : "case ticked",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitessentials\/sliderstyle\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitessentials\/sliderstyle\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitessentials\/sliderstyle",
            "title" : "SliderStyle",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/carekitessentials",
        "title" : "CareKitEssentials",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/init(store:)",
                "title" : "init(store: OCKStore)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/checkabilitytodelete(outcomes:)",
                "title" : "func checkAbilityToDelete(outcomes: [OCKHealthKitOutcome]) throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtasks(for:)",
                "title" : "func fetchTasks(for: [OCKHealthKitOutcome]) throws -> [OCKHealthKitTask]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/requesthealthkitpermissionsforalltasksinstore(completion:)",
                "title" : "func requestHealthKitPermissionsForAllTasksInStore(completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/outcome",
                "title" : "OCKHealthKitPassthroughStore.Outcome",
                "type" : "typealias"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/task",
                "title" : "OCKHealthKitPassthroughStore.Task",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcome(_:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcomes(_:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcome(_:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcomes(_:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcome(_:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcomes(_:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyoutcomestore-implementations",
                "title" : "OCKAnyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/anyevents(matching:)",
                    "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchadherence(query:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchadherence(query:callbackqueue:completion:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevent(fortask:occurrence:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevents(query:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyevents(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyreadonlyeventstore-implementations",
                "title" : "OCKAnyReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/anyoutcomes(matching:)",
                    "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcome(query:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcomes(query:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyreadonlyoutcomestore-implementations",
                "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/anytasks(matching:)",
                    "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytask(withid:)",
                    "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytask(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytasks(query:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchanytasks(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanyreadonlytaskstore-implementations",
                "title" : "OCKAnyReadOnlyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytask(_:)",
                    "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytask(_:callbackqueue:completion:)",
                    "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytasks(_:)",
                    "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addanytasks(_:callbackqueue:completion:)",
                    "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytask(_:)",
                    "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytask(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytasks(_:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteanytasks(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytask(_:)",
                    "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytask(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytasks(_:)",
                    "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateanytasks(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockanytaskstore-implementations",
                "title" : "OCKAnyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcome(_:)",
                    "title" : "func addOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcome(_:callbackqueue:completion:)",
                    "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcomes(_:)",
                    "title" : "func addOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addOutcomes([OCKHealthKitOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcome(_:)",
                    "title" : "func deleteOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcomes(_:)",
                    "title" : "func deleteOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deleteoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcomes([OCKHealthKitOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcome(_:)",
                    "title" : "func updateOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcomes(_:)",
                    "title" : "func updateOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updateoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateOutcomes([OCKHealthKitOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockoutcomestore-implementations",
                "title" : "OCKOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/events(matching:)-17oib",
                    "title" : "func events(matching: OCKEventQuery) -> CareStoreQueryResults<OCKEvent<Task, Outcome>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/events(matching:)-24nnc",
                    "title" : "func events(matching: OCKEventQuery) -> CareStoreQueryResults<Event>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevent(fortask:occurrence:)",
                    "title" : "func fetchEvent(forTask: Task, occurrence: Int) async throws -> Event",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchEvent(forTask: Self.Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevents(query:)",
                    "title" : "func fetchEvents(query: OCKEventQuery) async throws -> [Event]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevents(query:callbackqueue:completion:)-1wsj3",
                    "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Event]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchevents(query:callbackqueue:completion:)-5nb3u",
                    "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKEvent<Task, Outcome>]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockreadonlyeventstore-implementations",
                "title" : "OCKReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcome(query:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcomes(query:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: (Result<[Outcome], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/outcomes(matching:)",
                    "title" : "func outcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKHealthKitOutcome>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockreadableoutcomestore-implementations",
                "title" : "OCKReadableOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtask(withid:)",
                    "title" : "func fetchTask(withID: String) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtask(withid:callbackqueue:completion:)",
                    "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtasks(query:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/fetchtasks(query:callbackqueue:completion:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKHealthKitTask], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/tasks(matching:)",
                    "title" : "func tasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKHealthKitTask>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ockreadabletaskstore-implementations",
                "title" : "OCKReadableTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtask(_:)",
                    "title" : "func addTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtask(_:callbackqueue:completion:)",
                    "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtasks(_:)",
                    "title" : "func addTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/addtasks(_:callbackqueue:completion:)",
                    "title" : "func addTasks([OCKHealthKitTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetask(_:)",
                    "title" : "func deleteTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetask(_:callbackqueue:completion:)",
                    "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetasks(_:)",
                    "title" : "func deleteTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/deletetasks(_:callbackqueue:completion:)",
                    "title" : "func deleteTasks([OCKHealthKitTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetask(_:)",
                    "title" : "func updateTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetask(_:callbackqueue:completion:)",
                    "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetasks(_:)",
                    "title" : "func updateTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/updatetasks(_:callbackqueue:completion:)",
                    "title" : "func updateTasks([OCKHealthKitTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKHealthKitTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore\/ocktaskstore-implementations",
                "title" : "OCKTaskStore Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkitpassthroughstore",
            "title" : "OCKHealthKitPassthroughStore",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpostaladdress\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpostaladdress\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpostaladdress\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpostaladdress",
            "title" : "OCKPostalAddress",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/==(_:_:)",
                "title" : "static func == (OCKStore, OCKStore) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/init(name:securityapplicationgroupidentifier:type:remote:)",
                "title" : "init(name: String, securityApplicationGroupIdentifier: String?, type: OCKCoreDataStoreType, remote: OCKRemoteSynchronizable?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/name",
                "title" : "let name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/securityapplicationgroupidentifier",
                "title" : "let securityApplicationGroupIdentifier: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/delete()",
                "title" : "func delete() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstore\/synchronize(completion:)",
                "title" : "func synchronize(completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplan(_:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplan(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplans(_:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycareplans(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplan(_:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplan(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplans(_:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycareplans(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplan(_:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplan(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplans(_:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycareplans(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanycareplanstore-implementations",
                "title" : "OCKAnyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontact(_:)",
                    "title" : "func addAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontact(_:callbackqueue:completion:)",
                    "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontacts(_:)",
                    "title" : "func addAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanycontacts(_:callbackqueue:completion:)",
                    "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontact(_:)",
                    "title" : "func deleteAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontact(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontacts(_:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanycontacts(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontact(_:)",
                    "title" : "func updateAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontact(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontacts(_:)",
                    "title" : "func updateAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanycontacts(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanycontactstore-implementations",
                "title" : "OCKAnyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcome(_:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcomes(_:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcome(_:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcomes(_:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcome(_:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcomes(_:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyoutcomestore-implementations",
                "title" : "OCKAnyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatient(_:)",
                    "title" : "func addAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatient(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatients(_:)",
                    "title" : "func addAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanypatients(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatient(_:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatient(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatients(_:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanypatients(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatient(_:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatient(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatients(_:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanypatients(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanypatientstore-implementations",
                "title" : "OCKAnyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anycareplans(matching:)",
                    "title" : "func anyCarePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKAnyCarePlan>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplan(withid:)",
                    "title" : "func fetchAnyCarePlan(withID: String) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplan(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplans(query:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycareplans(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlycareplanstore-implementations",
                "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anycontacts(matching:)",
                    "title" : "func anyContacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKAnyContact>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontact(withid:)",
                    "title" : "func fetchAnyContact(withID: String) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontact(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontacts(query:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanycontacts(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlycontactstore-implementations",
                "title" : "OCKAnyReadOnlyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anyevents(matching:)",
                    "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchadherence(query:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchadherence(query:callbackqueue:completion:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevent(fortask:occurrence:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevents(query:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyevents(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlyeventstore-implementations",
                "title" : "OCKAnyReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anyoutcomes(matching:)",
                    "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcome(query:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcomes(query:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanyoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlyoutcomestore-implementations",
                "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anypatients(matching:)",
                    "title" : "func anyPatients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKAnyPatient>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatient(withid:)",
                    "title" : "func fetchAnyPatient(withID: String) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatient(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatients(query:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanypatients(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlypatientstore-implementations",
                "title" : "OCKAnyReadOnlyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/anytasks(matching:)",
                    "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytask(withid:)",
                    "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytask(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytasks(query:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchanytasks(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanyreadonlytaskstore-implementations",
                "title" : "OCKAnyReadOnlyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytask(_:)",
                    "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytask(_:callbackqueue:completion:)",
                    "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytasks(_:)",
                    "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addanytasks(_:callbackqueue:completion:)",
                    "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytask(_:)",
                    "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytask(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytasks(_:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteanytasks(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytask(_:)",
                    "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytask(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytasks(_:)",
                    "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateanytasks(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockanytaskstore-implementations",
                "title" : "OCKAnyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplan(_:)",
                    "title" : "func addCarePlan(Plan) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplan(_:callbackqueue:completion:)",
                    "title" : "func addCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplans(_:)",
                    "title" : "func addCarePlans([Plan]) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcareplans(_:callbackqueue:completion:)",
                    "title" : "func addCarePlans([OCKCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplan(_:)",
                    "title" : "func deleteCarePlan(Plan) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplan(_:callbackqueue:completion:)",
                    "title" : "func deleteCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplans(_:)",
                    "title" : "func deleteCarePlans([Plan]) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecareplans(_:callbackqueue:completion:)",
                    "title" : "func deleteCarePlans([OCKCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplan(_:)",
                    "title" : "func updateCarePlan(Plan) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplan(_:callbackqueue:completion:)",
                    "title" : "func updateCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplans(_:)",
                    "title" : "func updateCarePlans([Plan]) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecareplans(_:callbackqueue:completion:)",
                    "title" : "func updateCarePlans([OCKCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockcareplanstore-implementations",
                "title" : "OCKCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontact(_:)",
                    "title" : "func addContact(Contact) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontact(_:callbackqueue:completion:)",
                    "title" : "func addContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontacts(_:)",
                    "title" : "func addContacts([Contact]) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addcontacts(_:callbackqueue:completion:)",
                    "title" : "func addContacts([OCKContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontact(_:)",
                    "title" : "func deleteContact(Contact) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontact(_:callbackqueue:completion:)",
                    "title" : "func deleteContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontacts(_:)",
                    "title" : "func deleteContacts([Contact]) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletecontacts(_:callbackqueue:completion:)",
                    "title" : "func deleteContacts([OCKContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontact(_:)",
                    "title" : "func updateContact(Contact) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontact(_:callbackqueue:completion:)",
                    "title" : "func updateContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontacts(_:)",
                    "title" : "func updateContacts([Contact]) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatecontacts(_:callbackqueue:completion:)",
                    "title" : "func updateContacts([OCKContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKContact]>?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockcontactstore-implementations",
                "title" : "OCKContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcome(_:)",
                    "title" : "func addOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcome(_:callbackqueue:completion:)",
                    "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcomes(_:)",
                    "title" : "func addOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addOutcomes([OCKOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcome(_:)",
                    "title" : "func deleteOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcomes(_:)",
                    "title" : "func deleteOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deleteoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteOutcomes([OCKOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcome(_:)",
                    "title" : "func updateOutcome(Outcome) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcomes(_:)",
                    "title" : "func updateOutcomes([Outcome]) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updateoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateOutcomes([OCKOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockoutcomestore-implementations",
                "title" : "OCKOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatient(_:)",
                    "title" : "func addPatient(Patient) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatient(_:callbackqueue:completion:)",
                    "title" : "func addPatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatients(_:)",
                    "title" : "func addPatients([Patient]) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addpatients(_:callbackqueue:completion:)",
                    "title" : "func addPatients([OCKPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatient(_:)",
                    "title" : "func deletePatient(Patient) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatient(_:callbackqueue:completion:)",
                    "title" : "func deletePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatients(_:)",
                    "title" : "func deletePatients([Patient]) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletepatients(_:callbackqueue:completion:)",
                    "title" : "func deletePatients([OCKPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatient(_:)",
                    "title" : "func updatePatient(Patient) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatient(_:callbackqueue:completion:)",
                    "title" : "func updatePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatients(_:)",
                    "title" : "func updatePatients([Patient]) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatepatients(_:callbackqueue:completion:)",
                    "title" : "func updatePatients([OCKPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockpatientstore-implementations",
                "title" : "OCKPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/events(matching:)",
                    "title" : "func events(matching: OCKEventQuery) -> CareStoreQueryResults<Event>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevent(fortask:occurrence:)",
                    "title" : "func fetchEvent(forTask: Task, occurrence: Int) async throws -> Event",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchEvent(forTask: Self.Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevents(query:)",
                    "title" : "func fetchEvents(query: OCKEventQuery) async throws -> [Event]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchevents(query:callbackqueue:completion:)",
                    "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKEvent<Task, Outcome>]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadonlyeventstore-implementations",
                "title" : "OCKReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/careplans(matching:)",
                    "title" : "func carePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKCarePlan>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplan(withid:)",
                    "title" : "func fetchCarePlan(withID: String) async throws -> Plan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplan(withid:callbackqueue:completion:)",
                    "title" : "func fetchCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplans(query:)",
                    "title" : "func fetchCarePlans(query: OCKCarePlanQuery) async throws -> [Plan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcareplans(query:callbackqueue:completion:)",
                    "title" : "func fetchCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKCarePlan], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadablecareplanstore-implementations",
                "title" : "OCKReadableCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/contacts(matching:)",
                    "title" : "func contacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKContact>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontact(withid:)",
                    "title" : "func fetchContact(withID: String) async throws -> Contact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontact(withid:callbackqueue:completion:)",
                    "title" : "func fetchContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontacts(query:)",
                    "title" : "func fetchContacts(query: OCKContactQuery) async throws -> [Contact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchcontacts(query:callbackqueue:completion:)",
                    "title" : "func fetchContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKContact], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadablecontactstore-implementations",
                "title" : "OCKReadableContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcome(query:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery) async throws -> Outcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcomes(query:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery) async throws -> [Outcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKOutcome], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/outcomes(matching:)",
                    "title" : "func outcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKOutcome>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadableoutcomestore-implementations",
                "title" : "OCKReadableOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatient(withid:)",
                    "title" : "func fetchPatient(withID: String) async throws -> Patient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatient(withid:callbackqueue:completion:)",
                    "title" : "func fetchPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatients(query:)",
                    "title" : "func fetchPatients(query: OCKPatientQuery) async throws -> [Patient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchpatients(query:callbackqueue:completion:)",
                    "title" : "func fetchPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKPatient], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/patients(matching:)",
                    "title" : "func patients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKPatient>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadablepatientstore-implementations",
                "title" : "OCKReadablePatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtask(withid:)",
                    "title" : "func fetchTask(withID: String) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtask(withid:callbackqueue:completion:)",
                    "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtasks(query:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/fetchtasks(query:callbackqueue:completion:)",
                    "title" : "func fetchTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKTask], OCKStoreError>) -> Void)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/tasks(matching:)",
                    "title" : "func tasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKTask>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockreadabletaskstore-implementations",
                "title" : "OCKReadableTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/didrequestsynchronization(_:)",
                    "title" : "func didRequestSynchronization(OCKRemoteSynchronizable)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/remote(_:didupdateprogress:)",
                    "title" : "func remote(OCKRemoteSynchronizable, didUpdateProgress: Double)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ockremotesynchronizationdelegate-implementations",
                "title" : "OCKRemoteSynchronizationDelegate Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtask(_:)",
                    "title" : "func addTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtask(_:callbackqueue:completion:)",
                    "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtasks(_:)",
                    "title" : "func addTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/addtasks(_:callbackqueue:completion:)",
                    "title" : "func addTasks([OCKTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetask(_:)",
                    "title" : "func deleteTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetask(_:callbackqueue:completion:)",
                    "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetasks(_:)",
                    "title" : "func deleteTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/deletetasks(_:callbackqueue:completion:)",
                    "title" : "func deleteTasks([OCKTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetask(_:)",
                    "title" : "func updateTask(Task) async throws -> Task",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetask(_:callbackqueue:completion:)",
                    "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetasks(_:)",
                    "title" : "func updateTasks([Task]) async throws -> [Task]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstore\/updatetasks(_:callbackqueue:completion:)",
                    "title" : "func updateTasks([OCKTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstore\/ocktaskstore-implementations",
                "title" : "OCKTaskStore Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockstore",
            "title" : "OCKStore",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(contactstore:)",
                "title" : "func attach(contactStore: OCKAnyContactStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(eventstore:)",
                "title" : "func attach(eventStore: OCKAnyEventStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(patientstore:)",
                "title" : "func attach(patientStore: OCKAnyPatientStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(planstore:)",
                "title" : "func attach(planStore: OCKAnyCarePlanStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attach(store:)",
                "title" : "func attach(store: OCKAnyStoreProtocol)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(careplanstore:)",
                "title" : "func attachReadOnly(carePlanStore: OCKAnyReadOnlyCarePlanStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(contactstore:)",
                "title" : "func attachReadOnly(contactStore: OCKAnyReadOnlyContactStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(eventstore:)",
                "title" : "func attachReadOnly(eventStore: OCKAnyReadOnlyEventStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/attachreadonly(patientstore:)",
                "title" : "func attachReadOnly(patientStore: OCKAnyReadOnlyPatientStore)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplanstore(_:shouldhandlequery:)",
                "title" : "func carePlanStore(OCKAnyReadOnlyCarePlanStore, shouldHandleQuery: OCKCarePlanQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/careplanstore(_:shouldhandlewritingcareplan:)",
                "title" : "func carePlanStore(OCKAnyCarePlanStore, shouldHandleWritingCarePlan: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactstore(_:shouldhandlequery:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, shouldHandleQuery: OCKContactQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/contactstore(_:shouldhandlewritingcontact:)",
                "title" : "func contactStore(OCKAnyReadOnlyContactStore, shouldHandleWritingContact: OCKAnyContact) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:shouldhandlequery:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, shouldHandleQuery: OCKOutcomeQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/outcomestore(_:shouldhandlewritingoutcome:)",
                "title" : "func outcomeStore(OCKAnyReadOnlyOutcomeStore, shouldHandleWritingOutcome: OCKAnyOutcome) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientstore(_:shouldhandlequery:)",
                "title" : "func patientStore(OCKAnyReadOnlyPatientStore, shouldHandleQuery: OCKPatientQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/patientstore(_:shouldhandlewritingpatient:)",
                "title" : "func patientStore(OCKAnyPatientStore, shouldHandleWritingPatient: OCKAnyPatient) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskstore(_:shouldhandlequery:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, shouldHandleQuery: OCKTaskQuery) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/taskstore(_:shouldhandlewritingtask:)",
                "title" : "func taskStore(OCKAnyReadOnlyTaskStore, shouldHandleWritingTask: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplan(_:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplan(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplans(_:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycareplans(_:callbackqueue:completion:)",
                    "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplan(_:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplan(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplans(_:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycareplans(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplan(_:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplan(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplans(_:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycareplans(_:callbackqueue:completion:)",
                    "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanycareplanstore-implementations",
                "title" : "OCKAnyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontact(_:)",
                    "title" : "func addAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontact(_:callbackqueue:completion:)",
                    "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontacts(_:)",
                    "title" : "func addAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanycontacts(_:callbackqueue:completion:)",
                    "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontact(_:)",
                    "title" : "func deleteAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontact(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontacts(_:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanycontacts(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontact(_:)",
                    "title" : "func updateAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontact(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontacts(_:)",
                    "title" : "func updateAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanycontacts(_:callbackqueue:completion:)",
                    "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyContact], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanycontactstore-implementations",
                "title" : "OCKAnyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcome(_:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcomes(_:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcome(_:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcomes(_:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcome(_:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcome(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcomes(_:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanyoutcomes(_:callbackqueue:completion:)",
                    "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyOutcome], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyoutcomestore-implementations",
                "title" : "OCKAnyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatient(_:)",
                    "title" : "func addAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatient(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatients(_:)",
                    "title" : "func addAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanypatients(_:callbackqueue:completion:)",
                    "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatient(_:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatient(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatients(_:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanypatients(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatient(_:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatient(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatients(_:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanypatients(_:callbackqueue:completion:)",
                    "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyPatient], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanypatientstore-implementations",
                "title" : "OCKAnyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anycareplans(matching:)",
                    "title" : "func anyCarePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKAnyCarePlan>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplan(withid:)",
                    "title" : "func fetchAnyCarePlan(withID: String) async throws -> OCKAnyCarePlan",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplan(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplans(query:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery) async throws -> [OCKAnyCarePlan]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycareplans(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyCarePlan], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlycareplanstore-implementations",
                "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anycontacts(matching:)",
                    "title" : "func anyContacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKAnyContact>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontact(withid:)",
                    "title" : "func fetchAnyContact(withID: String) async throws -> OCKAnyContact",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontact(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontacts(query:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery) async throws -> [OCKAnyContact]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanycontacts(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyContact], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlycontactstore-implementations",
                "title" : "OCKAnyReadOnlyContactStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anyevents(matching:)",
                    "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchadherence(query:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchadherence(query:callbackqueue:completion:)",
                    "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevent(fortask:occurrence:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevents(query:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyevents(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlyeventstore-implementations",
                "title" : "OCKAnyReadOnlyEventStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anyoutcomes(matching:)",
                    "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcome(query:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcome(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcomes(query:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanyoutcomes(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyOutcome], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlyoutcomestore-implementations",
                "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anypatients(matching:)",
                    "title" : "func anyPatients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKAnyPatient>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatient(withid:)",
                    "title" : "func fetchAnyPatient(withID: String) async throws -> OCKAnyPatient",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatient(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatients(query:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery) async throws -> [OCKAnyPatient]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanypatients(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlypatientstore-implementations",
                "title" : "OCKAnyReadOnlyPatientStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/anytasks(matching:)",
                    "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytask(withid:)",
                    "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytask(withid:callbackqueue:completion:)",
                    "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytasks(query:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/fetchanytasks(query:callbackqueue:completion:)",
                    "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: (Result<[OCKAnyTask], OCKStoreError>) -> Void)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanyreadonlytaskstore-implementations",
                "title" : "OCKAnyReadOnlyTaskStore Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytask(_:)",
                    "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytask(_:callbackqueue:completion:)",
                    "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytasks(_:)",
                    "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/addanytasks(_:callbackqueue:completion:)",
                    "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytask(_:)",
                    "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytask(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytasks(_:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/deleteanytasks(_:callbackqueue:completion:)",
                    "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytask(_:)",
                    "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytask(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytasks(_:)",
                    "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/updateanytasks(_:callbackqueue:completion:)",
                    "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: ((Result<[OCKAnyTask], OCKStoreError>) -> Void)?)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstorecoordinator\/ockanytaskstore-implementations",
                "title" : "OCKAnyTaskStore Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockstorecoordinator",
            "title" : "OCKStoreCoordinator",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/automaticallysynchronizes",
                "title" : "var automaticallySynchronizes: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/delegate",
                "title" : "var delegate: OCKRemoteSynchronizationDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/chooseconflictresolution(conflicts:completion:)",
                "title" : "func chooseConflictResolution(conflicts: [OCKEntity], completion: OCKResultClosure<OCKEntity>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/pullrevisions(since:mergerevision:completion:)",
                "title" : "func pullRevisions(since: OCKRevisionRecord.KnowledgeVector, mergeRevision: (OCKRevisionRecord) -> Void, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/pushrevisions(devicerevisions:deviceknowledge:completion:)",
                "title" : "func pushRevisions(deviceRevisions: [OCKRevisionRecord], deviceKnowledge: OCKRevisionRecord.KnowledgeVector, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer\/reply(to:store:sendreply:)",
                "title" : "func reply(to: [String : Any], store: OCKStore, sendReply: (_ message: [String : Any]) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockwatchconnectivitypeer",
            "title" : "OCKWatchConnectivityPeer",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogress\/fractioncompleted",
                "title" : "var fractionCompleted: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogress\/iscompleted",
                "title" : "var isCompleted: Bool",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/caretaskprogress",
            "title" : "CareTaskProgress",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplan\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyPatient) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycareplan",
            "title" : "OCKAnyCarePlan",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplan(_:)",
                "title" : "func addAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplan(_:callbackqueue:completion:)-3zehz",
                        "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplan(_:callbackqueue:completion:)-22ln2",
                "title" : "func addAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplans(_:)",
                "title" : "func addAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplans(_:callbackqueue:completion:)-6j0zo",
                        "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/addanycareplans(_:callbackqueue:completion:)-oozn",
                "title" : "func addAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplan(_:)",
                "title" : "func deleteAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplan(_:callbackqueue:completion:)-5p51",
                        "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplan(_:callbackqueue:completion:)-2eqy7",
                "title" : "func deleteAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplans(_:)",
                "title" : "func deleteAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplans(_:callbackqueue:completion:)-8ic5r",
                        "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/deleteanycareplans(_:callbackqueue:completion:)-1mp4b",
                "title" : "func deleteAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplan(_:)",
                "title" : "func updateAnyCarePlan(OCKAnyCarePlan) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplan(_:callbackqueue:completion:)-3ctf",
                        "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplan(_:callbackqueue:completion:)-16z29",
                "title" : "func updateAnyCarePlan(OCKAnyCarePlan, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplans(_:)",
                "title" : "func updateAnyCarePlans([OCKAnyCarePlan]) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplans(_:callbackqueue:completion:)-99fa7",
                        "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycareplanstore\/updateanycareplans(_:callbackqueue:completion:)-37t1l",
                "title" : "func updateAnyCarePlans([OCKAnyCarePlan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycareplanstore",
            "title" : "OCKAnyCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/address",
                "title" : "var address: OCKPostalAddress?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/category",
                "title" : "var category: OCKContactCategory?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/emailaddresses",
                "title" : "var emailAddresses: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/messagingnumbers",
                "title" : "var messagingNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/organization",
                "title" : "var organization: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/othercontactinfo",
                "title" : "var otherContactInfo: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/phonenumbers",
                "title" : "var phoneNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/role",
                "title" : "var role: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontact\/isequal(to:)",
                "title" : "func isEqual(to: OCKAnyContact) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycontact",
            "title" : "OCKAnyContact",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontact(_:)",
                "title" : "func addAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontact(_:callbackqueue:completion:)-1czln",
                        "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontact(_:callbackqueue:completion:)-1ynz9",
                "title" : "func addAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontacts(_:)",
                "title" : "func addAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontacts(_:callbackqueue:completion:)-57jrr",
                        "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/addanycontacts(_:callbackqueue:completion:)-7xdx2",
                "title" : "func addAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontact(_:)",
                "title" : "func deleteAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontact(_:callbackqueue:completion:)-5unnv",
                        "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontact(_:callbackqueue:completion:)-5xl3x",
                "title" : "func deleteAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontacts(_:)",
                "title" : "func deleteAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontacts(_:callbackqueue:completion:)-74zlf",
                        "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/deleteanycontacts(_:callbackqueue:completion:)-2mgwe",
                "title" : "func deleteAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontact(_:)",
                "title" : "func updateAnyContact(OCKAnyContact) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontact(_:callbackqueue:completion:)-7hfp",
                        "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontact(_:callbackqueue:completion:)-2aaxo",
                "title" : "func updateAnyContact(OCKAnyContact, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontacts(_:)",
                "title" : "func updateAnyContacts([OCKAnyContact]) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontacts(_:callbackqueue:completion:)-54x8p",
                        "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanycontactstore\/updateanycontacts(_:callbackqueue:completion:)-26k85",
                "title" : "func updateAnyContacts([OCKAnyContact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanycontactstore",
            "title" : "OCKAnyContactStore",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockanyeventstore",
            "title" : "OCKAnyEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/taskuuid",
                "title" : "var taskUUID: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/answerdouble(kind:)",
                "title" : "func answerDouble(kind: String) -> [Double]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/answerstring(kind:)",
                "title" : "func answerString(kind: String) -> [String]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/sortedoutcomevalues()",
                "title" : "func sortedOutcomeValues() -> Self",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcome\/sortedoutcomevaluesbyrecency()",
                "title" : "func sortedOutcomeValuesByRecency() -> Self",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyoutcome",
            "title" : "OCKAnyOutcome",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcome(_:)",
                "title" : "func addAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcome(_:callbackqueue:completion:)-1dvp7",
                        "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcome(_:callbackqueue:completion:)-8fewj",
                "title" : "func addAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcomes(_:)",
                "title" : "func addAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcomes(_:callbackqueue:completion:)-2i4q0",
                        "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/addanyoutcomes(_:callbackqueue:completion:)-70fi7",
                "title" : "func addAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcome(_:)",
                "title" : "func deleteAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcome(_:callbackqueue:completion:)-4ab2n",
                        "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcome(_:callbackqueue:completion:)-7z9j9",
                "title" : "func deleteAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcomes(_:)",
                "title" : "func deleteAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcomes(_:callbackqueue:completion:)-6x8kr",
                        "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/deleteanyoutcomes(_:callbackqueue:completion:)-348no",
                "title" : "func deleteAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcome(_:)",
                "title" : "func updateAnyOutcome(OCKAnyOutcome) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcome(_:callbackqueue:completion:)-8cd7b",
                        "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcome(_:callbackqueue:completion:)-6m13u",
                "title" : "func updateAnyOutcome(OCKAnyOutcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcomes(_:)",
                "title" : "func updateAnyOutcomes([OCKAnyOutcome]) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcomes(_:callbackqueue:completion:)-3njx5",
                        "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyoutcomestore\/updateanyoutcomes(_:callbackqueue:completion:)-99hj6",
                "title" : "func updateAnyOutcomes([OCKAnyOutcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyoutcomestore",
            "title" : "OCKAnyOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/allergies",
                "title" : "var allergies: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/birthday",
                "title" : "var birthday: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatient\/sex",
                "title" : "var sex: OCKBiologicalSex?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanypatient",
            "title" : "OCKAnyPatient",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatient(_:)",
                "title" : "func addAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatient(_:callbackqueue:completion:)-2br3j",
                        "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatient(_:callbackqueue:completion:)-6ps1z",
                "title" : "func addAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatients(_:)",
                "title" : "func addAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatients(_:callbackqueue:completion:)-82pky",
                        "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/addanypatients(_:callbackqueue:completion:)-817v4",
                "title" : "func addAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatient(_:)",
                "title" : "func deleteAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatient(_:callbackqueue:completion:)-53a1q",
                        "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatient(_:callbackqueue:completion:)-567nr",
                "title" : "func deleteAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatients(_:)",
                "title" : "func deleteAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatients(_:callbackqueue:completion:)-65if3",
                        "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/deleteanypatients(_:callbackqueue:completion:)-50sq4",
                "title" : "func deleteAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatient(_:)",
                "title" : "func updateAnyPatient(OCKAnyPatient) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatient(_:callbackqueue:completion:)-6cgn3",
                        "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatient(_:callbackqueue:completion:)-73rnk",
                "title" : "func updateAnyPatient(OCKAnyPatient, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatients(_:)",
                "title" : "func updateAnyPatients([OCKAnyPatient]) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatients(_:callbackqueue:completion:)-9nua5",
                        "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanypatientstore\/updateanypatients(_:callbackqueue:completion:)-65oda",
                "title" : "func updateAnyPatients([OCKAnyPatient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanypatientstore",
            "title" : "OCKAnyPatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/anycareplans(matching:)-81hwg",
                        "title" : "func anyCarePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKAnyCarePlan>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/anycareplans(matching:)-1fueu",
                "title" : "func anyCarePlans(matching: OCKCarePlanQuery) -> CareStoreQueryResults<OCKAnyCarePlan>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplan(withid:)",
                "title" : "func fetchAnyCarePlan(withID: String) async throws -> OCKAnyCarePlan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplan(withid:callbackqueue:completion:)-2g29x",
                        "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplan(withid:callbackqueue:completion:)-v9kd",
                "title" : "func fetchAnyCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyCarePlan>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplans(query:)",
                "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery) async throws -> [OCKAnyCarePlan]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplans(query:callbackqueue:completion:)-915bn",
                        "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore\/fetchanycareplans(query:callbackqueue:completion:)-5jg20",
                "title" : "func fetchAnyCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyCarePlan]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlycareplanstore",
            "title" : "OCKAnyReadOnlyCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/anycontacts(matching:)-1nejj",
                        "title" : "func anyContacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKAnyContact>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/anycontacts(matching:)-6s462",
                "title" : "func anyContacts(matching: OCKContactQuery) -> CareStoreQueryResults<OCKAnyContact>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontact(withid:)",
                "title" : "func fetchAnyContact(withID: String) async throws -> OCKAnyContact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontact(withid:callbackqueue:completion:)-5glpj",
                        "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontact(withid:callbackqueue:completion:)-iivk",
                "title" : "func fetchAnyContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyContact>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontacts(query:)",
                "title" : "func fetchAnyContacts(query: OCKContactQuery) async throws -> [OCKAnyContact]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontacts(query:callbackqueue:completion:)-6ajft",
                        "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore\/fetchanycontacts(query:callbackqueue:completion:)-4v9vi",
                "title" : "func fetchAnyContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyContact]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlycontactstore",
            "title" : "OCKAnyReadOnlyContactStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/anyevents(matching:)-1vlhv",
                        "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/anyevents(matching:)-5owja",
                "title" : "func anyEvents(matching: OCKEventQuery) -> CareStoreQueryResults<OCKAnyEvent>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchadherence(query:)",
                "title" : "func fetchAdherence(query: OCKAdherenceQuery) async throws -> [OCKAdherence]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchadherence(query:callbackqueue:completion:)-6s3hf",
                        "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchadherence(query:callbackqueue:completion:)-71pef",
                "title" : "func fetchAdherence(query: OCKAdherenceQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAdherence]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevent(fortask:occurrence:)",
                "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int) async throws -> OCKAnyEvent",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)-7rh4h",
                        "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevent(fortask:occurrence:callbackqueue:completion:)-6jtds",
                "title" : "func fetchAnyEvent(forTask: OCKAnyTask, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyEvent>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevents(query:)",
                "title" : "func fetchAnyEvents(query: OCKEventQuery) async throws -> [OCKAnyEvent]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevents(query:callbackqueue:completion:)-71719",
                        "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore\/fetchanyevents(query:callbackqueue:completion:)-3y7ug",
                "title" : "func fetchAnyEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyEvent]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlyeventstore",
            "title" : "OCKAnyReadOnlyEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/anyoutcomes(matching:)-jdg8",
                        "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/anyoutcomes(matching:)-4bn93",
                "title" : "func anyOutcomes(matching: OCKOutcomeQuery) -> CareStoreQueryResults<OCKAnyOutcome>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcome(query:)",
                "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery) async throws -> OCKAnyOutcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcome(query:callbackqueue:completion:)-7v674",
                        "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcome(query:callbackqueue:completion:)-17jly",
                "title" : "func fetchAnyOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyOutcome>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcomes(query:)",
                "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery) async throws -> [OCKAnyOutcome]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcomes(query:callbackqueue:completion:)-5zsum",
                        "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore\/fetchanyoutcomes(query:callbackqueue:completion:)-30bjn",
                "title" : "func fetchAnyOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyOutcome]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlyoutcomestore",
            "title" : "OCKAnyReadOnlyOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/anypatients(matching:)-1cvvv",
                        "title" : "func anyPatients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKAnyPatient>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/anypatients(matching:)-2qi38",
                "title" : "func anyPatients(matching: OCKPatientQuery) -> CareStoreQueryResults<OCKAnyPatient>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatient(withid:)",
                "title" : "func fetchAnyPatient(withID: String) async throws -> OCKAnyPatient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatient(withid:callbackqueue:completion:)-30a0e",
                        "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatient(withid:callbackqueue:completion:)-4hg58",
                "title" : "func fetchAnyPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyPatient>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatients(query:)",
                "title" : "func fetchAnyPatients(query: OCKPatientQuery) async throws -> [OCKAnyPatient]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatients(query:callbackqueue:completion:)-5nh25",
                        "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore\/fetchanypatients(query:callbackqueue:completion:)-59q5b",
                "title" : "func fetchAnyPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyPatient]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlypatientstore",
            "title" : "OCKAnyReadOnlyPatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/anytasks(matching:)-9ni9s",
                        "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/anytasks(matching:)-14w9p",
                "title" : "func anyTasks(matching: OCKTaskQuery) -> CareStoreQueryResults<OCKAnyTask>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytask(withid:)",
                "title" : "func fetchAnyTask(withID: String) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytask(withid:callbackqueue:completion:)-6gxsy",
                        "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytask(withid:callbackqueue:completion:)-60dim",
                "title" : "func fetchAnyTask(withID: String, callbackQueue: DispatchQueue, completion: (Result<OCKAnyTask, OCKStoreError>) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytasks(query:)",
                "title" : "func fetchAnyTasks(query: OCKTaskQuery) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytasks(query:callbackqueue:completion:)-7ayuv",
                        "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyReadOnlyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore\/fetchanytasks(query:callbackqueue:completion:)-3if8p",
                "title" : "func fetchAnyTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyreadonlytaskstore",
            "title" : "OCKAnyReadOnlyTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyresettablestore\/reset()",
                "title" : "func reset() throws",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyresettablestore",
            "title" : "OCKAnyResettableStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/impactsadherence",
                "title" : "var impactsAdherence: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/schedule",
                "title" : "var schedule: OCKSchedule",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytask\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanytask",
            "title" : "OCKAnyTask",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytask(_:)",
                "title" : "func addAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytask(_:callbackqueue:completion:)-1xk92",
                        "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytask(_:callbackqueue:completion:)-37cfz",
                "title" : "func addAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: ((Result<OCKAnyTask, OCKStoreError>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytasks(_:)",
                "title" : "func addAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytasks(_:callbackqueue:completion:)-4ffz1",
                        "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/addanytasks(_:callbackqueue:completion:)-2z3ae",
                "title" : "func addAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytask(_:)",
                "title" : "func deleteAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytask(_:callbackqueue:completion:)-2gxka",
                        "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytask(_:callbackqueue:completion:)-6i5s0",
                "title" : "func deleteAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: ((Result<OCKAnyTask, OCKStoreError>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytasks(_:)",
                "title" : "func deleteAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytasks(_:callbackqueue:completion:)-4ug2f",
                        "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/deleteanytasks(_:callbackqueue:completion:)-9rz4z",
                "title" : "func deleteAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytask(_:)",
                "title" : "func updateAnyTask(OCKAnyTask) async throws -> OCKAnyTask",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytask(_:callbackqueue:completion:)-6tcpx",
                        "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: OCKResultClosure<OCKAnyTask>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytask(_:callbackqueue:completion:)-2uvf7",
                "title" : "func updateAnyTask(OCKAnyTask, callbackQueue: DispatchQueue, completion: ((Result<OCKAnyTask, OCKStoreError>) -> Void)?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytasks(_:)",
                "title" : "func updateAnyTasks([OCKAnyTask]) async throws -> [OCKAnyTask]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytasks(_:callbackqueue:completion:)-8eovb",
                        "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKAnyTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanytaskstore\/updateanytasks(_:callbackqueue:completion:)-9avik",
                "title" : "func updateAnyTasks([OCKAnyTask], callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKAnyTask]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanytaskstore",
            "title" : "OCKAnyTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyversionabletask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyversionabletask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyversionabletask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyversionabletask",
            "title" : "OCKAnyVersionableTask",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplan(_:)",
                "title" : "func addCarePlan(Plan) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplan(_:callbackqueue:completion:)-9x7bz",
                        "title" : "func addCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplan(_:callbackqueue:completion:)-83d6",
                "title" : "func addCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplans(_:)",
                "title" : "func addCarePlans([Plan]) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/addcareplans(_:callbackqueue:completion:)",
                "title" : "func addCarePlans([Plan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplan(_:)",
                "title" : "func deleteCarePlan(Plan) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplan(_:callbackqueue:completion:)-8xh5w",
                        "title" : "func deleteCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplan(_:callbackqueue:completion:)-2qmea",
                "title" : "func deleteCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplans(_:)",
                "title" : "func deleteCarePlans([Plan]) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/deletecareplans(_:callbackqueue:completion:)",
                "title" : "func deleteCarePlans([Plan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplan(_:)",
                "title" : "func updateCarePlan(Plan) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplan(_:callbackqueue:completion:)-3i8lp",
                        "title" : "func updateCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplan(_:callbackqueue:completion:)-8zwct",
                "title" : "func updateCarePlan(Plan, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplans(_:)",
                "title" : "func updateCarePlans([Plan]) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanstore\/updatecareplans(_:callbackqueue:completion:)",
                "title" : "func updateCarePlans([Plan], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplanstore",
            "title" : "OCKCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontact(_:)",
                "title" : "func addContact(Contact) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontact(_:callbackqueue:completion:)-34lme",
                        "title" : "func addContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontact(_:callbackqueue:completion:)-4ol1p",
                "title" : "func addContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontacts(_:)",
                "title" : "func addContacts([Contact]) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/addcontacts(_:callbackqueue:completion:)",
                "title" : "func addContacts([Contact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontact(_:)",
                "title" : "func deleteContact(Contact) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontact(_:callbackqueue:completion:)-v7hh",
                        "title" : "func deleteContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontact(_:callbackqueue:completion:)-1m7m5",
                "title" : "func deleteContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontacts(_:)",
                "title" : "func deleteContacts([Contact]) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/deletecontacts(_:callbackqueue:completion:)",
                "title" : "func deleteContacts([Contact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontact(_:)",
                "title" : "func updateContact(Contact) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontact(_:callbackqueue:completion:)-1bfxe",
                        "title" : "func updateContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontact(_:callbackqueue:completion:)-4pk6a",
                "title" : "func updateContact(Contact, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontacts(_:)",
                "title" : "func updateContacts([Contact]) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactstore\/updatecontacts(_:callbackqueue:completion:)",
                "title" : "func updateContacts([Contact], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactstore",
            "title" : "OCKContactStore",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockeventstore",
            "title" : "OCKEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcome(_:)",
                "title" : "func addOutcome(Outcome) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcome(_:callbackqueue:completion:)-sy1c",
                        "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcome(_:callbackqueue:completion:)-2ul82",
                "title" : "func addOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcomes(_:)",
                "title" : "func addOutcomes([Outcome]) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/addoutcomes(_:callbackqueue:completion:)",
                "title" : "func addOutcomes([Outcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcome(_:)",
                "title" : "func deleteOutcome(Outcome) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcome(_:callbackqueue:completion:)-5zw45",
                        "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcome(_:callbackqueue:completion:)-8tvje",
                "title" : "func deleteOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcomes(_:)",
                "title" : "func deleteOutcomes([Outcome]) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/deleteoutcomes(_:callbackqueue:completion:)",
                "title" : "func deleteOutcomes([Outcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcome(_:)",
                "title" : "func updateOutcome(Outcome) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcome(_:callbackqueue:completion:)-437j2",
                        "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcome(_:callbackqueue:completion:)-1uub8",
                "title" : "func updateOutcome(Outcome, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcomes(_:)",
                "title" : "func updateOutcomes([Outcome]) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomestore\/updateoutcomes(_:callbackqueue:completion:)",
                "title" : "func updateOutcomes([Outcome], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomestore",
            "title" : "OCKOutcomeStore",
            "type" : "protocol"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockoutcomevalueunderlyingtype",
            "title" : "OCKOutcomeValueUnderlyingType",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatient(_:)",
                "title" : "func addPatient(Patient) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatient(_:callbackqueue:completion:)-25zds",
                        "title" : "func addPatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatient(_:callbackqueue:completion:)-6aoyv",
                "title" : "func addPatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatients(_:)",
                "title" : "func addPatients([Patient]) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/addpatients(_:callbackqueue:completion:)",
                "title" : "func addPatients([Patient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatient(_:)",
                "title" : "func deletePatient(Patient) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatient(_:callbackqueue:completion:)-7fglq",
                        "title" : "func deletePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatient(_:callbackqueue:completion:)-1zba2",
                "title" : "func deletePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatients(_:)",
                "title" : "func deletePatients([Patient]) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/deletepatients(_:callbackqueue:completion:)",
                "title" : "func deletePatients([Patient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatient(_:)",
                "title" : "func updatePatient(Patient) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatient(_:callbackqueue:completion:)-194d",
                        "title" : "func updatePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKPatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatient(_:callbackqueue:completion:)-pln1",
                "title" : "func updatePatient(Patient, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatients(_:)",
                "title" : "func updatePatients([Patient]) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientstore\/updatepatients(_:callbackqueue:completion:)",
                "title" : "func updatePatients([Patient], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatientstore",
            "title" : "OCKPatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/events",
                "title" : "Events",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/events(matching:)-5nis3",
                        "title" : "func events(matching: OCKEventQuery) -> CareStoreQueryResults<Event>",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/events(matching:)-spn",
                "title" : "func events(matching: OCKEventQuery) -> Events",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevent(fortask:occurrence:)",
                "title" : "func fetchEvent(forTask: Task, occurrence: Int) async throws -> Event",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)-45rkb",
                        "title" : "func fetchEvent(forTask: Self.Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevent(fortask:occurrence:callbackqueue:completion:)-4v8pa",
                "title" : "func fetchEvent(forTask: Task, occurrence: Int, callbackQueue: DispatchQueue, completion: OCKResultClosure<Event>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevents(query:)",
                "title" : "func fetchEvents(query: OCKEventQuery) async throws -> [Event]",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevents(query:callbackqueue:completion:)-6pfk7",
                        "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[OCKEvent<Task, Outcome>]>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadOnlyEventStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/fetchevents(query:callbackqueue:completion:)-x40u",
                "title" : "func fetchEvents(query: OCKEventQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Event]>)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore\/event",
                "title" : "OCKReadOnlyEventStore.Event",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadonlyeventstore",
            "title" : "OCKReadOnlyEventStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/plan",
                "title" : "Plan",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/plans",
                "title" : "Plans",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/careplans(matching:)",
                "title" : "func carePlans(matching: OCKCarePlanQuery) -> Plans",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplan(withid:)",
                "title" : "func fetchCarePlan(withID: String) async throws -> Plan",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplan(withid:callbackqueue:completion:)-63r0",
                        "title" : "func fetchCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableCarePlanStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplan(withid:callbackqueue:completion:)-3an8l",
                "title" : "func fetchCarePlan(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Plan>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplans(query:)",
                "title" : "func fetchCarePlans(query: OCKCarePlanQuery) async throws -> [Plan]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore\/fetchcareplans(query:callbackqueue:completion:)",
                "title" : "func fetchCarePlans(query: OCKCarePlanQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Plan]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadablecareplanstore",
            "title" : "OCKReadableCarePlanStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/contact",
                "title" : "Contact",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/contacts",
                "title" : "Contacts",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/contacts(matching:)",
                "title" : "func contacts(matching: OCKContactQuery) -> Contacts",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontact(withid:)",
                "title" : "func fetchContact(withID: String) async throws -> Contact",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontact(withid:callbackqueue:completion:)-1leam",
                        "title" : "func fetchContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableContactStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontact(withid:callbackqueue:completion:)-4pfxk",
                "title" : "func fetchContact(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Contact>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontacts(query:)",
                "title" : "func fetchContacts(query: OCKContactQuery) async throws -> [Contact]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablecontactstore\/fetchcontacts(query:callbackqueue:completion:)",
                "title" : "func fetchContacts(query: OCKContactQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Contact]>)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadablecontactstore",
            "title" : "OCKReadableContactStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/outcome",
                "title" : "Outcome",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/outcomes",
                "title" : "Outcomes",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcome(query:)",
                "title" : "func fetchOutcome(query: OCKOutcomeQuery) async throws -> Outcome",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcome(query:callbackqueue:completion:)-2dhk6",
                        "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableOutcomeStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcome(query:callbackqueue:completion:)-3kfq8",
                "title" : "func fetchOutcome(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<Outcome>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcomes(query:)",
                "title" : "func fetchOutcomes(query: OCKOutcomeQuery) async throws -> [Outcome]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/fetchoutcomes(query:callbackqueue:completion:)",
                "title" : "func fetchOutcomes(query: OCKOutcomeQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Outcome]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore\/outcomes(matching:)",
                "title" : "func outcomes(matching: OCKOutcomeQuery) -> Outcomes",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadableoutcomestore",
            "title" : "OCKReadableOutcomeStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/patient",
                "title" : "Patient",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/patients",
                "title" : "Patients",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatient(withid:)",
                "title" : "func fetchPatient(withID: String) async throws -> Patient",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatient(withid:callbackqueue:completion:)-2vufs",
                        "title" : "func fetchPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadablePatientStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatient(withid:callbackqueue:completion:)-2k7xi",
                "title" : "func fetchPatient(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Patient>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatients(query:)",
                "title" : "func fetchPatients(query: OCKPatientQuery) async throws -> [Patient]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/fetchpatients(query:callbackqueue:completion:)",
                "title" : "func fetchPatients(query: OCKPatientQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Patient]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadablepatientstore\/patients(matching:)",
                "title" : "func patients(matching: OCKPatientQuery) -> Patients",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadablepatientstore",
            "title" : "OCKReadablePatientStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Associated Types",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/task",
                "title" : "Task",
                "type" : "associatedtype"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/tasks",
                "title" : "Tasks",
                "type" : "associatedtype"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtask(withid:)",
                "title" : "func fetchTask(withID: String) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtask(withid:callbackqueue:completion:)-89geb",
                        "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKReadableTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtask(withid:callbackqueue:completion:)-5wyob",
                "title" : "func fetchTask(withID: String, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtasks(query:)",
                "title" : "func fetchTasks(query: OCKTaskQuery) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/fetchtasks(query:callbackqueue:completion:)",
                "title" : "func fetchTasks(query: OCKTaskQuery, callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockreadabletaskstore\/tasks(matching:)",
                "title" : "func tasks(matching: OCKTaskQuery) -> Tasks",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockreadabletaskstore",
            "title" : "OCKReadableTaskStore",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/automaticallysynchronizes",
                "title" : "var automaticallySynchronizes: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/delegate",
                "title" : "var delegate: OCKRemoteSynchronizationDelegate?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/chooseconflictresolution(conflicts:completion:)",
                "title" : "func chooseConflictResolution(conflicts: [OCKEntity], completion: OCKResultClosure<OCKEntity>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/pullrevisions(since:mergerevision:completion:)",
                "title" : "func pullRevisions(since: OCKRevisionRecord.KnowledgeVector, mergeRevision: (OCKRevisionRecord) -> Void, completion: (Error?) -> Void)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizable\/pushrevisions(devicerevisions:deviceknowledge:completion:)",
                "title" : "func pushRevisions(deviceRevisions: [OCKRevisionRecord], deviceKnowledge: OCKRevisionRecord.KnowledgeVector, completion: (Error?) -> Void)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockremotesynchronizable",
            "title" : "OCKRemoteSynchronizable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizationdelegate\/didrequestsynchronization(_:)",
                "title" : "func didRequestSynchronization(OCKRemoteSynchronizable)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockremotesynchronizationdelegate\/remote(_:didupdateprogress:)",
                "title" : "func remote(OCKRemoteSynchronizable, didUpdateProgress: Double)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockremotesynchronizationdelegate",
            "title" : "OCKRemoteSynchronizationDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtask(_:)",
                "title" : "func addTask(Task) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtask(_:callbackqueue:completion:)-9qer7",
                        "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtask(_:callbackqueue:completion:)-hgtj",
                "title" : "func addTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtasks(_:)",
                "title" : "func addTasks([Task]) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/addtasks(_:callbackqueue:completion:)",
                "title" : "func addTasks([Task], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetask(_:)",
                "title" : "func deleteTask(Task) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetask(_:callbackqueue:completion:)-1r1pf",
                        "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetask(_:callbackqueue:completion:)-135nm",
                "title" : "func deleteTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetasks(_:)",
                "title" : "func deleteTasks([Task]) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/deletetasks(_:callbackqueue:completion:)",
                "title" : "func deleteTasks([Task], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetask(_:)",
                "title" : "func updateTask(Task) async throws -> Task",
                "type" : "method"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetask(_:callbackqueue:completion:)-s4q9",
                        "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKTaskStore Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetask(_:callbackqueue:completion:)-8xfom",
                "title" : "func updateTask(Task, callbackQueue: DispatchQueue, completion: OCKResultClosure<Task>?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetasks(_:)",
                "title" : "func updateTasks([Task]) async throws -> [Task]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskstore\/updatetasks(_:callbackqueue:completion:)",
                "title" : "func updateTasks([Task], callbackQueue: DispatchQueue, completion: OCKResultClosure<[Task]>?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktaskstore",
            "title" : "OCKTaskStore",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/init(combining:)",
                "title" : "init(combining: [CareTaskProgress])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/init(events:by:)",
                "title" : "init<Progress>(events: [OCKAnyEvent], by: CareTaskProgressStrategy<Progress>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/fractioncompleted",
                "title" : "let fractionCompleted: Double",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/iscompleted",
                    "title" : "var isCompleted: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/caretaskprogress-implementations",
                "title" : "CareTaskProgress Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/aggregatedcaretaskprogress",
            "title" : "AggregatedCareTaskProgress",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/init(iscompleted:)",
                "title" : "init(isCompleted: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/fractioncompleted",
                "title" : "var fractionCompleted: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/iscompleted",
                "title" : "var isCompleted: Bool",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/binarycaretaskprogress\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/binarycaretaskprogress",
            "title" : "BinaryCareTaskProgress",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/carestorequeryresults\/makeasynciterator()",
                "title" : "func makeAsyncIterator() -> CareStoreQueryResults<Result>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/carestorequeryresults\/next()",
                "title" : "func next() async throws -> Element?",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/carestorequeryresults\/element",
                "title" : "CareStoreQueryResults.Element",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/adjacentpairs()",
                    "title" : "func adjacentPairs() -> AsyncAdjacentPairsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(by:)",
                    "title" : "func chunked(by: (Self.Element, Self.Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, [Self.Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(by:into:)-2coro",
                    "title" : "func chunked<C, Collected>(by: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(by:into:)-7jb7o",
                    "title" : "func chunked<Signal, Collected>(by: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(into:by:)",
                    "title" : "func chunked<Collected>(into: Collected.Type, by: (Self.Element, Self.Element) -> Bool) -> AsyncChunkedByGroupSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(into:on:)",
                    "title" : "func chunked<Subject, Collected>(into: Collected.Type, on: (Self.Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunked(on:)",
                    "title" : "func chunked<Subject>(on: (Self.Element) -> Subject) -> AsyncChunkedOnProjectionSequence<Self, Subject, [Self.Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:)",
                    "title" : "func chunks(ofCount: Int) -> AsyncChunksOfCountSequence<Self, [Self.Element]>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:into:)",
                    "title" : "func chunks<Collected>(ofCount: Int, into: Collected.Type) -> AsyncChunksOfCountSequence<Self, Collected>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:or:)-1o4f5",
                    "title" : "func chunks<C>(ofCount: Int, or: AsyncTimerSequence<C>) -> AsyncChunksOfCountOrSignalSequence<Self, [Self.Element], AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:or:)-778x6",
                    "title" : "func chunks<Signal>(ofCount: Int, or: Signal) -> AsyncChunksOfCountOrSignalSequence<Self, [Self.Element], Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:or:into:)-4mz5s",
                    "title" : "func chunks<C, Collected>(ofCount: Int, or: AsyncTimerSequence<C>, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, AsyncTimerSequence<C>>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/chunks(ofcount:or:into:)-4nih4",
                    "title" : "func chunks<Signal, Collected>(ofCount: Int, or: Signal, into: Collected.Type) -> AsyncChunksOfCountOrSignalSequence<Self, Collected, Signal>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/compactmap(_:)-6r0en",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/compactmap(_:)-6tp8p",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/compacted()",
                    "title" : "func compacted<Unwrapped>() -> AsyncCompactedSequence<Self, Unwrapped>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/contains(_:)",
                    "title" : "func contains(Self.Element) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/debounce(for:tolerance:)",
                    "title" : "func debounce(for: Duration, tolerance: Duration?) -> AsyncDebounceSequence<Self, ContinuousClock>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/debounce(for:tolerance:clock:)",
                    "title" : "func debounce<C>(for: C.Instant.Duration, tolerance: C.Instant.Duration?, clock: C) -> AsyncDebounceSequence<Self, C>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> AsyncDropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/filter(_:)",
                    "title" : "func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/first(where:)",
                    "title" : "func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/flatmap(_:)-4hy5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/flatmap(_:)-6zdmg",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/interspersed(every:with:)-1f3lh",
                    "title" : "func interspersed(every: Int, with: () -> Self.Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/interspersed(every:with:)-1l1dd",
                    "title" : "func interspersed(every: Int, with: () async throws -> Self.Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/interspersed(every:with:)-1u75h",
                    "title" : "func interspersed(every: Int, with: () async -> Self.Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/interspersed(every:with:)-4e780",
                    "title" : "func interspersed(every: Int, with: Self.Element) -> AsyncInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/interspersed(every:with:)-zsyf",
                    "title" : "func interspersed(every: Int, with: () throws -> Self.Element) -> AsyncThrowingInterspersedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/map(_:)-1vw2a",
                    "title" : "func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/map(_:)-qvoo",
                    "title" : "func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/prefix(_:)",
                    "title" : "func prefix(Int) -> AsyncPrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(_:)",
                    "title" : "func reductions((Self.Element, Self.Element) async -> Self.Element) -> AsyncInclusiveReductionsSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(_:_:)-6fjt1",
                    "title" : "func reductions<Result>(Result, (Result, Self.Element) async throws -> Result) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(_:_:)-9aq8y",
                    "title" : "func reductions<Result>(Result, (Result, Self.Element) async -> Result) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(into:_:)-5g3f2",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Self.Element) async -> Void) -> AsyncExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/reductions(into:_:)-6alvo",
                    "title" : "func reductions<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) -> AsyncThrowingExclusiveReductionsSequence<Self, Result>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/removeduplicates()",
                    "title" : "func removeDuplicates() -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/carestorequeryresults\/removeduplicates(by:)",
                    "title" : "func removeDuplicates(by: (Self.Element, Self.Element) async -> Bool) -> AsyncRemoveDuplicatesSequence<Self>",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/carestorequeryresults\/asyncsequence-implementations",
                "title" : "AsyncSequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/carestorequeryresults",
            "title" : "CareStoreQueryResults",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/init(computeprogress:)",
                "title" : "init(computeProgress: (OCKAnyEvent) -> Progress)",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/checkingoutcomeexists",
                "title" : "static var checkingOutcomeExists: CareTaskProgressStrategy<BinaryCareTaskProgress>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/summingoutcomevalues",
                "title" : "static var summingOutcomeValues: CareTaskProgressStrategy<LinearCareTaskProgress>",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/accumulabledoublevalue(for:)",
                "title" : "static func accumulableDoubleValue(for: OCKOutcomeValue) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/computeprogressbyaveragingoutcomevalues(for:)",
                "title" : "static func computeProgressByAveragingOutcomeValues(for: OCKAnyEvent) -> CustomLinearCareTaskProgress",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/computeprogressbymedianoutcomevalues(for:)",
                "title" : "static func computeProgressByMedianOutcomeValues(for: OCKAnyEvent) -> CustomLinearCareTaskProgress",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/computeprogressbystreakoutcomevalues(for:)",
                "title" : "static func computeProgressByStreakOutcomeValues(for: OCKAnyEvent) -> CustomLinearCareTaskProgress",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy\/sum(_:_:)",
                "title" : "static func sum<T>(T?, T?) -> T?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/caretaskprogressstrategy",
            "title" : "CareTaskProgressStrategy",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/init(value:goal:)",
                "title" : "init(value: Double, goal: Double?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/fractioncompleted",
                "title" : "var fractionCompleted: Double",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/goal",
                "title" : "var goal: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/value",
                "title" : "var value: Double",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/iscompleted",
                    "title" : "var isCompleted: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/caretaskprogress-implementations",
                "title" : "CareTaskProgress Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/linearcaretaskprogress\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/linearcaretaskprogress",
            "title" : "LinearCareTaskProgress",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/init(taskids:dateinterval:aggregator:)",
                "title" : "init(taskIDs: [String], dateInterval: DateInterval, aggregator: OCKAdherenceAggregator)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/init(taskids:dateinterval:computeprogress:)",
                "title" : "init(taskIDs: [String], dateInterval: DateInterval, computeProgress: (OCKAnyEvent) -> CareTaskProgress)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherencequery\/taskids",
                "title" : "var taskIDs: [String]",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockadherencequery",
            "title" : "OCKAdherenceQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/init(task:outcome:scheduleevent:)",
                "title" : "init(task: OCKAnyTask, outcome: OCKAnyOutcome?, scheduleEvent: OCKScheduleEvent)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/asset",
                "title" : "var asset: UIImage?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/detail",
                "title" : "var detail: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/detailtext",
                "title" : "var detailText: Text?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/id",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/instructionstext",
                "title" : "var instructionsText: Text?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/iscomplete",
                "title" : "var isComplete: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcome",
                "title" : "let outcome: OCKAnyOutcome?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcomefirstvalue",
                "title" : "var outcomeFirstValue: OCKOutcomeValue?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcomevaluedata",
                "title" : "var outcomeValueData: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcomevaluedate",
                "title" : "var outcomeValueDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcomevaluedouble",
                "title" : "var outcomeValueDouble: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcomevalueint",
                "title" : "var outcomeValueInt: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcomevaluestring",
                "title" : "var outcomeValueString: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/outcomevalues",
                "title" : "var outcomeValues: [OCKOutcomeValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/scheduleevent",
                "title" : "let scheduleEvent: OCKScheduleEvent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/sortedoutcome",
                "title" : "var sortedOutcome: OCKAnyOutcome?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/task",
                "title" : "let task: OCKAnyTask",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/answer(kind:)",
                "title" : "func answer(kind: String) -> Double",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/computeprogress(by:)",
                "title" : "func computeProgress<Progress>(by: CareTaskProgressStrategy<Progress>) -> Progress",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/image()",
                "title" : "func image() -> Image?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/prependkindtovalue()",
                "title" : "func prependKindToValue() -> OCKAnyEvent",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockanyevent\/sortedoutcomevaluesbyrecency()",
                "title" : "func sortedOutcomeValuesByRecency() -> OCKAnyEvent",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/'...(_:)-3zcie",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/'...(_:)-9o7en",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/_(_:_:)-25dut",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/_(_:_:)-p0uy",
                    "title" : "static func < (OCKAnyEvent, OCKAnyEvent) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/_=(_:_:)-4xlrq",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/_=(_:_:)-9idqd",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyevent\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyevent\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockanyevent\/==(_:_:)",
                    "title" : "static func == (OCKAnyEvent, OCKAnyEvent) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockanyevent\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockanyevent",
            "title" : "OCKAnyEvent",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/init(id:title:patientuuid:)",
                "title" : "init(id: String, title: String, patientUUID: UUID?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/patientuuid",
                "title" : "var patientUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplan\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyPatient) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplan\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplan\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplan",
            "title" : "OCKCarePlan",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/patientids",
                "title" : "var patientIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/patientremoteids",
                "title" : "var patientRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/patientuuids",
                "title" : "var patientUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/title(ascending:)",
                    "title" : "case title(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/sortdescriptor",
                "title" : "OCKCarePlanQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcareplanquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcareplanquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcareplanquery",
            "title" : "OCKCarePlanQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/init(id:givenname:familyname:careplanuuid:)",
                "title" : "init(id: String, givenName: String, familyName: String, carePlanUUID: UUID?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/init(id:name:careplanuuid:)",
                "title" : "init(id: String, name: PersonNameComponents, carePlanUUID: UUID?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/address",
                "title" : "var address: OCKPostalAddress?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/category",
                "title" : "var category: OCKContactCategory?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/emailaddresses",
                "title" : "var emailAddresses: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/messagingnumbers",
                "title" : "var messagingNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/organization",
                "title" : "var organization: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/othercontactinfo",
                "title" : "var otherContactInfo: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/phonenumbers",
                "title" : "var phoneNumbers: [OCKLabeledValue]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/role",
                "title" : "var role: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontact\/isequal(to:)",
                "title" : "func isEqual(to: OCKAnyContact) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontact\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontact\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontact",
            "title" : "OCKContact",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/careplanids",
                "title" : "var carePlanIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/careplanremoteids",
                "title" : "var carePlanRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/careplanuuids",
                "title" : "var carePlanUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/familyname(ascending:)",
                    "title" : "case familyName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/givenname(ascending:)",
                    "title" : "case givenName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/sortdescriptor",
                "title" : "OCKContactQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactquery",
            "title" : "OCKContactQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/init(task:outcome:scheduleevent:)",
                "title" : "init(task: Task, outcome: Outcome?, scheduleEvent: OCKScheduleEvent)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/id",
                "title" : "let id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/outcome",
                "title" : "var outcome: Outcome?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/scheduleevent",
                "title" : "let scheduleEvent: OCKScheduleEvent",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/task",
                "title" : "let task: Task",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockevent\/computeprogress(by:)",
                "title" : "func computeProgress<Progress>(by: CareTaskProgressStrategy<Progress>) -> Progress",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockevent\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockevent\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockevent",
            "title" : "OCKEvent",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/taskgroupidentifiers",
                "title" : "var taskGroupIdentifiers: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/taskids",
                "title" : "var taskIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventquery\/tasktags",
                "title" : "var taskTags: [String]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockeventquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockeventquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockeventquery",
            "title" : "OCKEventQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/init(quantityidentifier:quantitytype:unit:)",
                "title" : "init(quantityIdentifier: HKQuantityTypeIdentifier, quantityType: QuantityType, unit: HKUnit)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantityidentifier",
                "title" : "var quantityIdentifier: HKQuantityTypeIdentifier",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.property",
                "title" : "var quantityType: QuantityType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/unit",
                "title" : "var unit: HKUnit",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/cumulative",
                    "title" : "case cumulative",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/discrete",
                    "title" : "case discrete",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/quantitytype-swift.enum",
                "title" : "OCKHealthKitLinkage.QuantityType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkitlinkage",
            "title" : "OCKHealthKitLinkage",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/init(taskuuid:taskoccurrenceindex:values:)",
                "title" : "init(taskUUID: UUID, taskOccurrenceIndex: Int, values: [OCKOutcomeValue])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/isownedbyapp",
                "title" : "let isOwnedByApp: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/taskuuid",
                "title" : "var taskUUID: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkitoutcome",
            "title" : "OCKHealthKitOutcome",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/init(id:title:careplanuuid:schedule:healthkitlinkage:)",
                "title" : "init(id: String, title: String?, carePlanUUID: UUID?, schedule: OCKSchedule, healthKitLinkage: OCKHealthKitLinkage)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/healthkitlinkage",
                "title" : "var healthKitLinkage: OCKHealthKitLinkage",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/impactsadherence",
                "title" : "var impactsAdherence: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/schedule",
                "title" : "var schedule: OCKSchedule",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockhealthkittask\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockhealthkittask\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockhealthkittask",
            "title" : "OCKHealthKitTask",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/init(label:value:)",
                "title" : "init(label: String, value: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/label",
                "title" : "var label: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/value",
                "title" : "var value: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocklabeledvalue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocklabeledvalue",
            "title" : "OCKLabeledValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocklog\/isenabled",
                "title" : "static var isEnabled: Bool",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocklog",
            "title" : "OCKLog",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/init(author:title:content:)",
                "title" : "init(author: String?, title: String?, content: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/author",
                "title" : "var author: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/content",
                "title" : "var content: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocknote\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocknote\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocknote\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocknote",
            "title" : "OCKNote",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/init(taskuuid:taskoccurrenceindex:values:)",
                "title" : "init(taskUUID: UUID, taskOccurrenceIndex: Int, values: [OCKOutcomeValue])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/taskoccurrenceindex",
                "title" : "var taskOccurrenceIndex: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/taskuuid",
                "title" : "var taskUUID: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/values",
                "title" : "var values: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcome\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyTask) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcome\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcome\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcome",
            "title" : "OCKOutcome",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/taskids",
                "title" : "var taskIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/taskremoteids",
                "title" : "var taskRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/taskuuids",
                "title" : "var taskUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomequery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomequery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomequery",
            "title" : "OCKOutcomeQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/==(_:_:)",
                "title" : "static func == (OCKOutcomeValue, OCKOutcomeValue) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/init(_:units:)",
                "title" : "init(OCKOutcomeValueUnderlyingType, units: String?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/booleanvalue",
                "title" : "var booleanValue: Bool?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/createddate",
                "title" : "var createdDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/datavalue",
                "title" : "var dataValue: Data?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/datevalue",
                "title" : "var dateValue: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/doublevalue",
                "title" : "var doubleValue: Double?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/integervalue",
                "title" : "var integerValue: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/kind",
                "title" : "var kind: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/numbervalue",
                "title" : "var numberValue: NSNumber?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/stringvalue",
                "title" : "var stringValue: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/type",
                "title" : "var type: OCKOutcomeValueType",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/units",
                "title" : "var units: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/value",
                "title" : "var value: OCKOutcomeValueUnderlyingType",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/id",
                    "title" : "var id: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevalue\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomevalue",
            "title" : "OCKOutcomeValue",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/init(id:givenname:familyname:)",
                "title" : "init(id: String, givenName: String, familyName: String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/init(id:name:)",
                "title" : "init(id: String, name: PersonNameComponents)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/age",
                "title" : "var age: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/allergies",
                "title" : "var allergies: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/birthday",
                "title" : "var birthday: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/name",
                "title" : "var name: PersonNameComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/sex",
                "title" : "var sex: OCKBiologicalSex?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatient\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatient\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatient\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatient",
            "title" : "OCKPatient",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/familyname(ascending:)",
                    "title" : "case familyName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/givenname(ascending:)",
                    "title" : "case givenName(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/groupidentifier(ascending:)",
                    "title" : "case groupIdentifier(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/sortdescriptor",
                "title" : "OCKPatientQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockpatientquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockpatientquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockpatientquery",
            "title" : "OCKPatientQuery",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_(_:_:)-4glug",
                    "title" : "static func < (OCKRevisionRecord.KnowledgeVector, OCKRevisionRecord.KnowledgeVector) -> Bool",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/init(_:)",
                    "title" : "init([UUID : Int])",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/processes",
                    "title" : "var processes: [UUID : Int]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/uuids",
                    "title" : "var uuids: [UUID]",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/clock(for:)",
                    "title" : "func clock(for: UUID) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/increment(clockfor:)",
                    "title" : "func increment(clockFor: UUID)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/merge(with:)",
                    "title" : "func merge(with: KnowledgeVector)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:)-4icmo",
                        "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:)-6ql4w",
                        "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'...(_:_:)",
                        "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'.._(_:)",
                        "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/'.._(_:_:)",
                        "title" : "static func ..< (Self, Self) -> Range<Self>",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_(_:_:)-8yqa5",
                        "title" : "static func > (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_=(_:_:)-1a24z",
                        "title" : "static func >= (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/_=(_:_:)-h0ff",
                        "title" : "static func <= (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/comparable-implementations",
                    "title" : "Comparable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.struct",
                "title" : "OCKRevisionRecord.KnowledgeVector",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/init(entities:knowledgevector:)",
                "title" : "init(entities: [OCKEntity], knowledgeVector: KnowledgeVector)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/entities",
                "title" : "let entities: [OCKEntity]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/knowledgevector-swift.property",
                "title" : "let knowledgeVector: KnowledgeVector",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockrevisionrecord\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockrevisionrecord",
            "title" : "OCKRevisionRecord",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/init(composing:)-35hze",
                "title" : "init(composing: [OCKScheduleElement])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/init(composing:)-6h2mg",
                "title" : "init(composing: [OCKSchedule])",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/elements",
                "title" : "let elements: [OCKScheduleElement]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/enddate()",
                "title" : "func endDate() -> Date?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/event(foroccurrenceindex:)",
                "title" : "func event(forOccurrenceIndex: Int) -> OCKScheduleEvent?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/events(from:to:)",
                "title" : "func events(from: Date, to: Date) -> [OCKScheduleEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/offset(by:)",
                "title" : "func offset(by: DateComponents) -> OCKSchedule",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/startdate()",
                "title" : "func startDate() -> Date",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/subscript(_:)",
                "title" : "subscript(Int) -> OCKScheduleEvent",
                "type" : "subscript"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/dailyattime(hour:minutes:start:end:text:duration:targetvalues:)",
                "title" : "static func dailyAtTime(hour: Int, minutes: Int, start: Date, end: Date?, text: String?, duration: OCKScheduleElement.Duration, targetValues: [OCKOutcomeValue]) -> OCKSchedule",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockschedule\/weeklyattime(weekday:hours:minutes:start:end:targetvalues:text:duration:)",
                "title" : "static func weeklyAtTime(weekday: Int, hours: Int, minutes: Int, start: Date, end: Date?, targetValues: [OCKOutcomeValue], text: String?, duration: OCKScheduleElement.Duration) -> OCKSchedule",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockschedule\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockschedule\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockschedule",
            "title" : "OCKSchedule",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/init(start:end:interval:text:targetvalues:duration:)",
                "title" : "init(start: Date, end: Date?, interval: DateComponents, text: String?, targetValues: [OCKOutcomeValue], duration: Duration)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.property",
                "title" : "var duration: Duration",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/elements",
                "title" : "var elements: [OCKScheduleElement]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/end",
                "title" : "var end: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/interval",
                "title" : "var interval: DateComponents",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/start",
                "title" : "let start: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/targetvalues",
                "title" : "var targetValues: [OCKOutcomeValue]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/text",
                "title" : "var text: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/date(ofoccurrence:)",
                "title" : "func date(ofOccurrence: Int) -> Date?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/events(betweenoccurrenceindex:and:)",
                "title" : "func events(betweenOccurrenceIndex: Int, and: Int) -> [OCKScheduleEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/events(from:to:)",
                "title" : "func events(from: Date, to: Date) -> [OCKScheduleEvent]",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/offset(by:)",
                "title" : "func offset(by: DateComponents) -> OCKScheduleElement",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/subscript(_:)",
                "title" : "subscript(Int) -> OCKScheduleEvent",
                "type" : "subscript"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/allday",
                    "title" : "case allDay",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/seconds(_:)",
                    "title" : "case seconds(Double)",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/init(from:)",
                    "title" : "init(from: Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/encode(to:)",
                    "title" : "func encode(to: Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/hours(_:)",
                    "title" : "static func hours(Double) -> Duration",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/minutes(_:)",
                    "title" : "static func minutes(Double) -> Duration",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/duration-swift.enum",
                "title" : "OCKScheduleElement.Duration",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleelement\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleelement\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockscheduleelement",
            "title" : "OCKScheduleElement",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/element",
                "title" : "var element: OCKScheduleElement",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/end",
                "title" : "var end: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/occurrence",
                "title" : "var occurrence: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/start",
                "title" : "var start: Date",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'...(_:)-29kdj",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'...(_:)-812x3",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/_(_:_:)-60ccs",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/_(_:_:)-9h707",
                    "title" : "static func < (`Self`, `Self`) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/_=(_:_:)-3yvp5",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/_=(_:_:)-9ojc1",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockscheduleevent\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockscheduleevent\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockscheduleevent",
            "title" : "OCKScheduleEvent",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Operators",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_(_:_:)-38m1c",
                "title" : "static func < (OCKSemanticVersion, OCKSemanticVersion) -> Bool",
                "type" : "op"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/init(_:)",
                "title" : "init?(String)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/init(majorversion:minorversion:patchnumber:)",
                "title" : "init(majorVersion: Int, minorVersion: Int, patchNumber: Int)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/description",
                "title" : "var description: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/majorversion",
                "title" : "let majorVersion: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/minorversion",
                "title" : "let minorVersion: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/patchnumber",
                "title" : "let patchNumber: Int",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parse(_:)",
                "title" : "static func parse(String) throws -> OCKSemanticVersion",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/emptystring",
                    "title" : "case emptyString",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/invalidmajorversion",
                    "title" : "case invalidMajorVersion",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/invalidminorversion",
                    "title" : "case invalidMinorVersion",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/invalidpatchversion",
                    "title" : "case invalidPatchVersion",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/toomanyseparators",
                    "title" : "case tooManySeparators",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/localizeddescription",
                        "title" : "var localizedDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror\/error-implementations",
                    "title" : "Error Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/parsingerror",
                "title" : "OCKSemanticVersion.ParsingError",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:)-fzx5",
                    "title" : "static func ... (Self) -> PartialRangeFrom<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:)-h0m2",
                    "title" : "static func ... (Self) -> PartialRangeThrough<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'...(_:_:)",
                    "title" : "static func ... (Self, Self) -> ClosedRange<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'.._(_:)",
                    "title" : "static func ..< (Self) -> PartialRangeUpTo<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/'.._(_:_:)",
                    "title" : "static func ..< (Self, Self) -> Range<Self>",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_(_:_:)-1u2cp",
                    "title" : "static func > (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_=(_:_:)-2fnev",
                    "title" : "static func <= (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/_=(_:_:)-7c29c",
                    "title" : "static func >= (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/comparable-implementations",
                "title" : "Comparable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocksemanticversion\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocksemanticversion\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocksemanticversion",
            "title" : "OCKSemanticVersion",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/init(id:title:careplanuuid:schedule:)",
                "title" : "init(id: String, title: String?, carePlanUUID: UUID?, schedule: OCKSchedule)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/asset",
                "title" : "var asset: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/careplanuuid",
                "title" : "var carePlanUUID: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/createddate",
                "title" : "var createdDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/deleteddate",
                "title" : "var deletedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/effectivedate",
                "title" : "var effectiveDate: Date",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/groupidentifier",
                "title" : "var groupIdentifier: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/id",
                "title" : "var id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/impactsadherence",
                "title" : "var impactsAdherence: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/instructions",
                "title" : "var instructions: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/nextversionuuids",
                "title" : "var nextVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/notes",
                "title" : "var notes: [OCKNote]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/previousversionuuids",
                "title" : "var previousVersionUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/remoteid",
                "title" : "var remoteID: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/schedule",
                "title" : "var schedule: OCKSchedule",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/schemaversion",
                "title" : "var schemaVersion: OCKSemanticVersion?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/source",
                "title" : "var source: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/tags",
                "title" : "var tags: [String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/timezone",
                "title" : "var timezone: TimeZone",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/title",
                "title" : "var title: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/updateddate",
                "title" : "var updatedDate: Date?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/userinfo",
                "title" : "var userInfo: [String : String]?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/uuid",
                "title" : "var uuid: UUID",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktask\/belongs(to:)",
                "title" : "func belongs(to: OCKAnyCarePlan) -> Bool",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktask\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktask\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktask",
            "title" : "OCKTask",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init(dateinterval:)",
                "title" : "init(dateInterval: DateInterval?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init(for:)",
                "title" : "init(for: Date)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/init(id:)",
                "title" : "init(id: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/careplanids",
                "title" : "var carePlanIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/careplanremoteids",
                "title" : "var carePlanRemoteIDs: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/careplanuuids",
                "title" : "var carePlanUUIDs: [UUID]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/dateinterval",
                "title" : "var dateInterval: DateInterval?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/excludestaskswithnoevents",
                "title" : "var excludesTasksWithNoEvents: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/groupidentifiers",
                "title" : "var groupIdentifiers: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/ids",
                "title" : "var ids: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/limit",
                "title" : "var limit: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/offset",
                "title" : "var offset: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/remoteids",
                "title" : "var remoteIDs: [String?]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptors",
                "title" : "var sortDescriptors: [SortDescriptor]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/tags",
                "title" : "var tags: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/uuids",
                "title" : "var uuids: [UUID]",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/effectivedate(ascending:)",
                    "title" : "case effectiveDate(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/groupidentifier(ascending:)",
                    "title" : "case groupIdentifier(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/title(ascending:)",
                    "title" : "case title(ascending: Bool)",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/sortdescriptor",
                "title" : "OCKTaskQuery.SortDescriptor",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ocktaskquery\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ocktaskquery\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ocktaskquery",
            "title" : "OCKTaskQuery",
            "type" : "struct"
          },
          {
            "title" : "Type Aliases",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockanystoreprotocol",
            "title" : "OCKAnyStoreProtocol",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockresultclosure",
            "title" : "OCKResultClosure",
            "type" : "typealias"
          },
          {
            "path" : "\/documentation\/carekitstore\/ockstoreprotocol",
            "title" : "OCKStoreProtocol",
            "type" : "typealias"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherence\/noevents",
                "title" : "case noEvents",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherence\/notasks",
                "title" : "case noTasks",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherence\/progress(_:)",
                "title" : "case progress(Double)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockadherence\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockadherence\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockadherence",
            "title" : "OCKAdherence",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/comparetargetvalues",
                "title" : "case compareTargetValues",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/custom(_:)",
                "title" : "case custom(([OCKAnyEvent]) -> OCKAdherence)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/outcomeexists",
                "title" : "case outcomeExists",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/percentofoutcomevaluesthatexist",
                "title" : "case percentOfOutcomeValuesThatExist",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/percentoftargetvaluesmet",
                "title" : "case percentOfTargetValuesMet",
                "type" : "case"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockadherenceaggregator\/aggregate(events:)",
                "title" : "func aggregate(events: [OCKAnyEvent]) -> OCKAdherence",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockadherenceaggregator",
            "title" : "OCKAdherenceAggregator",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/female",
                "title" : "case female",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/male",
                "title" : "case male",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/other(_:)",
                "title" : "case other(String)",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/init(from:)-1bbpq",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/rawvalue",
                "title" : "var rawValue: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/init(from:)-80psh",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockbiologicalsex\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockbiologicalsex",
            "title" : "OCKBiologicalSex",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/careprovider",
                "title" : "case careProvider",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/friendsandfamily",
                "title" : "case friendsAndFamily",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcontactcategory\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcontactcategory\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcontactcategory",
            "title" : "OCKContactCategory",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/inmemory",
                "title" : "case inMemory",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/ondisk(protection:)",
                "title" : "case onDisk(protection: FileProtectionType)",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockcoredatastoretype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockcoredatastoretype",
            "title" : "OCKCoreDataStoreType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/careplan(_:)",
                "title" : "case carePlan(OCKCarePlan)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/contact(_:)",
                "title" : "case contact(OCKContact)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/healthkittask(_:)",
                "title" : "case healthKitTask(OCKHealthKitTask)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/outcome(_:)",
                "title" : "case outcome(OCKOutcome)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/patient(_:)",
                "title" : "case patient(OCKPatient)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/task(_:)",
                "title" : "case task(OCKTask)",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.property",
                "title" : "var entityType: EntityType",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockentity\/encode(to:)",
                "title" : "func encode(to: Encoder) throws",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/careplan",
                    "title" : "case carePlan",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/contact",
                    "title" : "case contact",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/healthkittask",
                    "title" : "case healthKitTask",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/outcome",
                    "title" : "case outcome",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/patient",
                    "title" : "case patient",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/task",
                    "title" : "case task",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(intvalue:)",
                    "title" : "init?(intValue: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(stringvalue:)",
                    "title" : "init?(stringValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/codingkey-implementations",
                    "title" : "CodingKey Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/init(from:)",
                        "title" : "init(from: any Decoder) throws",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/encode(to:)",
                        "title" : "func encode(to: any Encoder) throws",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockentity\/entitytype-swift.enum",
                "title" : "OCKEntity.EntityType",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockentity\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockentity\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockentity",
            "title" : "OCKEntity",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/countoutcomevalues",
                "title" : "case countOutcomeValues",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/countoutcomes",
                "title" : "case countOutcomes",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/custom(_:)",
                "title" : "case custom(([OCKAnyEvent]) -> Double)",
                "type" : "case"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockeventaggregator\/aggregate(events:)",
                "title" : "func aggregate(events: [OCKAnyEvent]) -> Double",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockeventaggregator",
            "title" : "OCKEventAggregator",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/binary",
                "title" : "case binary",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/boolean",
                "title" : "case boolean",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/date",
                "title" : "case date",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/double",
                "title" : "case double",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/integer",
                "title" : "case integer",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/text",
                "title" : "case text",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/init(rawvalue:)",
                "title" : "init?(rawValue: String)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockoutcomevaluetype",
            "title" : "OCKOutcomeValueType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/addfailed(reason:)",
                "title" : "case addFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/deletefailed(reason:)",
                "title" : "case deleteFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/fetchfailed(reason:)",
                "title" : "case fetchFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/invalidvalue(reason:)",
                "title" : "case invalidValue(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/remotesynchronizationfailed(reason:)",
                "title" : "case remoteSynchronizationFailed(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/timedout(reason:)",
                "title" : "case timedOut(reason: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/updatefailed(reason:)",
                "title" : "case updateFailed(reason: String)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/errordescription",
                "title" : "var errorDescription: String?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitstore\/ockstoreerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitstore\/ockstoreerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitstore\/ockstoreerror",
            "title" : "OCKStoreError",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/carekitstore",
        "title" : "CareKitStore",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Classes",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/detaillabel",
                "title" : "let detailLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockaddressbutton\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockaddressbutton",
            "title" : "OCKAddressButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/init(contentview:highlightoptions:handlesselection:)",
                "title" : "init(contentView: Content?, highlightOptions: Set<HighlightOption>, handlesSelection: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/contentview",
                "title" : "let contentView: Content?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/handlesselection",
                "title" : "var handlesSelection: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoptions",
                "title" : "let highlightOptions: Set<HighlightOption>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/ishighlighted",
                "title" : "var isHighlighted: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/isselected",
                "title" : "var isSelected: Bool",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/sethighlighted(_:animated:)",
                "title" : "func setHighlighted(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/setstyleforhighlightedstate(_:)",
                "title" : "func setStyleForHighlightedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/touchesended(_:with:)",
                "title" : "func touchesEnded(Set<UITouch>, with: UIEvent?)",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/delayonselect(delay:)",
                    "title" : "case delayOnSelect(delay: TimeInterval)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/fade(alpha:)",
                    "title" : "case fade(alpha: CGFloat)",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/overlay(alpha:)",
                    "title" : "case overlay(alpha: CGFloat)",
                    "type" : "case"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/defaultdelayonselect",
                    "title" : "static var defaultDelayOnSelect: HighlightOption",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/defaultfade",
                    "title" : "static var defaultFade: HighlightOption",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/defaultoverlay",
                    "title" : "static var defaultOverlay: HighlightOption",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/highlightoption",
                "title" : "OCKAnimatedButton.HighlightOption",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimatedbutton\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimatedbutton\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockanimatedbutton",
            "title" : "OCKAnimatedButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/logbuttonscollectionview",
                "title" : "var logButtonsCollectionView: UICollectionView!",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/collectionview(_:cellforitemat:)",
                "title" : "func collectionView(UICollectionView, cellForItemAt: IndexPath) -> UICollectionViewCell",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/collectionview(_:numberofitemsinsection:)",
                "title" : "func collectionView(UICollectionView, numberOfItemsInSection: Int) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/defaultcelltype",
                "title" : "OCKButtonLogTaskView.DefaultCellType",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview\/defaultcellidentifier",
                "title" : "static let defaultCellIdentifier: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockbuttonlogtaskview",
            "title" : "OCKButtonLogTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/init(type:)",
                "title" : "init(type: OCKCartesianGraphView.PlotType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/delegate",
                "title" : "var delegate: OCKChartViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/graphview",
                "title" : "let graphView: OCKCartesianGraphView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesianchartview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcartesianchartview",
            "title" : "OCKCartesianChartView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/init(type:)",
                "title" : "init(type: PlotType)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/dataseries",
                "title" : "var dataSeries: [OCKDataSeries]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/horizontalaxismarkers",
                "title" : "var horizontalAxisMarkers: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/numberformatter",
                "title" : "var numberFormatter: NumberFormatter",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/selectedindex",
                "title" : "var selectedIndex: Int?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/xmaximum",
                "title" : "var xMaximum: CGFloat?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/xminimum",
                "title" : "var xMinimum: CGFloat?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/ymaximum",
                "title" : "var yMaximum: CGFloat?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/yminimum",
                "title" : "var yMinimum: CGFloat?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/graphbounds()",
                "title" : "func graphBounds() -> CGRect",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/bar",
                    "title" : "case bar",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/line",
                    "title" : "case line",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/scatter",
                    "title" : "case scatter",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcartesiangraphview\/plottype",
                "title" : "OCKCartesianGraphView.PlotType",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcartesiangraphview",
            "title" : "OCKCartesianGraphView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/checkmarkbutton",
                "title" : "let checkmarkButton: OCKCheckmarkButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklistitembutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchecklistitembutton",
            "title" : "OCKChecklistItemButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/items",
                "title" : "var items: [OCKChecklistItemButton]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/appenditem(withtitle:animated:)",
                "title" : "func appendItem(withTitle: String, animated: Bool) -> OCKChecklistItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/clearitems(animated:)",
                "title" : "func clearItems(animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/insertitem(withtitle:at:animated:)",
                "title" : "func insertItem(withTitle: String, at: Int, animated: Bool) -> OCKChecklistItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/removeitem(at:animated:)",
                "title" : "func removeItem(at: Int, animated: Bool) -> OCKChecklistItemButton?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchecklisttaskview\/updateitem(at:withtitle:)",
                "title" : "func updateItem(at: Int, withTitle: String) -> OCKChecklistItemButton?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchecklisttaskview",
            "title" : "OCKChecklistTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/intrinsiccontentsize",
                "title" : "var intrinsicContentSize: CGSize",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/layoutsubviews()",
                "title" : "func layoutSubviews()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcheckmarkbutton\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcheckmarkbutton",
            "title" : "OCKCheckmarkButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/completionstate",
                "title" : "var completionState: OCKCompletionState",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/ring",
                "title" : "let ring: OCKCompletionRingView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/setstate(_:animated:)",
                "title" : "func setState(OCKCompletionState, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcompletionringbutton",
            "title" : "OCKCompletionRingButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/duration",
                "title" : "var duration: TimeInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/intrinsiccontentsize",
                "title" : "var intrinsicContentSize: CGSize",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/linewidth",
                "title" : "var lineWidth: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/progress",
                "title" : "var progress: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/strokecolor",
                "title" : "var strokeColor: UIColor",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/setprogress(_:animated:)",
                "title" : "func setProgress(CGFloat, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionringview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcompletionringview",
            "title" : "OCKCompletionRingView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/init(type:)",
                "title" : "init(type: Type)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/call",
                    "title" : "case call",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/email",
                    "title" : "case email",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/message",
                    "title" : "case message",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockcontactbutton\/type\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcontactbutton\/type",
                "title" : "OCKContactButton.Type",
                "type" : "enum"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcontactbutton",
            "title" : "OCKContactButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml\/init(html:css:)",
                    "title" : "init(html: String, css: String?)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml\/css",
                    "title" : "let css: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml\/html",
                    "title" : "let html: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdetailview\/styledhtml",
                "title" : "OCKDetailView.StyledHTML",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/init(html:imageoverlaystyle:showsclosebutton:)",
                "title" : "init(html: StyledHTML?, imageOverlayStyle: UIUserInterfaceStyle, showsCloseButton: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/bodylabel",
                "title" : "let bodyLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/closebutton",
                "title" : "var closeButton: UIButton?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/html",
                "title" : "var html: StyledHTML?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/imagelabel",
                "title" : "var imageLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/imageview",
                "title" : "var imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/layoutsubviews()",
                "title" : "func layoutSubviews()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/scrollviewdidscroll(_:)",
                "title" : "func scrollViewDidScroll(UIScrollView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdetailview",
            "title" : "OCKDetailView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/addressbutton",
                "title" : "let addressButton: OCKAddressButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/callbutton",
                "title" : "let callButton: OCKContactButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/delegate",
                "title" : "var delegate: OCKContactViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/emailbutton",
                "title" : "let emailButton: OCKContactButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/messagebutton",
                "title" : "let messageButton: OCKContactButton",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdetailedcontactview\/defaultimage",
                "title" : "static let defaultImage: UIImage",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdetailedcontactview",
            "title" : "OCKDetailedContactView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/init(imageoverlaystyle:)",
                "title" : "init(imageOverlayStyle: UIUserInterfaceStyle)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/cardview",
                "title" : "var cardView: UIView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/contentview",
                "title" : "var contentView: UIView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/delegate",
                "title" : "var delegate: OCKFeaturedContentViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/imageview",
                "title" : "var imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/intrinsiccontentsize",
                "title" : "var intrinsicContentSize: CGSize",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/label",
                "title" : "var label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/enablecardstyling(_:style:)",
                    "title" : "func enableCardStyling(Bool, style: OCKStyler)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentview\/ockcardable-implementations",
                "title" : "OCKCardable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockfeaturedcontentview",
            "title" : "OCKFeaturedContentView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/completionbutton",
                "title" : "let completionButton: OCKLabeledCheckmarkButton",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskcell\/prepareforreuse()",
                "title" : "func prepareForReuse()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockgridtaskcell",
            "title" : "OCKGridTaskCell",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/collectionview",
                "title" : "var collectionView: UICollectionView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/collectionview(_:didselectitemat:)",
                "title" : "func collectionView(UICollectionView, didSelectItemAt: IndexPath)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/defaultcelltype",
                "title" : "OCKGridTaskView.DefaultCellType",
                "type" : "typealias"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockgridtaskview\/defaultcellidentifier",
                "title" : "static let defaultCellIdentifier: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockgridtaskview",
            "title" : "OCKGridTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockheaderview\/configuration\/showsdetaildisclosure",
                    "title" : "var showsDetailDisclosure: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockheaderview\/configuration\/showsiconimage",
                    "title" : "var showsIconImage: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockheaderview\/configuration\/showsseparator",
                    "title" : "var showsSeparator: Bool",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockheaderview\/configuration",
                "title" : "OCKHeaderView.Configuration",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/init(configurationhandler:)",
                "title" : "init(configurationHandler: (inout Configuration) -> Void)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/detaildisclosureimage",
                "title" : "let detailDisclosureImage: UIImageView?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/detaillabel",
                "title" : "let detailLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/iconimageview",
                "title" : "let iconImageView: UIImageView?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockheaderview\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockheaderview",
            "title" : "OCKHeaderView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/completionbutton",
                "title" : "let completionButton: OCKLabeledButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/instructionslabel",
                "title" : "let instructionsLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockinstructionstaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockinstructionstaskview",
            "title" : "OCKInstructionsTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/init(textstyle:weight:)",
                "title" : "init(textStyle: UIFont.TextStyle, weight: UIFont.Weight)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/animatestextchanges",
                "title" : "var animatesTextChanges: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/text",
                "title" : "var text: String?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabel\/traitcollectiondidchange(_:)",
                "title" : "func traitCollectionDidChange(UITraitCollection?)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ocklabel\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ocklabel\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ocklabel\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklabel",
            "title" : "OCKLabel",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklabeledbutton",
            "title" : "OCKLabeledButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/checkmarkbutton",
                "title" : "let checkmarkButton: OCKCheckmarkButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/label",
                "title" : "let label: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/setselected(_:animated:)",
                "title" : "func setSelected(Bool, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/setstyleforselectedstate(_:)",
                "title" : "func setStyleForSelectedState(Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklabeledcheckmarkbutton",
            "title" : "OCKLabeledCheckmarkButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklocalization\/localized(_:tablename:bundle:value:comment:)",
                "title" : "static func localized(String, tableName: String?, bundle: Bundle?, value: String, comment: String) -> String",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklocalization",
            "title" : "OCKLocalization",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/logbutton",
                "title" : "let logButton: OCKLabeledButton",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogbuttoncell\/prepareforreuse()",
                "title" : "func prepareForReuse()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklogbuttoncell",
            "title" : "OCKLogButtonCell",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/detaillabel",
                "title" : "let detailLabel: OCKLabel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/imageview",
                "title" : "let imageView: UIImageView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/titlelabel",
                "title" : "let titleLabel: OCKLabel",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogitembutton\/tintcolordidchange()",
                "title" : "func tintColorDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklogitembutton",
            "title" : "OCKLogItemButton",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/items",
                "title" : "var items: [OCKLogItemButton]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/appenditem(withtitle:detail:animated:)",
                "title" : "func appendItem(withTitle: String?, detail: String?, animated: Bool) -> OCKLogItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/clearitems(animated:)",
                "title" : "func clearItems(animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/insertitem(withtitle:detail:at:animated:)",
                "title" : "func insertItem(withTitle: String?, detail: String?, at: Int, animated: Bool) -> OCKLogItemButton",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/removeitem(at:animated:)",
                "title" : "func removeItem(at: Int, animated: Bool) -> OCKLogItemButton?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklogtaskview\/updateitem(at:withtitle:detail:)",
                "title" : "func updateItem(at: Int, withTitle: String?, detail: String?) -> OCKLogItemButton?",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklogtaskview",
            "title" : "OCKLogTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockseparatorview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockseparatorview",
            "title" : "OCKSeparatorView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/contentstackview",
                "title" : "let contentStackView: OCKStackView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/delegate",
                "title" : "var delegate: OCKContactViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimplecontactview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocksimplecontactview",
            "title" : "OCKSimpleContactView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/completionbutton",
                "title" : "let completionButton: OCKCheckmarkButton",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/headerview",
                "title" : "let headerView: OCKHeaderView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocksimpletaskview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocksimpletaskview",
            "title" : "OCKSimpleTaskView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/init(style:)",
                "title" : "init(style: Style)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/arrangedsubviews",
                "title" : "var arrangedSubviews: [UIView]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/showsouterseparators",
                "title" : "var showsOuterSeparators: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.property",
                "title" : "let style: Style",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/addarrangedsubview(_:)",
                "title" : "func addArrangedSubview(UIView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/addarrangedsubview(_:animated:)",
                "title" : "func addArrangedSubview(UIView, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/clear(animated:)",
                "title" : "func clear(animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/insertarrangedsubview(_:at:)",
                "title" : "func insertArrangedSubview(UIView, at: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/insertarrangedsubview(_:at:animated:)",
                "title" : "func insertArrangedSubview(UIView, at: Int, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/removearrangedsubview(_:)",
                "title" : "func removeArrangedSubview(UIView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/removearrangedsubview(_:animated:)",
                "title" : "func removeArrangedSubview(UIView, animated: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstackview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/plain",
                    "title" : "case plain",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/separated",
                    "title" : "case separated",
                    "type" : "case"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstackview\/style-swift.enum",
                "title" : "OCKStackView.Style",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstackview\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstackview\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstackview",
            "title" : "OCKStackView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/init(coder:)",
                "title" : "init?(coder: NSCoder)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/init(frame:)",
                "title" : "init(frame: CGRect)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/didmovetosuperview()",
                "title" : "func didMoveToSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/removefromsuperview()",
                "title" : "func removeFromSuperview()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockview\/style()",
                    "title" : "func style() -> OCKStyler",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockview\/stylechildren()",
                    "title" : "func styleChildren()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockview\/ockstylable-implementations",
                "title" : "OCKStylable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockview",
            "title" : "OCKView",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/init(weekofdate:)",
                "title" : "init(weekOfDate: Date)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/completionringbuttons",
                "title" : "var completionRingButtons: [OCKCompletionRingButton]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/dateinterval",
                "title" : "var dateInterval: DateInterval",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/delegate",
                "title" : "var delegate: OCKCalendarViewDelegate?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/selecteddate",
                "title" : "var selectedDate: Date",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/completionringfor(date:)",
                "title" : "func completionRingFor(date: Date) -> OCKCompletionRingButton?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/selectdate(_:)",
                "title" : "func selectDate(Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/showdate(_:)",
                "title" : "func showDate(Date)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockweekcalendarview\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockweekcalendarview",
            "title" : "OCKWeekCalendarView",
            "type" : "class"
          },
          {
            "title" : "Protocols",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockanimationstyler\/statechangeduration-9ixfj",
                        "title" : "var stateChangeDuration: Double",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAnimationStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimationstyler\/statechangeduration-486fh",
                "title" : "var stateChangeDuration: Double",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockanimationstyler",
            "title" : "OCKAnimationStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth1-5wvit",
                        "title" : "var borderWidth1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth1-2tf1m",
                "title" : "var borderWidth1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth2-4deve",
                        "title" : "var borderWidth2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/borderwidth2-7e6z5",
                "title" : "var borderWidth2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius1-8jvis",
                        "title" : "var cornerRadius1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius1-6x5vb",
                "title" : "var cornerRadius1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius2-1ypef",
                        "title" : "var cornerRadius2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/cornerradius2-1j90j",
                "title" : "var cornerRadius2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/linewidth1-44we5",
                        "title" : "var lineWidth1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/linewidth1-29t2q",
                "title" : "var lineWidth1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/opacity1-80asa",
                        "title" : "var opacity1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/opacity1-n85w",
                "title" : "var opacity1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowoffset1-7rrqj",
                        "title" : "var shadowOffset1: CGSize",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowoffset1-4hagz",
                "title" : "var shadowOffset1: CGSize",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowopacity1-r59",
                        "title" : "var shadowOpacity1: Float",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowopacity1-3xc01",
                "title" : "var shadowOpacity1: Float",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowradius1-41ill",
                        "title" : "var shadowRadius1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKAppearanceStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyler\/shadowradius1-aa8j",
                "title" : "var shadowRadius1: CGFloat",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockappearancestyler",
            "title" : "OCKAppearanceStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcalendardisplayable\/delegate",
                "title" : "var delegate: OCKCalendarViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcalendardisplayable",
            "title" : "OCKCalendarDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcalendarviewdelegate\/calendarview(_:didselectdate:at:sender:)",
                "title" : "func calendarView(UIView & OCKCalendarDisplayable, didSelectDate: Date, at: Int, sender: Any?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcalendarviewdelegate",
            "title" : "OCKCalendarViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcardable\/cardview",
                "title" : "var cardView: UIView",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcardable\/contentview",
                "title" : "var contentView: UIView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcardable\/enablecardstyling(_:style:)",
                "title" : "func enableCardStyling(Bool, style: OCKStyler)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcardable",
            "title" : "OCKCardable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchartdisplayable\/delegate",
                "title" : "var delegate: OCKChartViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchartdisplayable",
            "title" : "OCKChartDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockchartviewdelegate\/didselectchartview(_:)",
                "title" : "func didSelectChartView(UIView & OCKChartDisplayable)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockchartviewdelegate",
            "title" : "OCKChartViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/black",
                "title" : "var black: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/clear",
                "title" : "var clear: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/custombackground",
                "title" : "var customBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customblue-5ytu3",
                        "title" : "var customBlue: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customblue-69xy6",
                "title" : "var customBlue: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customfill-7zf7y",
                        "title" : "var customFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customfill-lp9l",
                "title" : "var customFill: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray-9n9u3",
                        "title" : "var customGray: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray-2dzf1",
                "title" : "var customGray: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray2-4bbhc",
                        "title" : "var customGray2: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray2-7v4ud",
                "title" : "var customGray2: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray3-xmv5",
                        "title" : "var customGray3: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray3-91bsn",
                "title" : "var customGray3: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray4-8ce3e",
                        "title" : "var customGray4: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray4-3csgm",
                "title" : "var customGray4: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray5-97510",
                        "title" : "var customGray5: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgray5-yn4o",
                "title" : "var customGray5: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/customgroupedbackground",
                "title" : "var customGroupedBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/label-60yfj",
                        "title" : "var label: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/label-3e23d",
                "title" : "var label: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/quaternarycustomfill-40fnf",
                        "title" : "var quaternaryCustomFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/quaternarycustomfill-9s8ur",
                "title" : "var quaternaryCustomFill: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustombackground",
                "title" : "var secondaryCustomBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomfill-4hhw0",
                        "title" : "var secondaryCustomFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomfill-4dn43",
                "title" : "var secondaryCustomFill: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarycustomgroupedbackground",
                "title" : "var secondaryCustomGroupedBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarylabel-l1uz",
                        "title" : "var secondaryLabel: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/secondarylabel-45w1p",
                "title" : "var secondaryLabel: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/separator-2el66",
                        "title" : "var separator: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/separator-7r6nr",
                "title" : "var separator: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomfill-7uiae",
                        "title" : "var tertiaryCustomFill: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomfill-9u7ey",
                "title" : "var tertiaryCustomFill: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarycustomgroupedbackground",
                "title" : "var tertiaryCustomGroupedBackground: UIColor",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarylabel-9uszd",
                        "title" : "var tertiaryLabel: UIColor",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKColorStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/tertiarylabel-99xfq",
                "title" : "var tertiaryLabel: UIColor",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyler\/white",
                "title" : "var white: UIColor",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcolorstyler",
            "title" : "OCKColorStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactdisplayable\/delegate",
                "title" : "var delegate: OCKContactViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcontactdisplayable",
            "title" : "OCKContactDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiateaddresslookup:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateAddressLookup: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiatecall:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateCall: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiateemail:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateEmail: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/contactview(_:senderdidinitiatemessage:)",
                "title" : "func contactView(UIView & OCKContactDisplayable, senderDidInitiateMessage: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcontactviewdelegate\/didselectcontactview(_:)",
                "title" : "func didSelectContactView(UIView & OCKContactDisplayable)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcontactviewdelegate",
            "title" : "OCKContactViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight1-8t0xc",
                        "title" : "var buttonHeight1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight1-8myqi",
                "title" : "var buttonHeight1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight2-97vul",
                        "title" : "var buttonHeight2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight2-5api3",
                "title" : "var buttonHeight2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight3-5alm5",
                        "title" : "var buttonHeight3: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight3-1h7vk",
                "title" : "var buttonHeight3: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight4-5t9yv",
                        "title" : "var buttonHeight4: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/buttonheight4-7ier6",
                "title" : "var buttonHeight4: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets1-25rqk",
                        "title" : "var directionalInsets1: NSDirectionalEdgeInsets",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets1-7cgzb",
                "title" : "var directionalInsets1: NSDirectionalEdgeInsets",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets2-4ocny",
                        "title" : "var directionalInsets2: NSDirectionalEdgeInsets",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/directionalinsets2-1twdh",
                "title" : "var directionalInsets2: NSDirectionalEdgeInsets",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight1-97mv9",
                        "title" : "var imageHeight1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight1-454ni",
                "title" : "var imageHeight1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight2-37s17",
                        "title" : "var imageHeight2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/imageheight2-9x9ws",
                "title" : "var imageHeight2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/linewidth1-4lzi4",
                        "title" : "var lineWidth1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/linewidth1-4bv88",
                "title" : "var lineWidth1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize1-7x6yr",
                        "title" : "var pointSize1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize1-2lj2d",
                "title" : "var pointSize1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize2-78la3",
                        "title" : "var pointSize2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize2-60pm9",
                "title" : "var pointSize2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize3-8jh9l",
                        "title" : "var pointSize3: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/pointsize3-4ygz0",
                "title" : "var pointSize3: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/separatorheight-9an17",
                        "title" : "var separatorHeight: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/separatorheight-nr57",
                "title" : "var separatorHeight: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/stackspacing1-14za4",
                        "title" : "var stackSpacing1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/stackspacing1-9v3do",
                "title" : "var stackSpacing1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize1-2cd5a",
                        "title" : "var symbolPointSize1: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize1-3m4wx",
                "title" : "var symbolPointSize1: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize2-13pli",
                        "title" : "var symbolPointSize2: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize2-5guhg",
                "title" : "var symbolPointSize2: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize3-4qpce",
                        "title" : "var symbolPointSize3: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize3-133z9",
                "title" : "var symbolPointSize3: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize4-5x61i",
                        "title" : "var symbolPointSize4: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize4-51iia",
                "title" : "var symbolPointSize4: CGFloat",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize5-56jmz",
                        "title" : "var symbolPointSize5: CGFloat",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKDimensionStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyler\/symbolpointsize5-8v009",
                "title" : "var symbolPointSize5: CGFloat",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdimensionstyler",
            "title" : "OCKDimensionStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockfeaturedcontentviewdelegate\/didtapview(_:)",
                "title" : "func didTapView(OCKFeaturedContentView)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockfeaturedcontentviewdelegate",
            "title" : "OCKFeaturedContentViewDelegate",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstylable\/customstyle",
                "title" : "var customStyle: OCKStyler?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstylable\/style()-4ubfv",
                        "title" : "func style() -> OCKStyler",
                        "type" : "method"
                      }
                    ],
                    "title" : "OCKStylable Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstylable\/style()-1pdd6",
                "title" : "func style() -> OCKStyler",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstylable\/stylechildren()",
                "title" : "func styleChildren()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstylable\/styledidchange()",
                "title" : "func styleDidChange()",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstylable",
            "title" : "OCKStylable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/animation-5kmua",
                        "title" : "var animation: OCKAnimationStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/animation-27hei",
                "title" : "var animation: OCKAnimationStyler",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/appearance-705c6",
                        "title" : "var appearance: OCKAppearanceStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/appearance-2f8aq",
                "title" : "var appearance: OCKAppearanceStyler",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/color-50nry",
                        "title" : "var color: OCKColorStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/color-7cq8t",
                "title" : "var color: OCKColorStyler",
                "type" : "property"
              },
              {
                "children" : [
                  {
                    "children" : [
                      {
                        "path" : "\/documentation\/carekitui\/ockstyler\/dimension-8j1b7",
                        "title" : "var dimension: OCKDimensionStyler",
                        "type" : "property"
                      }
                    ],
                    "title" : "OCKStyler Implementations",
                    "type" : "groupMarker"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyler\/dimension-4gu38",
                "title" : "var dimension: OCKDimensionStyler",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstyler",
            "title" : "OCKStyler",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskdisplayable\/delegate",
                "title" : "var delegate: OCKTaskViewDelegate?",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocktaskdisplayable",
            "title" : "OCKTaskDisplayable",
            "type" : "protocol"
          },
          {
            "children" : [
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/didselecttaskview(_:eventindexpath:)",
                "title" : "func didSelectTaskView(UIView & OCKTaskDisplayable, eventIndexPath: IndexPath)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/taskview(_:didcompleteevent:at:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCompleteEvent: Bool, at: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/taskview(_:didcreateoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didCreateOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/carekitui\/ocktaskviewdelegate\/taskview(_:didselectoutcomevalueat:eventindexpath:sender:)",
                "title" : "func taskView(UIView & OCKTaskDisplayable, didSelectOutcomeValueAt: Int, eventIndexPath: IndexPath, sender: Any?)",
                "type" : "method"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocktaskviewdelegate",
            "title" : "OCKTaskViewDelegate",
            "type" : "protocol"
          },
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/cardview\/init(content:)",
                "title" : "init(content: () -> Content)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/cardview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(activationpoint:)-1vx1g",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(activationpoint:)-22rl2",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(named:_:)-174ku",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(named:_:)-5qqi4",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaction(named:_:)-yo9z",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityactivationpoint(_:)-59ve7",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityactivationpoint(_:)-nckv",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-1gsnh",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-3eia2",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-5u5vi",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-5uo1r",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-67wje",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-8h0wj",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-8j7im",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitycustomcontent(_:_:importance:)-9528v",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhint(_:)-4kscv",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhint(_:)-5vfhp",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityhint(_:)-7esec",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityinputlabels(_:)-2n1vm",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityinputlabels(_:)-37pj4",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityinputlabels(_:)-5uqio",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabel(_:)-32a61",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabel(_:)-5vpqi",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabel(_:)-838dg",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-3gdzb",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-5j8z5",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-5nvwi",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:)-bsol",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3f91",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-66qlo",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8fyyy",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entryid:entrylabel:)-gp3y",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-1ww4i",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-45ra8",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-658f0",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:entries:entrylabel:)-gu6r",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-1mwyw",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-3nxqu",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-5rafh",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotor(_:textranges:)-67qih",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityvalue(_:)-15vdl",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityvalue(_:)-6rpfl",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityvalue(_:)-7kswa",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:)-3vj8s",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:)-7cs0x",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:)-9b53o",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:message:)-2dp84",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:message:)-8vfhj",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:actions:message:)-nmxg",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:)-2qr3r",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:)-4uwvj",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:)-mz1b",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:message:)-17zbp",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:message:)-2qda4",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(_:ispresented:presenting:actions:message:)-4kmlv",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alignmentguide(_:computevalue:)-4jcbf",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alignmentguide(_:computevalue:)-9nweg",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/aspectratio(_:contentmode:)-4bzaj",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/aspectratio(_:contentmode:)-z28v",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:in:fillstyle:)-35zzp",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(_:in:fillstyle:)-6zog",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(in:fillstyle:)-67xpq",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/background(in:fillstyle:)-9f04u",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-1yazt",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-35jcj",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-6t6g0",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badge(_:)-xmaq",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonstyle(_:)-9w1dt",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/buttonstyle(_:)-qn63",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2xjkw",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5qyki",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-l3n3",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1gkqa",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4inkk",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-74tp",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6wzif",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8e8cz",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8rdxo",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-23xf5",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-279ak",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8psmx",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentmargins(_:_:for:)-25t6b",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentmargins(_:_:for:)-3rjon",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogsuppressiontoggle(_:issuppressed:)-1dpij",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogsuppressiontoggle(_:issuppressed:)-63m3h",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogsuppressiontoggle(_:issuppressed:)-w9o7",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dynamictypesize(_:)-3cdd",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/dynamictypesize(_:)-41rgq",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogconfirmationlabel(_:)-6ep07",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogconfirmationlabel(_:)-9hioz",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogconfirmationlabel(_:)-9p0tf",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogmessage(_:)-25v7p",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogmessage(_:)-68dyr",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogmessage(_:)-8ir27",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8rzgd",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8zja9",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-4gqky",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-7qgck",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-19svt",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-4vj6y",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-91zcv",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9i4uk",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporterfilenamelabel(_:)-4omwf",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporterfilenamelabel(_:)-5u6ka",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileexporterfilenamelabel(_:)-66z2p",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedobject(_:)-967pr",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedobject(_:)-9chv0",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedsceneobject(_:)-2notl",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedsceneobject(_:)-3lmup",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedscenevalue(_:_:)-2cx14",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedscenevalue(_:_:)-4bqb0",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedvalue(_:_:)-9sm6e",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/focusedvalue(_:_:)-9v364",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/help(_:)-51bog",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/help(_:)-6927a",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/help(_:)-8mhun",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listitemtint(_:)-2nnb4",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listitemtint(_:)-73tr0",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionspacing(_:)-63l40",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/listsectionspacing(_:)-a4gf",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:)-2xbfz",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:)-310t3",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:)-4lbnm",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:displaymode:)-1g9hq",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:displaymode:)-21mt7",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitle(_:displaymode:)-2xvrb",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:)-4upxl",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:)-9z6jz",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:preview:)-10t5j",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:preview:)-2bou2",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:preview:)-39d4",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationdocument(_:preview:)-3lvie",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-4r6qc",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-5k9ao",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-6aj79",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-6qjbt",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/navigationtitle(_:)-9fvcl",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onchange(of:initial:_:)-4381s",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onchange(of:initial:_:)-92ai8",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/oncontinuoushover(coordinatespace:perform:)-5tukv",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/oncontinuoushover(coordinatespace:perform:)-9ze13",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:delegate:)-1ke9d",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:delegate:)-53p08",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-269sk",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-4iiaw",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-91f5h",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ondrop(of:istargeted:perform:)-9qer2",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ontapgesture(count:coordinatespace:perform:)-2mwvx",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/ontapgesture(count:coordinatespace:perform:)-2urq1",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/padding(_:)-28l3c",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/padding(_:)-9rnh1",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/renameaction(_:)-1oe3i",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/renameaction(_:)-6tgd9",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareainset(edge:alignment:spacing:content:)-8eu7q",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareainset(edge:alignment:spacing:content:)-8trnf",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareapadding(_:)-2efft",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareapadding(_:)-9ajsk",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaleeffect(_:anchor:)-1rl1",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaleeffect(_:anchor:)-7m1w9",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchcompletion(_:)-4i4ev",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchcompletion(_:)-5duuk",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-266iz",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3b0pz",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5qu84",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:placement:prompt:token:)-3cnbl",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:placement:prompt:token:)-43zl8",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:editabletokens:placement:prompt:token:)-4x5be",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:ispresented:placement:prompt:)-3bgtj",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:ispresented:placement:prompt:)-7gie5",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:ispresented:placement:prompt:)-y02l",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:)-4sjdw",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:)-6dmm0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:)-7drue",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:suggestions:)-1v6f5",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:suggestions:)-4ol34",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:placement:prompt:suggestions:)-mudv",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:ispresented:placement:prompt:token:)-465hq",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:ispresented:placement:prompt:token:)-7wx1o",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8n788",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:)-6y09u",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:)-8b41q",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:placement:prompt:token:)-8dkq1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4uhg2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7yw29",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9axk0",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-36rwa",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9qzz8",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9t0f0",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/cardview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tint(_:)-71e0",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tint(_:)-8u3ab",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(content:)-8man3",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(content:)-r0mf",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarbackground(_:for:)-11hq9",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarbackground(_:for:)-4ict1",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typeselectequivalent(_:)-5c5p9",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typeselectequivalent(_:)-84pb8",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typeselectequivalent(_:)-9uya0",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typesettinglanguage(_:isenabled:)-55kvh",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/typesettinglanguage(_:isenabled:)-5ctoq",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/cardview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/cardview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/cardview",
            "title" : "CardView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/circularcompletionview\/init(iscomplete:content:)",
                "title" : "init(isComplete: Bool, content: () -> Content)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/circularcompletionview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(activationpoint:)-1cid1",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(activationpoint:)-4vt5s",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(named:_:)-22b0w",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(named:_:)-6mw48",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaction(named:_:)-9xjt2",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityactivationpoint(_:)-7mzv2",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityactivationpoint(_:)-9otwa",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-16nvr",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-24b8k",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-2o4c5",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-2zba3",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-4ra10",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-4ti5z",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-66acj",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitycustomcontent(_:_:importance:)-89tgr",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhint(_:)-41hf6",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhint(_:)-6qou1",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityhint(_:)-mlsd",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityinputlabels(_:)-97ydq",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityinputlabels(_:)-9wbsg",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityinputlabels(_:)-utqj",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabel(_:)-1xpq5",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabel(_:)-5vdls",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabel(_:)-74h12",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-4kl0p",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-506bt",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-5cdla",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:)-7f2vm",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1hf4j",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8789e",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-895sx",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9msj3",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-1fcw8",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-4n3x8",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-7r4d1",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-99v74",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-6r32z",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-71lsa",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-74gwl",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotor(_:textranges:)-qm56",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityvalue(_:)-30jqq",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityvalue(_:)-7idx1",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityvalue(_:)-8we2e",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:)-34lbp",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:)-72eqw",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:)-7n2hn",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:message:)-3m7a4",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:message:)-6ihw1",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:actions:message:)-7khz5",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:)-72fib",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:)-7mie5",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:)-t6ni",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:message:)-6rye9",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:message:)-9ab1v",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(_:ispresented:presenting:actions:message:)-9dcbs",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alignmentguide(_:computevalue:)-1sza",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alignmentguide(_:computevalue:)-4tzk0",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/aspectratio(_:contentmode:)-7pygk",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/aspectratio(_:contentmode:)-8nc5x",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:in:fillstyle:)-983i3",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(_:in:fillstyle:)-9gvkq",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(in:fillstyle:)-2rfpk",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/background(in:fillstyle:)-5gheh",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-1evuy",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-67baq",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-6d1gj",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badge(_:)-hf28",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonstyle(_:)-2s5ki",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/buttonstyle(_:)-5x92a",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-55hya",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-7zvos",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-lxd8",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-80i92",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-8y0ak",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9lja1",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3t5vj",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4oamn",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-94coa",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1y6k7",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-4nwxy",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7lbeh",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentmargins(_:_:for:)-3gijn",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentmargins(_:_:for:)-81s0i",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-8a9p8",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-8f4s7",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-tmwa",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dynamictypesize(_:)-3dwjk",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/dynamictypesize(_:)-7m20b",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogconfirmationlabel(_:)-2ccrn",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogconfirmationlabel(_:)-35u73",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogconfirmationlabel(_:)-3dhov",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogmessage(_:)-2xrq2",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogmessage(_:)-4y4gi",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogmessage(_:)-7te0z",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1k55f",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4g4io",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-37992",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-9lvp8",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-5cydn",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-83z3l",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1hk5j",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9semv",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporterfilenamelabel(_:)-20qdq",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporterfilenamelabel(_:)-2oap6",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileexporterfilenamelabel(_:)-3ixy5",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedobject(_:)-1yy0f",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedobject(_:)-7xeox",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedsceneobject(_:)-64fxz",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedsceneobject(_:)-9yial",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedscenevalue(_:_:)-431xx",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedscenevalue(_:_:)-5m7qm",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedvalue(_:_:)-4dfka",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/focusedvalue(_:_:)-84ppz",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/help(_:)-1zwt5",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/help(_:)-4mgbq",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/help(_:)-wfb6",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listitemtint(_:)-4vsji",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listitemtint(_:)-8rny",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionspacing(_:)-2of7r",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/listsectionspacing(_:)-87gjc",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:)-1cw92",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:)-2nqis",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:)-8w3dd",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:displaymode:)-356rk",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:displaymode:)-7xv47",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitle(_:displaymode:)-8jc3t",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:)-3b9pm",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:)-3s3hc",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:preview:)-5vn1l",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:preview:)-91dh0",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:preview:)-9gzhy",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationdocument(_:preview:)-9vavg",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-1nj0x",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-3fz29",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-5040b",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-5md3c",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationtitle(_:)-op5u",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onchange(of:initial:_:)-5skd7",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onchange(of:initial:_:)-6degi",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/oncontinuoushover(coordinatespace:perform:)-21wbe",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/oncontinuoushover(coordinatespace:perform:)-29e9h",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:delegate:)-4s353",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:delegate:)-5rmf1",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-1n884",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-1sqjm",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-5pxis",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ondrop(of:istargeted:perform:)-8520y",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ontapgesture(count:coordinatespace:perform:)-6ic9k",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ontapgesture(count:coordinatespace:perform:)-9wk4j",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/padding(_:)-52dpb",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/padding(_:)-84cea",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/renameaction(_:)-48c0s",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/renameaction(_:)-7ubtl",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareainset(edge:alignment:spacing:content:)-41ydc",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareainset(edge:alignment:spacing:content:)-is9y",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareapadding(_:)-3f1bh",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareapadding(_:)-4mz2r",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaleeffect(_:anchor:)-4xxc5",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaleeffect(_:anchor:)-9foxh",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchcompletion(_:)-89kgr",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchcompletion(_:)-i65z",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-54tzw",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5ukft",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8zpdj",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-33lca",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-7xtwb",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-zti8",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:ispresented:placement:prompt:)-36h7m",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:ispresented:placement:prompt:)-51qdj",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:ispresented:placement:prompt:)-612d6",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:)-1go1h",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:)-7lf1k",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:)-i8f6",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:suggestions:)-3fu1h",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:suggestions:)-4dc4f",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:placement:prompt:suggestions:)-7wgiv",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-4my50",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5okew",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6angs",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:)-6bw59",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:)-6ody9",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:placement:prompt:token:)-9q9y1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2vy5t",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-3gj2z",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7bnlc",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3khv7",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8wf4c",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-puu",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tint(_:)-1c9ww",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tint(_:)-9xl29",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(content:)-26d7x",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(content:)-603dm",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarbackground(_:for:)-85n5y",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarbackground(_:for:)-90pgh",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typeselectequivalent(_:)-10ve8",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typeselectequivalent(_:)-6fvyg",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typeselectequivalent(_:)-6m5h6",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typesettinglanguage(_:isenabled:)-5fox0",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/typesettinglanguage(_:isenabled:)-9lcj8",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/circularcompletionview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/circularcompletionview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/circularcompletionview",
            "title" : "CircularCompletionView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/headerview\/init(title:detail:image:)",
                "title" : "init(title: Text, detail: Text?, image: Image?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/headerview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(activationpoint:)-3ullp",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(activationpoint:)-8r11c",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(named:_:)-15p89",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(named:_:)-4kq6g",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaction(named:_:)-6q6ld",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityactivationpoint(_:)-26ze8",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityactivationpoint(_:)-9wspj",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-1z5bl",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-455tl",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-4d88k",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-4vc8v",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-509qq",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-672uw",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-78fhn",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitycustomcontent(_:_:importance:)-9smzt",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhint(_:)-2usu5",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhint(_:)-3d89o",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityhint(_:)-89kxg",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityinputlabels(_:)-1g26i",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityinputlabels(_:)-6r378",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityinputlabels(_:)-jhj9",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabel(_:)-5e4dx",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabel(_:)-99ac9",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabel(_:)-9kkjb",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-1hv4u",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-78b5a",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-82kjz",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:)-9407q",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-795lp",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9iz29",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9luyw",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-cvfh",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-4de7t",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-4dr6h",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-9yi0u",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:entries:entrylabel:)-rywo",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-4ibxf",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-6qvng",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-d1i4",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotor(_:textranges:)-xou5",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityvalue(_:)-3t4ll",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityvalue(_:)-8zas2",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityvalue(_:)-99pjk",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:)-2ytud",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:)-5xhf1",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:)-6vfa0",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:message:)-5qtvw",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:message:)-77mjy",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:actions:message:)-8jtx9",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:)-17qvs",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:)-3mxka",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:)-92xlr",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:message:)-3qs7u",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:message:)-48tdl",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(_:ispresented:presenting:actions:message:)-8pf1e",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alignmentguide(_:computevalue:)-3h3ps",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alignmentguide(_:computevalue:)-3u8ln",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/aspectratio(_:contentmode:)-3a80s",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/aspectratio(_:contentmode:)-4u8v8",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:in:fillstyle:)-54pkv",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(_:in:fillstyle:)-70vb3",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(in:fillstyle:)-3dur9",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/background(in:fillstyle:)-uur5",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-47svk",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-540xj",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-5dhqm",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badge(_:)-5mack",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonstyle(_:)-3i6h1",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/buttonstyle(_:)-5lqbf",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2anby",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-42nbf",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5vg0n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5u9me",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7wbfl",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9v7dk",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1dqcf",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6o5mq",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7yvyf",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-164i9",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2io6h",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-auyo",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentmargins(_:_:for:)-530zu",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentmargins(_:_:for:)-9ks3d",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogsuppressiontoggle(_:issuppressed:)-37n5u",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogsuppressiontoggle(_:issuppressed:)-7yfb4",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogsuppressiontoggle(_:issuppressed:)-94qp1",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dynamictypesize(_:)-1p06g",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/dynamictypesize(_:)-2mf9p",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogconfirmationlabel(_:)-230qp",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogconfirmationlabel(_:)-5tnqv",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogconfirmationlabel(_:)-9vkz3",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogmessage(_:)-2zmq4",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogmessage(_:)-3t76s",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogmessage(_:)-9jfl5",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3rinj",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-63lny",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-305jz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5fm5y",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-5jn52",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9krdk",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-15hd5",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9mz1y",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporterfilenamelabel(_:)-1k6wy",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporterfilenamelabel(_:)-7dszq",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileexporterfilenamelabel(_:)-98yl5",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedobject(_:)-3y6k9",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedobject(_:)-922jh",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedsceneobject(_:)-4fdvx",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedsceneobject(_:)-7ty3w",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedscenevalue(_:_:)-3cbz7",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedscenevalue(_:_:)-57w7k",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedvalue(_:_:)-3mosa",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/focusedvalue(_:_:)-8ygz",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/help(_:)-1wxxd",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/help(_:)-6zjpw",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/help(_:)-mp2b",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listitemtint(_:)-2dssr",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listitemtint(_:)-68cwh",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionspacing(_:)-4oge7",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/listsectionspacing(_:)-5cj46",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:)-2i13v",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:)-9i0ng",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:)-unqf",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:displaymode:)-15oat",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:displaymode:)-29ids",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitle(_:displaymode:)-9lce",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:)-62c5s",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:)-6csxm",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:preview:)-400o5",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:preview:)-7tiwz",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:preview:)-8y10x",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationdocument(_:preview:)-g61j",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-1dqx6",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-1sbvs",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-3b6x",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-4p24a",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/navigationtitle(_:)-c8o5",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onchange(of:initial:_:)-4at1k",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onchange(of:initial:_:)-8p6c1",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/oncontinuoushover(coordinatespace:perform:)-1hb4a",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/oncontinuoushover(coordinatespace:perform:)-1zrlo",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:delegate:)-5ut5h",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:delegate:)-90f95",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-1vam8",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-1wj7j",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-6gq6n",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ondrop(of:istargeted:perform:)-7sv2n",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ontapgesture(count:coordinatespace:perform:)-2d8t8",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/ontapgesture(count:coordinatespace:perform:)-2r917",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/padding(_:)-36sgc",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/padding(_:)-67bjn",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/renameaction(_:)-5itsh",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/renameaction(_:)-8kv95",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareainset(edge:alignment:spacing:content:)-6bnja",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareainset(edge:alignment:spacing:content:)-rnka",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareapadding(_:)-4t75g",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareapadding(_:)-91fo9",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaleeffect(_:anchor:)-3b0f6",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaleeffect(_:anchor:)-h85r",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchcompletion(_:)-11i53",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchcompletion(_:)-3ggib",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2rpy1",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-57wt7",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8ogrn",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:placement:prompt:token:)-3j9gm",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:placement:prompt:token:)-3vkrh",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:editabletokens:placement:prompt:token:)-3zb0j",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:ispresented:placement:prompt:)-39scn",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:ispresented:placement:prompt:)-6atmz",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:ispresented:placement:prompt:)-76t1e",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:)-24qo6",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:)-2u45j",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:)-70rfz",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:suggestions:)-1vzph",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:suggestions:)-3itj7",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:placement:prompt:suggestions:)-7dua",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:ispresented:placement:prompt:token:)-1ftsc",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:ispresented:placement:prompt:token:)-2f988",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:ispresented:placement:prompt:token:)-60ys1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:)-1gxrx",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:)-6kj7r",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:placement:prompt:token:)-9fmlq",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5qbsv",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7h9qv",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-jp4s",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4vtuy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9ucwa",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-t3il",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/headerview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tint(_:)-43evv",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tint(_:)-d591",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(content:)-3xv24",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(content:)-5jt90",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarbackground(_:for:)-8u7oo",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarbackground(_:for:)-yxou",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typeselectequivalent(_:)-1j7bp",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typeselectequivalent(_:)-9bydc",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typeselectequivalent(_:)-md6x",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typesettinglanguage(_:isenabled:)-4ywpu",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/typesettinglanguage(_:isenabled:)-7kakx",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/headerview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/headerview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/headerview",
            "title" : "HeaderView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(event:header:onerror:)",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, header: () -> Header, onError: (OCKStoreError) -> Void)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(event:onerror:)-24bxb",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, onError: (OCKStoreError) -> Void)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(event:onerror:)-444h2",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, onError: (OCKStoreError) -> Void)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(instructions:iscomplete:action:header:)",
                "title" : "init(instructions: Text?, isComplete: Bool, action: () -> Void, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/init(title:detail:instructions:iscomplete:action:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, isComplete: Bool, action: () -> Void)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/instructionstaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(activationpoint:)-562pp",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(activationpoint:)-9pfmo",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(named:_:)-4afb0",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(named:_:)-4gy9",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaction(named:_:)-82k0u",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityactivationpoint(_:)-41bkk",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityactivationpoint(_:)-6vhcw",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-1ynqo",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-45tc8",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-46olv",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-4a4nd",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-7wcss",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-82t3f",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-8mxym",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitycustomcontent(_:_:importance:)-oe05",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhint(_:)-184wn",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhint(_:)-238kr",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityhint(_:)-23npy",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityinputlabels(_:)-5684a",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityinputlabels(_:)-5r7bz",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityinputlabels(_:)-62vu2",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabel(_:)-17q6b",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabel(_:)-1depy",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabel(_:)-smwt",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-21nuj",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-2im63",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-5tegn",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:)-7ythx",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-21i1u",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-43h3r",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-69ci0",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9h9u6",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-34pid",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-46wmi",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-7w2jn",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:entries:entrylabel:)-9suhy",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-21qeo",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-3a3wu",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-6jvl0",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotor(_:textranges:)-911pv",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityvalue(_:)-2712v",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityvalue(_:)-4samc",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityvalue(_:)-7bqrn",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:)-4b5dq",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:)-eiqi",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:)-lerr",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:message:)-1k0wc",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:message:)-4pwd4",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:actions:message:)-8eseq",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-50j8g",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-5o8f7",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:)-pndb",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-2l4eq",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-34pc9",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(_:ispresented:presenting:actions:message:)-9tue",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alignmentguide(_:computevalue:)-3djb3",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alignmentguide(_:computevalue:)-65rk1",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/aspectratio(_:contentmode:)-4q26",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/aspectratio(_:contentmode:)-59a72",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:in:fillstyle:)-99q5g",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(_:in:fillstyle:)-jwxj",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(in:fillstyle:)-3hsyk",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/background(in:fillstyle:)-67cdc",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-13n4e",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-2sbqq",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-5n0ah",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badge(_:)-7avry",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonstyle(_:)-2w3gk",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/buttonstyle(_:)-4b16n",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2zizp",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-3eoa0",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-3ho8n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3kad5",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4c85l",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-954gd",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1uh1r",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4pkqs",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-9w88r",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5tctg",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7am10",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7mk1o",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentmargins(_:_:for:)-5lhg3",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentmargins(_:_:for:)-84oan",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogsuppressiontoggle(_:issuppressed:)-2r6fu",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogsuppressiontoggle(_:issuppressed:)-3ocyw",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogsuppressiontoggle(_:issuppressed:)-6s5cq",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dynamictypesize(_:)-9wyq3",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/dynamictypesize(_:)-owc",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogconfirmationlabel(_:)-3r7p5",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogconfirmationlabel(_:)-5c94l",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogconfirmationlabel(_:)-89qbp",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogmessage(_:)-6sh3g",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogmessage(_:)-79ckd",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogmessage(_:)-866vo",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3z0jh",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-9ea14",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-1tu3z",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-8cbxz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-3jyxi",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-81exf",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-2rfva",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-610g2",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporterfilenamelabel(_:)-6660x",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporterfilenamelabel(_:)-76s7f",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileexporterfilenamelabel(_:)-8nwc",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedobject(_:)-5e5gv",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedobject(_:)-9hagq",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedsceneobject(_:)-1tmrz",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedsceneobject(_:)-6uqay",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedscenevalue(_:_:)-1nzcz",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedscenevalue(_:_:)-6vyl8",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedvalue(_:_:)-1srds",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/focusedvalue(_:_:)-5w77p",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/help(_:)-5iiw1",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/help(_:)-64kgl",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/help(_:)-7subj",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listitemtint(_:)-2gqch",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listitemtint(_:)-7ugpx",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionspacing(_:)-7z7oa",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/listsectionspacing(_:)-cpn3",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:)-71mim",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:)-7ftc8",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:)-8mggz",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:displaymode:)-509a7",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:displaymode:)-8s1is",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitle(_:displaymode:)-9ht03",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:)-5zuk9",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:)-ys8g",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:preview:)-5bklq",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:preview:)-947xf",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:preview:)-rwzo",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationdocument(_:preview:)-sqfw",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-6jccd",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-7qbtk",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-8wcut",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-9uogv",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationtitle(_:)-zjki",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onchange(of:initial:_:)-41bea",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onchange(of:initial:_:)-7as3t",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/oncontinuoushover(coordinatespace:perform:)-2lfzc",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/oncontinuoushover(coordinatespace:perform:)-30z45",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:delegate:)-6ewzx",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:delegate:)-8gunn",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-2uh77",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-5fqtv",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-6qzgo",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ondrop(of:istargeted:perform:)-7yod0",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ontapgesture(count:coordinatespace:perform:)-29dus",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ontapgesture(count:coordinatespace:perform:)-ic4f",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/padding(_:)-5049x",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/padding(_:)-8w5ew",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/renameaction(_:)-8e8o1",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/renameaction(_:)-f3q4",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareainset(edge:alignment:spacing:content:)-1cqel",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareainset(edge:alignment:spacing:content:)-4k86n",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareapadding(_:)-3ftxt",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareapadding(_:)-w6sl",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaleeffect(_:anchor:)-36k15",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaleeffect(_:anchor:)-8dqat",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchcompletion(_:)-5oqty",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchcompletion(_:)-6wje0",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-562jr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5i6gw",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-asae",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:placement:prompt:token:)-1zk9i",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:placement:prompt:token:)-6gekr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:editabletokens:placement:prompt:token:)-9lz93",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:ispresented:placement:prompt:)-3c34m",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:ispresented:placement:prompt:)-71iy1",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:ispresented:placement:prompt:)-8jhvc",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:)-1qa2j",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:)-42why",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:)-9o5v",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-20mmq",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-2q327",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:placement:prompt:suggestions:)-5cv50",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-283jb",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-28dxf",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9xxtl",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-29mjq",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-68mnj",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:placement:prompt:token:)-86tql",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-3yitm",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-46ksw",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-59xcz",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1n6cy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-25if4",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7u40h",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tint(_:)-74j3v",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tint(_:)-7rwk1",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(content:)-3rkuu",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(content:)-5c8qr",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarbackground(_:for:)-6cvaa",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarbackground(_:for:)-6qk91",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typeselectequivalent(_:)-4uru7",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typeselectequivalent(_:)-54znb",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typeselectequivalent(_:)-8m1dv",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typesettinglanguage(_:isenabled:)-3ppfg",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/typesettinglanguage(_:isenabled:)-6e84e",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/instructionstaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/instructionstaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/instructionstaskview",
            "title" : "InstructionsTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(event:numberformatter:)-3lm0q",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, numberFormatter: NumberFormatter?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(event:numberformatter:)-65yxr",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, numberFormatter: NumberFormatter?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(event:numberformatter:header:)",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, numberFormatter: NumberFormatter?, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(status:header:)",
                "title" : "init(status: LabeledValueTaskViewStatus, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/init(title:detail:status:)",
                "title" : "init(title: Text, detail: Text?, status: LabeledValueTaskViewStatus)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(activationpoint:)-23iiu",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(activationpoint:)-6v44k",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(named:_:)-12ggp",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(named:_:)-2bek1",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaction(named:_:)-8qeme",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityactivationpoint(_:)-7kmwx",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityactivationpoint(_:)-8pltu",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-2kp61",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-2lmg8",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-4jg49",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-55p34",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-5pu5h",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-8bypj",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-9vodl",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitycustomcontent(_:_:importance:)-klpj",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhint(_:)-535jk",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhint(_:)-9lk5",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityhint(_:)-grik",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityinputlabels(_:)-7ajy0",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityinputlabels(_:)-7aqrm",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityinputlabels(_:)-95cgo",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabel(_:)-5cj2c",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabel(_:)-6du45",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabel(_:)-6wof4",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-1v4u2",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-6z019",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-8clu4",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:)-8qhb7",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2h6g9",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6ykwt",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9elfb",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-f105",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-49mw9",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-6nfa3",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-6vjjb",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:entries:entrylabel:)-9vum1",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-2bkez",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-35yj0",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-3qrqh",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotor(_:textranges:)-dlyz",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityvalue(_:)-40cde",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityvalue(_:)-5p9tg",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityvalue(_:)-84bu3",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:)-3kkuo",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:)-5nzo3",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:)-84h10",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-51t48",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-56l3t",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:actions:message:)-56ul8",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-48qte",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-6c0aw",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:)-8kqik",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-3qivw",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-5v0vc",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(_:ispresented:presenting:actions:message:)-9rbfy",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alignmentguide(_:computevalue:)-1kbo",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alignmentguide(_:computevalue:)-52kme",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/aspectratio(_:contentmode:)-1mfua",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/aspectratio(_:contentmode:)-4d7mk",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:in:fillstyle:)-3ferv",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(_:in:fillstyle:)-9oj84",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(in:fillstyle:)-4ylqa",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/background(in:fillstyle:)-9u628",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-2z4w3",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-34gxu",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-5y7f2",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badge(_:)-70pck",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonstyle(_:)-29uuh",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/buttonstyle(_:)-4m79",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1bwng",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-9eay0",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-9oqmf",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1roas",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4cd2j",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7srwl",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-101eg",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-21cn",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-uj6o",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1lahy",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-k7gw",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-t0q5",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentmargins(_:_:for:)-1abl9",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentmargins(_:_:for:)-94kwu",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogsuppressiontoggle(_:issuppressed:)-24xtz",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogsuppressiontoggle(_:issuppressed:)-6uf26",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogsuppressiontoggle(_:issuppressed:)-7v68n",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dynamictypesize(_:)-39edt",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/dynamictypesize(_:)-6ibkp",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogconfirmationlabel(_:)-31dnv",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogconfirmationlabel(_:)-4tabh",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogconfirmationlabel(_:)-8z30b",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogmessage(_:)-18viy",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogmessage(_:)-6766h",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogmessage(_:)-7vhux",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5n1jh",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-91dfz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5gnst",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-85t4e",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-2goa2",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-3868i",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-4qrmr",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-88zjo",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporterfilenamelabel(_:)-2jfk3",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporterfilenamelabel(_:)-6stm5",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileexporterfilenamelabel(_:)-q4lu",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedobject(_:)-3pmj7",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedobject(_:)-5a0dn",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedsceneobject(_:)-64oy9",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedsceneobject(_:)-6a0ld",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedscenevalue(_:_:)-930pl",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedscenevalue(_:_:)-j6v7",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedvalue(_:_:)-6vcaa",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/focusedvalue(_:_:)-7l8gs",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/help(_:)-233a3",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/help(_:)-3luhj",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/help(_:)-8pdmt",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listitemtint(_:)-2xd3a",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listitemtint(_:)-67zo6",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionspacing(_:)-1ecmg",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/listsectionspacing(_:)-1w288",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:)-2s534",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:)-32zg2",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:)-50leu",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-3qlh0",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-89h52",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitle(_:displaymode:)-9b53q",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:)-3fgs3",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:)-8j1xi",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:preview:)-2727b",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:preview:)-4izzy",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:preview:)-6d48u",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationdocument(_:preview:)-84abw",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-1m4sd",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-1nbfd",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-2n184",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-315e6",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationtitle(_:)-5iiji",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onchange(of:initial:_:)-989n2",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onchange(of:initial:_:)-twh4",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/oncontinuoushover(coordinatespace:perform:)-2o2je",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/oncontinuoushover(coordinatespace:perform:)-2quo5",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:delegate:)-3zp2x",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:delegate:)-4u3wt",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-3cmbr",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8fb2r",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8mhfp",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ondrop(of:istargeted:perform:)-8zy3t",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ontapgesture(count:coordinatespace:perform:)-2cgeb",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ontapgesture(count:coordinatespace:perform:)-8k38",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/padding(_:)-4vz01",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/padding(_:)-kkvt",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/renameaction(_:)-1orjd",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/renameaction(_:)-274j",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareainset(edge:alignment:spacing:content:)-3018t",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareainset(edge:alignment:spacing:content:)-807e2",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareapadding(_:)-3r146",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareapadding(_:)-3rarv",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaleeffect(_:anchor:)-1jdqr",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaleeffect(_:anchor:)-6tdq7",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchcompletion(_:)-346sr",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchcompletion(_:)-8qnve",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1sn4s",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1ty9p",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-9c54",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:placement:prompt:token:)-1mnql",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:placement:prompt:token:)-6yjpr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:editabletokens:placement:prompt:token:)-992oc",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:ispresented:placement:prompt:)-1u0uq",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:ispresented:placement:prompt:)-7cq4e",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:ispresented:placement:prompt:)-9d1bf",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:)-3wdpb",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:)-5507c",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:)-5uvhn",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-12o8y",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-2g3sk",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:placement:prompt:suggestions:)-31a7o",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-677tv",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-74b31",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9nf2x",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-227p1",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-2wj0x",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:placement:prompt:token:)-7kird",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-78n2d",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-8f2em",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-8fzgr",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-36wr8",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3t4u",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8yd95",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tint(_:)-3zwxl",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tint(_:)-4fi4",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(content:)-5svjs",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(content:)-6vws2",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarbackground(_:for:)-460ew",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarbackground(_:for:)-4socy",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typeselectequivalent(_:)-1hk32",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typeselectequivalent(_:)-50ugz",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typeselectequivalent(_:)-8o3oj",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typesettinglanguage(_:isenabled:)-323nq",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/typesettinglanguage(_:isenabled:)-78mz0",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/labeledvaluetaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/labeledvaluetaskview",
            "title" : "LabeledValueTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/init(instructions:links:header:)",
                "title" : "init(instructions: Text?, links: [LinkItem], header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/init(title:detail:instructions:links:)",
                "title" : "init(title: Text, detail: Text?, instructions: Text?, links: [LinkItem])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(activationpoint:)-449po",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(activationpoint:)-9n6ud",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(named:_:)-39e0s",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(named:_:)-8nk4u",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaction(named:_:)-9sxw7",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityactivationpoint(_:)-1d6ok",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityactivationpoint(_:)-xexh",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-1dt48",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-1zf5b",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-2fw6i",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-34c5e",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-353f0",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-5fn5q",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-5qoe9",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitycustomcontent(_:_:importance:)-6f5z1",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhint(_:)-6t0cb",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhint(_:)-6vi6s",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityhint(_:)-8g49a",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityinputlabels(_:)-37mlj",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityinputlabels(_:)-5f3lr",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityinputlabels(_:)-99n8p",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabel(_:)-61lc8",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabel(_:)-71wmb",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabel(_:)-833sl",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-30gf7",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-4jswm",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-74yfo",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:)-84e1e",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2rexz",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5ur2p",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8tba5",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9djmc",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-5wiwo",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-7szw3",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-97163",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:entries:entrylabel:)-zohz",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-4ci9c",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-4kzta",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-4m1in",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotor(_:textranges:)-97c83",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityvalue(_:)-5nmva",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityvalue(_:)-8gzop",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityvalue(_:)-8idjo",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:)-4lz5h",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:)-7ejgs",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:)-8avx2",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:message:)-57nvp",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:message:)-63p2z",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:actions:message:)-8yqc8",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:)-1ngm5",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:)-3i9de",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:)-6i07f",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:message:)-5mvbz",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:message:)-86fgz",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(_:ispresented:presenting:actions:message:)-95xp4",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alignmentguide(_:computevalue:)-1kkva",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alignmentguide(_:computevalue:)-2464x",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/aspectratio(_:contentmode:)-1ojo8",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/aspectratio(_:contentmode:)-8fwlv",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:in:fillstyle:)-2zm2s",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(_:in:fillstyle:)-75mhj",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(in:fillstyle:)-6b8nn",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/background(in:fillstyle:)-84k8r",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-144q8",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-16qvc",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-1mxfo",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badge(_:)-6d0b6",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonstyle(_:)-24pib",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/buttonstyle(_:)-3y3yi",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4aque",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4qcdy",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8g9ym",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1o5cl",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5epqb",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-8sqhe",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-17z8q",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1oegh",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3xdek",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-29sf1",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-40wpq",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-anms",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentmargins(_:_:for:)-2ew6i",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentmargins(_:_:for:)-7x4sz",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogsuppressiontoggle(_:issuppressed:)-1xkg7",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogsuppressiontoggle(_:issuppressed:)-34j22",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogsuppressiontoggle(_:issuppressed:)-9gpha",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dynamictypesize(_:)-10qfk",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/dynamictypesize(_:)-1smix",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogconfirmationlabel(_:)-6hzvs",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogconfirmationlabel(_:)-8srja",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogconfirmationlabel(_:)-x712",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogmessage(_:)-4cpgl",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogmessage(_:)-4d96k",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogmessage(_:)-4ulw1",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1ea19",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6ucyl",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-62fxx",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-7tr5h",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-21vz0",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-525ss",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1v9t7",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9enf7",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporterfilenamelabel(_:)-322ff",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporterfilenamelabel(_:)-4xr8k",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileexporterfilenamelabel(_:)-9w1ib",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedobject(_:)-76n5e",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedobject(_:)-7h9sf",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedsceneobject(_:)-ghvg",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedsceneobject(_:)-y72q",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedscenevalue(_:_:)-2g7up",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedscenevalue(_:_:)-5sqqc",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedvalue(_:_:)-7dg04",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/focusedvalue(_:_:)-lxna",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/help(_:)-1wewq",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/help(_:)-8jsu",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/help(_:)-o2yz",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listitemtint(_:)-1pdbj",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listitemtint(_:)-3l7z2",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionspacing(_:)-6o5vl",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/listsectionspacing(_:)-6v6gt",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:)-14pyh",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:)-8kyjc",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:)-9cz9t",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:displaymode:)-26boi",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:displaymode:)-43teg",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitle(_:displaymode:)-8rkm5",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:)-2nq0t",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:)-8row",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:preview:)-180l3",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:preview:)-535ge",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:preview:)-58ate",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationdocument(_:preview:)-8yrj2",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-4ty35",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-578pr",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-6ngl7",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-6p0j3",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/navigationtitle(_:)-7klnn",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onchange(of:initial:_:)-1bx8r",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onchange(of:initial:_:)-x55z",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/oncontinuoushover(coordinatespace:perform:)-2e4h3",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/oncontinuoushover(coordinatespace:perform:)-4uhu",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:delegate:)-5ctsh",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:delegate:)-9nots",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-5lul7",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-61m5y",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-6retw",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ondrop(of:istargeted:perform:)-9buo3",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ontapgesture(count:coordinatespace:perform:)-1sk6h",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/ontapgesture(count:coordinatespace:perform:)-34ttv",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/padding(_:)-7u10l",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/padding(_:)-dcv7",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/renameaction(_:)-97she",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/renameaction(_:)-i3hb",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareainset(edge:alignment:spacing:content:)-1fweo",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareainset(edge:alignment:spacing:content:)-94rsk",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareapadding(_:)-5104e",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareapadding(_:)-9h206",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaleeffect(_:anchor:)-3dsi4",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaleeffect(_:anchor:)-5256",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchcompletion(_:)-4s6j1",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchcompletion(_:)-6uvh0",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3033k",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3m0vc",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-7ox1h",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:placement:prompt:token:)-146t9",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:placement:prompt:token:)-5qzge",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:editabletokens:placement:prompt:token:)-7bhj7",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:ispresented:placement:prompt:)-3hz1x",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:ispresented:placement:prompt:)-6a7z2",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:ispresented:placement:prompt:)-7dntv",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:)-2qwco",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:)-2z3cz",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:)-8zhax",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:suggestions:)-1892m",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:suggestions:)-4v3de",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:placement:prompt:suggestions:)-5kwws",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5n5yq",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8yz0i",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:ispresented:placement:prompt:token:)-uzt2",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:)-2l2wg",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:)-5voi",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:placement:prompt:token:)-70o3v",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2xvt2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5bgc2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-84n3x",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1r4mn",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2k550",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8ly8h",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/linkview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tint(_:)-2hr4t",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tint(_:)-5fyyn",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(content:)-5c5dn",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(content:)-5glx",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarbackground(_:for:)-2iia1",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarbackground(_:for:)-7j098",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typeselectequivalent(_:)-3gxek",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typeselectequivalent(_:)-romc",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typeselectequivalent(_:)-tgzw",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typesettinglanguage(_:isenabled:)-5ntu3",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/typesettinglanguage(_:isenabled:)-97fue",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/linkview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/linkview",
            "title" : "LinkView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(event:numberformatter:)-765up",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, numberFormatter: NumberFormatter?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(event:numberformatter:)-8dskz",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, numberFormatter: NumberFormatter?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(event:numberformatter:header:)",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, numberFormatter: NumberFormatter?, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(progress:goal:instructions:iscomplete:header:)",
                "title" : "init(progress: Text, goal: Text, instructions: Text?, isComplete: Bool, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/init(title:detail:progress:goal:instructions:iscomplete:)",
                "title" : "init(title: Text, detail: Text?, progress: Text, goal: Text, instructions: Text?, isComplete: Bool)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(activationpoint:)-2vc4n",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(activationpoint:)-4tke9",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(named:_:)-2achr",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(named:_:)-5lmgp",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaction(named:_:)-8wla7",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityactivationpoint(_:)-51vtv",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityactivationpoint(_:)-9tnp2",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1frm",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1ghpc",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-1w898",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-2mleb",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-319ii",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-4jnp7",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-84ewu",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitycustomcontent(_:_:importance:)-90yl7",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhint(_:)-1iyim",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhint(_:)-51wq3",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityhint(_:)-zrmy",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityinputlabels(_:)-19tdv",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityinputlabels(_:)-2yg6m",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityinputlabels(_:)-5fwgl",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabel(_:)-3e4bz",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabel(_:)-51osz",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabel(_:)-5b72e",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-103iw",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-8g4ij",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-8n0es",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:)-8yx0b",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3utdl",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-4ee8y",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5lq5f",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-ubuz",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-2k23g",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-3hdnp",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-6gkz2",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:entries:entrylabel:)-9ici7",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-5gowo",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-6f4dv",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-7oqug",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotor(_:textranges:)-7ykt7",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityvalue(_:)-943nx",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityvalue(_:)-9hkwn",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityvalue(_:)-r9ap",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:)-5cilp",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:)-6rb6t",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:)-96vky",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-23j2a",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-8b9vt",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:actions:message:)-9uxwe",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-30t30",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-9eyu3",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:)-tvlv",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-1xjmu",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-8s6qp",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(_:ispresented:presenting:actions:message:)-daic",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alignmentguide(_:computevalue:)-13uqz",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alignmentguide(_:computevalue:)-9tmm2",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/aspectratio(_:contentmode:)-4f5lg",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/aspectratio(_:contentmode:)-5vpey",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:in:fillstyle:)-1f95p",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(_:in:fillstyle:)-8or85",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(in:fillstyle:)-18jui",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/background(in:fillstyle:)-53s10",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-1wpt",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-8857w",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-8up1h",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badge(_:)-9bh97",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonstyle(_:)-1cl4e",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/buttonstyle(_:)-6kaw4",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-17tns",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1gmvt",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4hbbr",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2pda6",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6r7ss",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7170r",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-33e5x",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4r5f1",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-h0h9",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-10tuq",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8aon5",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9bfa7",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentmargins(_:_:for:)-6nrbu",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentmargins(_:_:for:)-7smyn",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogsuppressiontoggle(_:issuppressed:)-1bdlt",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogsuppressiontoggle(_:issuppressed:)-75xur",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogsuppressiontoggle(_:issuppressed:)-96lbp",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dynamictypesize(_:)-4qg05",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/dynamictypesize(_:)-9u3ry",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogconfirmationlabel(_:)-611o6",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogconfirmationlabel(_:)-61t7v",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogconfirmationlabel(_:)-6bv6c",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogmessage(_:)-2f4jy",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogmessage(_:)-5nvvc",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogmessage(_:)-dxc5",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5268l",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5i61a",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-2d08s",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5o0oh",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-1x49d",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-4sx2o",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-7na5h",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9z7nq",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporterfilenamelabel(_:)-9y6rg",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporterfilenamelabel(_:)-e51b",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileexporterfilenamelabel(_:)-g5dq",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedobject(_:)-2ta9v",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedobject(_:)-397am",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedsceneobject(_:)-4f3v8",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedsceneobject(_:)-75ouk",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedscenevalue(_:_:)-61zb9",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedscenevalue(_:_:)-6w96t",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedvalue(_:_:)-41eal",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/focusedvalue(_:_:)-5lwk0",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/help(_:)-1jiu1",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/help(_:)-71rsq",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/help(_:)-sljs",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listitemtint(_:)-728xi",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listitemtint(_:)-nelk",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionspacing(_:)-5knvc",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/listsectionspacing(_:)-71eec",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:)-472rx",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:)-5s0ca",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:)-9sba3",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-26s0h",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-3rdo4",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitle(_:displaymode:)-6h9zd",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:)-7r2w9",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:)-9qrd",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:preview:)-1doit",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:preview:)-4ghzl",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:preview:)-57kou",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationdocument(_:preview:)-7tywp",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-16h4k",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-5rsmp",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-5u0d7",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-6rgag",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationtitle(_:)-h812",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onchange(of:initial:_:)-1vqxd",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onchange(of:initial:_:)-84cko",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/oncontinuoushover(coordinatespace:perform:)-38jtj",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/oncontinuoushover(coordinatespace:perform:)-561ce",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:delegate:)-46frb",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:delegate:)-6crxh",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-14xdb",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-31n9d",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-32r9n",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ondrop(of:istargeted:perform:)-731oi",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ontapgesture(count:coordinatespace:perform:)-9duwr",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ontapgesture(count:coordinatespace:perform:)-e0ad",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/padding(_:)-4gnw1",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/padding(_:)-9sii2",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/renameaction(_:)-53to2",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/renameaction(_:)-vit7",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareainset(edge:alignment:spacing:content:)-6c9bv",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareainset(edge:alignment:spacing:content:)-fqej",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareapadding(_:)-4lj12",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareapadding(_:)-fd5l",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaleeffect(_:anchor:)-35thi",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaleeffect(_:anchor:)-7llxq",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchcompletion(_:)-2vcvu",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchcompletion(_:)-6r1qw",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-171j4",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4ooso",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-78krz",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:placement:prompt:token:)-1lr7a",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:placement:prompt:token:)-2h7ox",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:editabletokens:placement:prompt:token:)-8j32z",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:ispresented:placement:prompt:)-1rhj8",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:ispresented:placement:prompt:)-9syl3",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:ispresented:placement:prompt:)-csa3",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:)-3mhky",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:)-575ul",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:)-rjt0",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-2dqg8",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-37zfx",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:placement:prompt:suggestions:)-m9rx",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-4pa2f",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-73qt0",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9205i",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-5eoyh",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-5hnit",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:placement:prompt:token:)-7yr9r",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-1alwb",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4ye67",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-8nie1",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-12zio",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-21sy3",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5oqct",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tint(_:)-69jsc",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tint(_:)-703d9",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(content:)-kv8l",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(content:)-mbea",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarbackground(_:for:)-3pvn4",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarbackground(_:for:)-8wa3i",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typeselectequivalent(_:)-4ht63",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typeselectequivalent(_:)-76poc",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typeselectequivalent(_:)-8qvih",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typesettinglanguage(_:isenabled:)-5nngf",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/typesettinglanguage(_:isenabled:)-8ym3f",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/numericprogresstaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/numericprogresstaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/numericprogresstaskview",
            "title" : "NumericProgressTaskView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockanimationstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockanimationstyle\/statechangeduration",
                    "title" : "var stateChangeDuration: Double",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockanimationstyle\/ockanimationstyler-implementations",
                "title" : "OCKAnimationStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockanimationstyle",
            "title" : "OCKAnimationStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockappearancestyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/borderwidth1",
                    "title" : "var borderWidth1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/borderwidth2",
                    "title" : "var borderWidth2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/cornerradius1",
                    "title" : "var cornerRadius1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/cornerradius2",
                    "title" : "var cornerRadius2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/linewidth1",
                    "title" : "var lineWidth1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/opacity1",
                    "title" : "var opacity1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/shadowoffset1",
                    "title" : "var shadowOffset1: CGSize",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/shadowopacity1",
                    "title" : "var shadowOpacity1: Float",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockappearancestyle\/shadowradius1",
                    "title" : "var shadowRadius1: CGFloat",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockappearancestyle\/ockappearancestyler-implementations",
                "title" : "OCKAppearanceStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockappearancestyle",
            "title" : "OCKAppearanceStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcolorstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/black",
                    "title" : "var black: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/clear",
                    "title" : "var clear: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/custombackground",
                    "title" : "var customBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customblue",
                    "title" : "var customBlue: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customfill",
                    "title" : "var customFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray",
                    "title" : "var customGray: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray2",
                    "title" : "var customGray2: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray3",
                    "title" : "var customGray3: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray4",
                    "title" : "var customGray4: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgray5",
                    "title" : "var customGray5: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/customgroupedbackground",
                    "title" : "var customGroupedBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/label",
                    "title" : "var label: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/quaternarycustomfill",
                    "title" : "var quaternaryCustomFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarycustombackground",
                    "title" : "var secondaryCustomBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarycustomfill",
                    "title" : "var secondaryCustomFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarycustomgroupedbackground",
                    "title" : "var secondaryCustomGroupedBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/secondarylabel",
                    "title" : "var secondaryLabel: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/separator",
                    "title" : "var separator: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/tertiarycustomfill",
                    "title" : "var tertiaryCustomFill: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/tertiarycustomgroupedbackground",
                    "title" : "var tertiaryCustomGroupedBackground: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/tertiarylabel",
                    "title" : "var tertiaryLabel: UIColor",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcolorstyle\/white",
                    "title" : "var white: UIColor",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcolorstyle\/ockcolorstyler-implementations",
                "title" : "OCKColorStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcolorstyle",
            "title" : "OCKColorStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(datapoints:title:gradientstartcolor:gradientendcolor:size:)",
                "title" : "init(dataPoints: [CGPoint], title: String, gradientStartColor: UIColor, gradientEndColor: UIColor, size: CGFloat)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(datapoints:title:size:color:)",
                "title" : "init(dataPoints: [CGPoint], title: String, size: CGFloat, color: UIColor?)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(values:title:gradientstartcolor:gradientendcolor:size:)",
                "title" : "init(values: [CGFloat], title: String, gradientStartColor: UIColor, gradientEndColor: UIColor, size: CGFloat)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/init(values:title:size:color:)",
                "title" : "init(values: [CGFloat], title: String, size: CGFloat, color: UIColor?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/accessibilitylabels",
                "title" : "var accessibilityLabels: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/datapoints",
                "title" : "var dataPoints: [CGPoint]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/gradientendcolor",
                "title" : "var gradientEndColor: UIColor?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/gradientstartcolor",
                "title" : "var gradientStartColor: UIColor?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/size",
                "title" : "var size: CGFloat",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdataseries\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdataseries\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdataseries\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdataseries",
            "title" : "OCKDataSeries",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockdimensionstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight1",
                    "title" : "var buttonHeight1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight2",
                    "title" : "var buttonHeight2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight3",
                    "title" : "var buttonHeight3: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/buttonheight4",
                    "title" : "var buttonHeight4: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/directionalinsets1",
                    "title" : "var directionalInsets1: NSDirectionalEdgeInsets",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/directionalinsets2",
                    "title" : "var directionalInsets2: NSDirectionalEdgeInsets",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/imageheight1",
                    "title" : "var imageHeight1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/imageheight2",
                    "title" : "var imageHeight2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/linewidth1",
                    "title" : "var lineWidth1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/pointsize1",
                    "title" : "var pointSize1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/pointsize2",
                    "title" : "var pointSize2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/pointsize3",
                    "title" : "var pointSize3: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/separatorheight",
                    "title" : "var separatorHeight: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/stackspacing1",
                    "title" : "var stackSpacing1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize1",
                    "title" : "var symbolPointSize1: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize2",
                    "title" : "var symbolPointSize2: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize3",
                    "title" : "var symbolPointSize3: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize4",
                    "title" : "var symbolPointSize4: CGFloat",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockdimensionstyle\/symbolpointsize5",
                    "title" : "var symbolPointSize5: CGFloat",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockdimensionstyle\/ockdimensionstyler-implementations",
                "title" : "OCKDimensionStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockdimensionstyle",
            "title" : "OCKDimensionStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ocklog\/level",
                "title" : "static var level: OSLogType",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/carekitui\/ocklog",
            "title" : "OCKLog",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule\/init(layout:greaterthanorequaltocontentsizecategory:)",
                    "title" : "init(layout: Layout, greaterThanOrEqualToContentSizeCategory: UIContentSizeCategory)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule\/contentsizecategory",
                    "title" : "let contentSizeCategory: UIContentSizeCategory",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule\/layout",
                    "title" : "let layout: Layout",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/rule",
                "title" : "OCKResponsiveLayout.Rule",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/init(sizeclass:rules:)",
                    "title" : "init(sizeClass: SizeClass, rules: [OCKResponsiveLayout<LayoutOption>.Rule<LayoutOption>])",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/init(sizeclasses:rules:)",
                    "title" : "init(sizeClasses: [SizeClass], rules: [OCKResponsiveLayout<LayoutOption>.Rule<LayoutOption>])",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/rules",
                    "title" : "let rules: [OCKResponsiveLayout<LayoutOption>.Rule<LayoutOption>]",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset\/sizeclasses",
                    "title" : "let sizeClasses: [SizeClass]",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassruleset",
                "title" : "OCKResponsiveLayout.SizeClassRuleSet",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/init(defaultlayout:anysizeclassruleset:sizeclassspecificrulesets:)",
                "title" : "init(defaultLayout: LayoutOption, anySizeClassRuleSet: [OCKResponsiveLayout.Rule<LayoutOption>], sizeClassSpecificRuleSets: [SizeClassRuleSet])",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/defaultruleset",
                "title" : "let defaultRuleSet: SizeClassRuleSet",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclassspecificrulesets",
                "title" : "let sizeClassSpecificRuleSets: [SizeClassRuleSet]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/responsivelayoutrule(traitcollection:)",
                "title" : "func responsiveLayoutRule(traitCollection: UITraitCollection) -> LayoutOption",
                "type" : "method"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockresponsivelayout\/sizeclass",
                "title" : "OCKResponsiveLayout.SizeClass",
                "type" : "typealias"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockresponsivelayout",
            "title" : "OCKResponsiveLayout",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockstyle\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/animation",
                    "title" : "var animation: OCKAnimationStyler",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/appearance",
                    "title" : "var appearance: OCKAppearanceStyler",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/color",
                    "title" : "var color: OCKColorStyler",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockstyle\/dimension",
                    "title" : "var dimension: OCKDimensionStyler",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockstyle\/ockstyler-implementations",
                "title" : "OCKStyler Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockstyle",
            "title" : "OCKStyle",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/rectangularcompletionview\/init(iscomplete:content:)",
                "title" : "init(isComplete: Bool, content: () -> Content)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/rectangularcompletionview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(activationpoint:)-1g3i4",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(activationpoint:)-5687a",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(named:_:)-2hqbk",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(named:_:)-42tsy",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaction(named:_:)-7xreg",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityactivationpoint(_:)-1bf69",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityactivationpoint(_:)-4k0ht",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-1pwh7",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-2t9j5",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-32kgu",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-53fg7",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-6xuoh",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-70762",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-8q2ae",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitycustomcontent(_:_:importance:)-zewq",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhint(_:)-5gvx6",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhint(_:)-9gf37",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityhint(_:)-9n33l",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityinputlabels(_:)-18auc",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityinputlabels(_:)-3gbdg",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityinputlabels(_:)-6wrfi",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabel(_:)-1ckt",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabel(_:)-5bbvh",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabel(_:)-87n2q",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-1ze7k",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-2noa3",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-7a1xt",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:)-82c9s",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-57443",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6m8ne",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9amsh",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-uqqd",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-3o0ev",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-4mnfq",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-5n92k",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:entries:entrylabel:)-6jnxc",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-19v1p",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-50h5q",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-5gxpa",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotor(_:textranges:)-62zem",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityvalue(_:)-34ncv",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityvalue(_:)-5lm3g",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityvalue(_:)-6a040",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:)-1s71u",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:)-4b0tz",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:)-9a5me",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:message:)-8ffyn",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:message:)-8jvnp",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:actions:message:)-9kumq",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:)-24bsk",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:)-4if8y",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:)-57176",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:message:)-3um8u",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:message:)-59vx8",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(_:ispresented:presenting:actions:message:)-eccf",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alignmentguide(_:computevalue:)-7hoin",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alignmentguide(_:computevalue:)-8ouyd",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/aspectratio(_:contentmode:)-4e2ar",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/aspectratio(_:contentmode:)-9b12e",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:in:fillstyle:)-4kfwz",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(_:in:fillstyle:)-8mhz2",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(in:fillstyle:)-3q3vn",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/background(in:fillstyle:)-6m0uz",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-30krk",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-5vq9e",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-6y969",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badge(_:)-8f344",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonstyle(_:)-811bz",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/buttonstyle(_:)-9xhvx",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-73hlf",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-89kmz",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-a86r",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-62opj",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-sup7",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-u53w",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3tkoa",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-57npp",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5k9mz",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2w7x0",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7us4n",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-hrbk",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentmargins(_:_:for:)-5dv5j",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentmargins(_:_:for:)-6af3l",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-10m1k",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-34w90",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogsuppressiontoggle(_:issuppressed:)-6dc22",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dynamictypesize(_:)-13on3",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/dynamictypesize(_:)-3foti",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogconfirmationlabel(_:)-78icz",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogconfirmationlabel(_:)-7kg6t",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogconfirmationlabel(_:)-84c1q",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogmessage(_:)-3nm3o",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogmessage(_:)-64ol1",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogmessage(_:)-6eddd",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5nl3s",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6f237",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-1p1or",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-9y2yi",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-12t6c",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-nwhu",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-15o4m",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1z11o",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporterfilenamelabel(_:)-1s55x",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporterfilenamelabel(_:)-33lfs",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileexporterfilenamelabel(_:)-3tvdn",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedobject(_:)-6jmlt",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedobject(_:)-uxol",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedsceneobject(_:)-1jg6b",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedsceneobject(_:)-49l26",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedscenevalue(_:_:)-1m4m",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedscenevalue(_:_:)-58tt4",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedvalue(_:_:)-11kj6",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/focusedvalue(_:_:)-4i6ys",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/help(_:)-1yikw",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/help(_:)-76wtt",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/help(_:)-8sbt6",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listitemtint(_:)-40rk1",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listitemtint(_:)-8fwrs",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionspacing(_:)-8k2z0",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/listsectionspacing(_:)-9bkq7",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:)-6itrd",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:)-6ovdl",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:)-8y94x",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:displaymode:)-3b8yk",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:displaymode:)-4yik9",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitle(_:displaymode:)-7ixnw",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:)-5q9oo",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:)-69myg",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:preview:)-102ue",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:preview:)-1ewma",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:preview:)-4fri1",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationdocument(_:preview:)-53bbl",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-7hnmx",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-89jqy",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-99pho",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-emdq",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationtitle(_:)-s6b9",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onchange(of:initial:_:)-2yc7x",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onchange(of:initial:_:)-pmjj",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/oncontinuoushover(coordinatespace:perform:)-1thmp",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/oncontinuoushover(coordinatespace:perform:)-3cdx6",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:delegate:)-522mu",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:delegate:)-6oddc",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-3lqlx",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-4yjy8",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-65um1",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ondrop(of:istargeted:perform:)-6umd6",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ontapgesture(count:coordinatespace:perform:)-4ej5x",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ontapgesture(count:coordinatespace:perform:)-6bezz",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/padding(_:)-3vzv6",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/padding(_:)-4pfgk",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/renameaction(_:)-4syvo",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/renameaction(_:)-5ejmp",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareainset(edge:alignment:spacing:content:)-62n5m",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareainset(edge:alignment:spacing:content:)-71wbm",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareapadding(_:)-7ttlw",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareapadding(_:)-9ciyc",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaleeffect(_:anchor:)-18m0f",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaleeffect(_:anchor:)-9uo1o",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchcompletion(_:)-2byg4",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchcompletion(_:)-6nlrl",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1u4v8",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8llsv",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-9yuru",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-6jpb0",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-9aki4",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:editabletokens:placement:prompt:token:)-9n9p0",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:ispresented:placement:prompt:)-209b2",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:ispresented:placement:prompt:)-4v5zx",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:ispresented:placement:prompt:)-v7s5",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:)-3hw25",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:)-8v0x5",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:)-e06s",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:suggestions:)-3uzy0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:suggestions:)-3z1as",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:placement:prompt:suggestions:)-6wdjr",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8a52w",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8pdyt",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8ryez",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:)-59pz4",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:)-5mh85",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:placement:prompt:token:)-7my4g",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-3rkw6",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-485ty",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-vya0",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-468pq",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-6knp",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8qhe7",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tint(_:)-45jlv",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tint(_:)-6amuj",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(content:)-532cy",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(content:)-o4v6",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarbackground(_:for:)-7uyby",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarbackground(_:for:)-9212z",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typeselectequivalent(_:)-1bstq",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typeselectequivalent(_:)-5vgw7",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typeselectequivalent(_:)-9io9o",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typesettinglanguage(_:isenabled:)-29hpy",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/typesettinglanguage(_:isenabled:)-3nwpe",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/rectangularcompletionview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/rectangularcompletionview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/rectangularcompletionview",
            "title" : "RectangularCompletionView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(event:header:onerror:)",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, header: () -> Header, onError: (OCKStoreError) -> Void)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(event:onerror:)-9qr7w",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, onError: (OCKStoreError) -> Void)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(event:onerror:)-b91c",
                "title" : "init(event: CareStoreFetchedResult<OCKAnyEvent>, onError: (OCKStoreError) -> Void)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(iscomplete:action:header:)",
                "title" : "init(isComplete: Bool, action: () -> Void, header: () -> Header)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/init(title:detail:iscomplete:action:)",
                "title" : "init(title: Text, detail: Text?, isComplete: Bool, action: () -> Void)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/simpletaskview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(activationpoint:)-408pk",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(activationpoint:)-5olrw",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(named:_:)-1z7g",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(named:_:)-68bcn",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaction(named:_:)-7hpuc",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityactivationpoint(_:)-2mnzt",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityactivationpoint(_:)-9k23b",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-13roy",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-2us44",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-35p1b",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-35zst",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-42ouu",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-8slwr",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-jkui",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitycustomcontent(_:_:importance:)-kw06",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhint(_:)-6u6or",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhint(_:)-9pvlz",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityhint(_:)-me0z",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityinputlabels(_:)-5p528",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityinputlabels(_:)-5q7ud",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityinputlabels(_:)-7f7ev",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabel(_:)-5pa25",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabel(_:)-6306l",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabel(_:)-l2dn",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-3u6vn",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-8o3g0",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-95424",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:)-9vljd",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1girv",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1kn1q",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-54ry8",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5mxhp",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-3qqjm",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-5rdb1",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-5yur4",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:entries:entrylabel:)-7py0z",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-2p1k4",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-754jl",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-7cxd0",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotor(_:textranges:)-84fg8",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityvalue(_:)-3uuxs",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityvalue(_:)-522bi",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityvalue(_:)-53a4h",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/actionsheet(ispresented:content:)",
                    "title" : "func actionSheet(isPresented: Binding<Bool>, content: () -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/actionsheet(item:content:)",
                    "title" : "func actionSheet<T>(item: Binding<T?>, content: (T) -> ActionSheet) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:)-5vo28",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:)-8io7m",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:)-93oxi",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:message:)-2s28d",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:message:)-9yozw",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:actions:message:)-k9gp",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:)-2njox",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:)-3xe3c",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:)-5cwd8",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-1us0p",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-5vyg6",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(_:ispresented:presenting:actions:message:)-671w8",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alignmentguide(_:computevalue:)-7uuqp",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alignmentguide(_:computevalue:)-st5v",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/aspectratio(_:contentmode:)-3wl3v",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/aspectratio(_:contentmode:)-6x88k",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/autocapitalization(_:)",
                    "title" : "func autocapitalization(UITextAutocapitalizationType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:in:fillstyle:)-4z1q4",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(_:in:fillstyle:)-75b37",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(in:fillstyle:)-7ee0z",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/background(in:fillstyle:)-y3q4",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-1ds72",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-1fjzi",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-2ka7p",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badge(_:)-8vwt1",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonstyle(_:)-3ue4q",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/buttonstyle(_:)-sxq7",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/carekitstyle(_:)",
                    "title" : "func careKitStyle(OCKStyler) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1zs4m",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-43omv",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-7x7mt",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-149ak",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3g182",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6eiw8",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5d5qs",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7ffm3",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-wgc9",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-3c99x",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8223o",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8gzm5",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentmargins(_:_:for:)-6bqyt",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentmargins(_:_:for:)-8ihm9",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaulthovereffect(_:)",
                    "title" : "func defaultHoverEffect(HoverEffect?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/deferssystemgestures(on:)",
                    "title" : "func defersSystemGestures(on: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogsuppressiontoggle(_:issuppressed:)-8shwj",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogsuppressiontoggle(_:issuppressed:)-9vt2d",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogsuppressiontoggle(_:issuppressed:)-tn1l",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dynamictypesize(_:)-53x2q",
                    "title" : "func dynamicTypeSize<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/dynamictypesize(_:)-55y",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogconfirmationlabel(_:)-2ej6m",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogconfirmationlabel(_:)-3p1ah",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogconfirmationlabel(_:)-59rkb",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogmessage(_:)-9dblq",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogmessage(_:)-d9j2",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogmessage(_:)-zsf4",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6npyb",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8dcvd",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6ix68",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-8mkeb",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-8gcj9",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9azvv",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-3qd2t",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-wvh2",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporterfilenamelabel(_:)-1pjfv",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporterfilenamelabel(_:)-1t26n",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileexporterfilenamelabel(_:)-6vexn",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/finddisabled(_:)",
                    "title" : "func findDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/findnavigator(ispresented:)",
                    "title" : "func findNavigator(isPresented: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedobject(_:)-3k966",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedobject(_:)-5nh62",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedsceneobject(_:)-7pz26",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedsceneobject(_:)-9sr1i",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedscenevalue(_:_:)-5xrv0",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedscenevalue(_:_:)-8z2r4",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedvalue(_:_:)-8l8ll",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/focusedvalue(_:_:)-9y9wy",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fullscreencover(ispresented:ondismiss:content:)",
                    "title" : "func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/fullscreencover(item:ondismiss:content:)",
                    "title" : "func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/help(_:)-2cbos",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/help(_:)-6mlko",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/help(_:)-x4h8",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hovereffect(_:)",
                    "title" : "func hoverEffect(HoverEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hovereffect(_:isenabled:)",
                    "title" : "func hoverEffect(HoverEffect, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/hovereffectdisabled(_:)",
                    "title" : "func hoverEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/indexviewstyle(_:)",
                    "title" : "func indexViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:)",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyboardtype(_:)",
                    "title" : "func keyboardType(UIKeyboardType) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/linelimit(_:)",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listitemtint(_:)-3xa40",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listitemtint(_:)-5sich",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listrowspacing(_:)",
                    "title" : "func listRowSpacing(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionspacing(_:)-5iemo",
                    "title" : "func listSectionSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/listsectionspacing(_:)-86tdc",
                    "title" : "func listSectionSpacing(ListSectionSpacing) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbaritems(leading:)",
                    "title" : "func navigationBarItems<L>(leading: L) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbaritems(leading:trailing:)",
                    "title" : "func navigationBarItems<L, T>(leading: L, trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbaritems(trailing:)",
                    "title" : "func navigationBarItems<T>(trailing: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:)-4b7pg",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:)-5z9xp",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:)-91o3",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:displaymode:)-2hh5z",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:displaymode:)-4rsyc",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitle(_:displaymode:)-8jls4",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationbartitledisplaymode(_:)",
                    "title" : "func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:)-4llo3",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:)-ag7t",
                    "title" : "func navigationDocument<D>(D) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:preview:)-10qcw",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:preview:)-1kwvq",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:preview:)-1kyw8",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationdocument(_:preview:)-3owx0",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-14n83",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-2hsdb",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-7345",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-7ti91",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationtitle(_:)-8iw80",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onchange(of:initial:_:)-4cit9",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onchange(of:initial:_:)-9pm7h",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/oncontinuoushover(coordinatespace:perform:)-1nruk",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/oncontinuoushover(coordinatespace:perform:)-747ic",
                    "title" : "func onContinuousHover(coordinateSpace: some CoordinateSpaceProtocol, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:delegate:)-3o29b",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:delegate:)-9bgpx",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-3zdr6",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-4ddg",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-58x5i",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ondrop(of:istargeted:perform:)-6asbp",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ontapgesture(count:coordinatespace:perform:)-1jll2",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: some CoordinateSpaceProtocol, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ontapgesture(count:coordinatespace:perform:)-2wx92",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/padding(_:)-1l7vx",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/padding(_:)-9virb",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/renameaction(_:)-4wnk",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/renameaction(_:)-5s158",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/replacedisabled(_:)",
                    "title" : "func replaceDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareainset(edge:alignment:spacing:content:)-7q8u1",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareainset(edge:alignment:spacing:content:)-8el2l",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareapadding(_:)-1vh4a",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareapadding(_:)-3qx1q",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaleeffect(_:anchor:)-59mig",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaleeffect(_:anchor:)-97oo8",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchcompletion(_:)-51uw7",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchcompletion(_:)-soy2",
                    "title" : "func searchCompletion<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchdictationbehavior(_:)",
                    "title" : "func searchDictationBehavior(TextInputDictationBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-29pqc",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-7mogr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-7vscg",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:placement:prompt:token:)-16n37",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:placement:prompt:token:)-17r3u",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:editabletokens:placement:prompt:token:)-77hn3",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:ispresented:placement:prompt:)-3rskb",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:ispresented:placement:prompt:)-5z3gp",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:ispresented:placement:prompt:)-vbza",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:)-1iudg",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:)-1o6ol",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:)-7l30c",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-31y3a",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-39pkz",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:placement:prompt:suggestions:)-y2e0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-39te5",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6hj8v",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8yfli",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-2kjsg",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-673lp",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:placement:prompt:token:)-7bawk",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2p5gi",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-6jm0s",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7c86k",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-67pci",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7b2he",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-7fjvt",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/carekitui\/simpletaskview\/statusbar(hidden:)",
                    "title" : "func statusBar(hidden: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/statusbarhidden(_:)",
                    "title" : "func statusBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textcontenttype(_:)",
                    "title" : "func textContentType(UITextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textinputautocapitalization(_:)",
                    "title" : "func textInputAutocapitalization(TextInputAutocapitalization?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tint(_:)-8lfyx",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tint(_:)-8prga",
                    "title" : "func tint<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(content:)-3q42t",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(content:)-5oyhp",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarbackground(_:for:)-2jdf5",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarbackground(_:for:)-8efy",
                    "title" : "func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typeselectequivalent(_:)-70jlb",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typeselectequivalent(_:)-8lzx1",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typeselectequivalent(_:)-8uzrs",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typesettinglanguage(_:isenabled:)-5ijfe",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/typesettinglanguage(_:isenabled:)-5letp",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/simpletaskview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/carekitui\/simpletaskview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/simpletaskview",
            "title" : "SimpleTaskView",
            "type" : "struct"
          },
          {
            "title" : "Functions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/carekitui\/loc(_:_:arguments:)",
            "title" : "func loc(String, String, arguments: [CVarArg]) -> String",
            "type" : "func"
          },
          {
            "title" : "Enumerations",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskviewstatus\/complete(_:_:)",
                "title" : "case complete(Text, Text?)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/labeledvaluetaskviewstatus\/incomplete(_:)",
                "title" : "case incomplete(Text)",
                "type" : "case"
              }
            ],
            "path" : "\/documentation\/carekitui\/labeledvaluetaskviewstatus",
            "title" : "LabeledValueTaskViewStatus",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/appstore(id:title:)",
                "title" : "case appStore(id: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/call(phonenumber:title:)",
                "title" : "case call(phoneNumber: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/email(recipient:title:)",
                "title" : "case email(recipient: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/location(_:_:title:)",
                "title" : "case location(String, String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/message(phonenumber:title:)",
                "title" : "case message(phoneNumber: String, title: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/url(_:title:symbol:)",
                "title" : "case url(URL, title: String, symbol: String)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/website(_:title:)",
                "title" : "case website(String, title: String)",
                "type" : "case"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/linkitem\/url",
                "title" : "var url: URL?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/linkitem\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitui\/linkitem\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/linkitem",
            "title" : "LinkItem",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/dimmed",
                "title" : "case dimmed",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/empty",
                "title" : "case empty",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/progress(_:)",
                "title" : "case progress(CGFloat)",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/zero",
                "title" : "case zero",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/carekitui\/ockcompletionstate\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/carekitui\/ockcompletionstate\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/carekitui\/ockcompletionstate",
            "title" : "OCKCompletionState",
            "type" : "enum"
          }
        ],
        "path" : "\/documentation\/carekitui",
        "title" : "CareKitUI",
        "type" : "module"
      },
      {
        "children" : [
          {
            "title" : "Structures",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/init(_:)-1tqf4",
                "title" : "init<C>(C)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/init(minimumcapacity:)",
                "title" : "init(minimumCapacity: Int)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/init(unsafeuninitializedcapacity:initializingwith:)",
                "title" : "init(unsafeUninitializedCapacity: Int, initializingWith: (inout UnsafeMutableBufferPointer<Element>, inout Int) throws -> Void) rethrows",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/append(contentsof:)-29aoh",
                "title" : "func append<C>(contentsOf: C)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/popfirst()",
                "title" : "func popFirst() -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/prepend(_:)",
                "title" : "func prepend(Element)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/prepend(contentsof:)-51zn6",
                "title" : "func prepend<C>(contentsOf: C)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/dequemodule\/deque\/prepend(contentsof:)-96y15",
                "title" : "func prepend<S>(contentsOf: S)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/difference(from:)",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/firstrange(of:)-6o81s",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/joined(separator:)-7f1k2",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lastindex(of:)",
                    "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/contains(_:)-1wjaz",
                    "title" : "func contains<C>(C) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/firstindex(of:)",
                    "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/firstrange(of:)-81nai",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/map(_:)-885cp",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-24der",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-82ctn",
                    "title" : "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-1klky",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-6ee8i",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-ejld",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index",
                    "title" : "Deque.Index",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/indices-swift.typealias",
                    "title" : "Deque.Indices",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subsequence",
                    "title" : "Deque.SubSequence",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/custommirror",
                    "title" : "var customMirror: Mirror",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/customreflectable-implementations",
                "title" : "CustomReflectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/==(_:_:)",
                    "title" : "static func == (Deque<Element>, Deque<Element>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(arrayliteral:)",
                    "title" : "init(arrayLiteral: Element...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/expressiblebyarrayliteral-implementations",
                "title" : "ExpressibleByArrayLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/partition(by:)-7fwft",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/partition(by:)-90y0t",
                    "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reverse()",
                    "title" : "func reverse()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/shuffle()",
                    "title" : "func shuffle()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/shuffle(using:)",
                    "title" : "func shuffle<T>(using: inout T)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/sort()",
                    "title" : "func sort()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/sort(by:)",
                    "title" : "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/swapat(_:_:)-2riuy",
                    "title" : "func swapAt(Self.Index, Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/swapat(_:_:)-7910s",
                    "title" : "func swapAt(Int, Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/withcontiguousmutablestorageifavailable(_:)-4goyj",
                    "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/withcontiguousmutablestorageifavailable(_:)-9ksuh",
                    "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-1b1nh",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-1li81",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-2gsji",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-3hvat",
                    "title" : "subscript(Range<Self.Index>) -> Slice<Self>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-47peg",
                    "title" : "subscript(Range<Self.Index>) -> Self.SubSequence",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/mutablecollection-implementations",
                "title" : "MutableCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/indices-swift.property",
                    "title" : "var indices: Range<Int>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/formindex(after:)",
                    "title" : "func formIndex(after: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/formindex(before:)",
                    "title" : "func formIndex(before: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-22tpo",
                    "title" : "subscript(Range<Int>) -> Slice<Deque<Element>>",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/subscript(_:)-9nk44",
                    "title" : "subscript(Int) -> Element",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/+(_:_:)-2ezjl",
                    "title" : "static func + <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/+(_:_:)-2udes",
                    "title" : "static func + <Other>(Self, Other) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/+(_:_:)-647oo",
                    "title" : "static func + <Other>(Other, Self) -> Self",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/+=(_:_:)",
                    "title" : "static func += <Other>(inout Self, Other)",
                    "type" : "op"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init()",
                    "title" : "init()",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(_:)-2pl79",
                    "title" : "init<S>(S)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(_:)-8tyaw",
                    "title" : "init<S>(S)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(repeating:count:)-4v1gt",
                    "title" : "init(repeating: Element, count: Int)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/init(repeating:count:)-5n2n3",
                    "title" : "init(repeating: Self.Element, count: Int)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/append(_:)-6xmiz",
                    "title" : "func append(Self.Element)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/append(_:)-9h4m7",
                    "title" : "func append(Element)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/append(contentsof:)-6ewjz",
                    "title" : "func append<S>(contentsOf: S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/append(contentsof:)-8rqnl",
                    "title" : "func append<S>(contentsOf: S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/applying(_:)",
                    "title" : "func applying(CollectionDifference<Self.Element>) -> Self?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/insert(_:at:)-6fcpk",
                    "title" : "func insert(Self.Element, at: Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/insert(_:at:)-9hsp7",
                    "title" : "func insert(Element, at: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/insert(contentsof:at:)-1d60f",
                    "title" : "func insert<C>(contentsOf: C, at: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/insert(contentsof:at:)-quf0",
                    "title" : "func insert<C>(contentsOf: C, at: Self.Index)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/poplast()",
                    "title" : "func popLast() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/remove(at:)-25pt",
                    "title" : "func remove(at: Self.Index) -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/remove(at:)-3imgi",
                    "title" : "func remove(at: Int) -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removeall(keepingcapacity:)-2cas8",
                    "title" : "func removeAll(keepingCapacity: Bool)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removeall(keepingcapacity:)-yeby",
                    "title" : "func removeAll(keepingCapacity: Bool)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removeall(where:)-2ynh1",
                    "title" : "func removeAll(where: (Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removeall(where:)-5e3im",
                    "title" : "func removeAll(where: (Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removefirst()-1vdmt",
                    "title" : "func removeFirst() -> Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removefirst()-5sg5i",
                    "title" : "func removeFirst() -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removefirst(_:)-2vuji",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removefirst(_:)-8phg7",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removelast()",
                    "title" : "func removeLast() -> Self.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removelast(_:)",
                    "title" : "func removeLast(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removesubrange(_:)-3ab3y",
                    "title" : "func removeSubrange<R>(R)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removesubrange(_:)-6dkhw",
                    "title" : "func removeSubrange(Range<Self.Index>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/removesubrange(_:)-8oy85",
                    "title" : "func removeSubrange(Range<Int>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replace(_:with:maxreplacements:)",
                    "title" : "func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacesubrange(_:with:)-1sroc",
                    "title" : "func replaceSubrange<C>(Range<Self.Index>, with: C)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacesubrange(_:with:)-2xunu",
                    "title" : "func replaceSubrange<C, R>(R, with: C)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacesubrange(_:with:)-5rtzd",
                    "title" : "func replaceSubrange<C>(Range<Int>, with: C)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacing(_:with:maxreplacements:)",
                    "title" : "func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/replacing(_:with:subrange:maxreplacements:)",
                    "title" : "func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reservecapacity(_:)-7qlut",
                    "title" : "func reserveCapacity(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reservecapacity(_:)-9lqxx",
                    "title" : "func reserveCapacity(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/trimprefix(_:)",
                    "title" : "func trimPrefix<Prefix>(Prefix)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/trimprefix(while:)",
                    "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/rangereplaceablecollection-implementations",
                "title" : "RangeReplaceableCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/dequemodule\/deque\/iterator\/next()",
                        "title" : "func next() -> Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/dequemodule\/deque\/iterator",
                    "title" : "Deque.Iterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/contains(_:)-8w2ss",
                    "title" : "func contains(Self.Element) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/flatmap(_:)-3f66n",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/flatmap(_:)-4q9nu",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/joined(separator:)-4husz",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/joined(separator:)-4r7h7",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/makeiterator()",
                    "title" : "func makeIterator() -> Deque<Element>.Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/map(_:)-47t1m",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/split(separator:maxsplits:omittingemptysubsequences:)-3lk93",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/withcontiguousstorageifavailable(_:)-4bcpo",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/dequemodule\/deque\/withcontiguousstorageifavailable(_:)-b0eu",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/dequemodule\/deque\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/dequemodule\/deque",
            "title" : "Deque",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/keys",
                    "title" : "var keys: OrderedSet<Key>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/values",
                    "title" : "var values: OrderedDictionary<Key, Value>.Values",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(forkey:)",
                    "title" : "func index(forKey: Key) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/partition(by:)",
                    "title" : "func partition(by: (OrderedDictionary<Key, Value>.Elements.Element) throws -> Bool) rethrows -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/remove(at:)",
                    "title" : "func remove(at: Int) -> OrderedDictionary<Key, Value>.Elements.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removeall(keepingcapacity:)",
                    "title" : "func removeAll(keepingCapacity: Bool)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removeall(where:)",
                    "title" : "func removeAll(where: (OrderedDictionary<Key, Value>.Elements.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removefirst()",
                    "title" : "func removeFirst() -> OrderedDictionary<Key, Value>.Elements.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removefirst(_:)",
                    "title" : "func removeFirst(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removelast()",
                    "title" : "func removeLast() -> OrderedDictionary<Key, Value>.Elements.Element",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removelast(_:)",
                    "title" : "func removeLast(Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removesubrange(_:)-5x7oo",
                    "title" : "func removeSubrange<R>(R)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/removesubrange(_:)-7wdak",
                    "title" : "func removeSubrange(Range<Int>)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/reverse()",
                    "title" : "func reverse()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/shuffle()",
                    "title" : "func shuffle()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/shuffle(using:)",
                    "title" : "func shuffle<T>(using: inout T)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/sort()",
                    "title" : "func sort()",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/sort(by:)",
                    "title" : "func sort(by: (OrderedDictionary<Key, Value>.Elements.Element, OrderedDictionary<Key, Value>.Elements.Element) throws -> Bool) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/swapat(_:_:)",
                    "title" : "func swapAt(Int, Int)",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/reversed()",
                        "title" : "func reversed() -> ReversedCollection<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/count",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/map(_:)-4vxr9",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-18wmp",
                        "title" : "subscript<R>(R) -> Self.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-ybix",
                        "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                        "type" : "subscript"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/custommirror",
                        "title" : "var customMirror: Mirror",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/customreflectable-implementations",
                    "title" : "CustomReflectable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/==(_:_:)",
                        "title" : "static func == (OrderedDictionary<Key, Value>.Elements, OrderedDictionary<Key, Value>.Elements) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/hashable-implementations",
                    "title" : "Hashable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Structures",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/keys",
                            "title" : "var keys: OrderedSet<Key>.SubSequence",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/values",
                            "title" : "var values: OrderedDictionary<Key, Value>.Values.SubSequence",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(forkey:)",
                            "title" : "func index(forKey: Key) -> Int?",
                            "type" : "method"
                          },
                          {
                            "title" : "Default Implementations",
                            "type" : "groupMarker"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/last",
                                "title" : "var last: Self.Element?",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/difference(from:by:)",
                                "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/droplast(_:)",
                                "title" : "func dropLast(Int) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/last(where:)",
                                "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/lastindex(where:)",
                                "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/poplast()",
                                "title" : "func popLast() -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/removelast()",
                                "title" : "func removeLast() -> Self.Element",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/removelast(_:)",
                                "title" : "func removeLast(Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/reversed()",
                                "title" : "func reversed() -> ReversedCollection<Self>",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/suffix(_:)",
                                "title" : "func suffix(Int) -> Self.SubSequence",
                                "type" : "method"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/bidirectionalcollection-implementations",
                            "title" : "BidirectionalCollection Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/count",
                                "title" : "var count: Int",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/first",
                                "title" : "var first: Self.Element?",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/isempty",
                                "title" : "var isEmpty: Bool",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/underestimatedcount",
                                "title" : "var underestimatedCount: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/drop(while:)",
                                "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/dropfirst(_:)",
                                "title" : "func dropFirst(Int) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/firstindex(where:)",
                                "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(_:offsetby:)",
                                "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(_:offsetby:limitedby:)",
                                "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/map(_:)-4t4nh",
                                "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/popfirst()",
                                "title" : "func popFirst() -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(_:)",
                                "title" : "func prefix(Int) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(through:)",
                                "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(upto:)",
                                "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/prefix(while:)",
                                "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomelement()",
                                "title" : "func randomElement() -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomelement(using:)",
                                "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/removefirst()",
                                "title" : "func removeFirst() -> Self.Element",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/removefirst(_:)",
                                "title" : "func removeFirst(Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                                "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/suffix(from:)",
                                "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/trimprefix(while:)",
                                "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/trimmingprefix(while:)",
                                "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                                "type" : "method"
                              },
                              {
                                "title" : "Subscripts",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-7s7y6",
                                "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                                "type" : "subscript"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-98vi9",
                                "title" : "subscript<R>(R) -> Self.SubSequence",
                                "type" : "subscript"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/collection-implementations",
                            "title" : "Collection Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/endindex",
                                "title" : "var endIndex: Int",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/indices-swift.property",
                                "title" : "var indices: Range<Int>",
                                "type" : "property"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/startindex",
                                "title" : "var startIndex: Int",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/distance(from:to:)",
                                "title" : "func distance(from: Int, to: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(after:)",
                                "title" : "func formIndex(after: inout Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/formindex(before:)",
                                "title" : "func formIndex(before: inout Int)",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(_:offsetby:)",
                                "title" : "func index(Int, offsetBy: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(_:offsetby:limitedby:)",
                                "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(after:)",
                                "title" : "func index(after: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index(before:)",
                                "title" : "func index(before: Int) -> Int",
                                "type" : "method"
                              },
                              {
                                "title" : "Subscripts",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-38loo",
                                "title" : "subscript(Range<Int>) -> OrderedDictionary<Key, Value>.Elements.SubSequence.SubSequence",
                                "type" : "subscript"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subscript(_:)-68n2a",
                                "title" : "subscript(Int) -> OrderedDictionary<Key, Value>.Elements.SubSequence.Element",
                                "type" : "subscript"
                              },
                              {
                                "title" : "Type Aliases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/index",
                                "title" : "OrderedDictionary.Elements.SubSequence.Index",
                                "type" : "typealias"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/indices-swift.typealias",
                                "title" : "OrderedDictionary.Elements.SubSequence.Indices",
                                "type" : "typealias"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/subsequence",
                                "title" : "OrderedDictionary.Elements.SubSequence.SubSequence",
                                "type" : "typealias"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/randomaccesscollection-implementations",
                            "title" : "RandomAccessCollection Implementations",
                            "type" : "symbol"
                          },
                          {
                            "children" : [
                              {
                                "title" : "Structures",
                                "type" : "groupMarker"
                              },
                              {
                                "children" : [
                                  {
                                    "title" : "Instance Methods",
                                    "type" : "groupMarker"
                                  },
                                  {
                                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/iterator\/next()",
                                    "title" : "func next() -> OrderedDictionary<Key, Value>.Elements.SubSequence.Element?",
                                    "type" : "method"
                                  }
                                ],
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/iterator",
                                "title" : "OrderedDictionary.Elements.SubSequence.Iterator",
                                "type" : "struct"
                              },
                              {
                                "title" : "Instance Properties",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/lazy",
                                "title" : "var lazy: LazySequence<Self>",
                                "type" : "property"
                              },
                              {
                                "title" : "Instance Methods",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/allsatisfy(_:)",
                                "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/compactmap(_:)",
                                "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/contains(where:)",
                                "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/elementsequal(_:by:)",
                                "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/enumerated()",
                                "title" : "func enumerated() -> EnumeratedSequence<Self>",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/filter(_:)",
                                "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/first(where:)",
                                "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/flatmap(_:)-2beoe",
                                "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/flatmap(_:)-88yc7",
                                "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/foreach(_:)",
                                "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/lexicographicallyprecedes(_:by:)",
                                "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/makeiterator()",
                                "title" : "func makeIterator() -> OrderedDictionary<Key, Value>.Elements.SubSequence.Iterator",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/map(_:)-5srcs",
                                "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/max(by:)",
                                "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/min(by:)",
                                "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/reduce(_:_:)",
                                "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/reduce(into:_:)",
                                "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/shuffled()",
                                "title" : "func shuffled() -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/shuffled(using:)",
                                "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/sorted(by:)",
                                "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/starts(with:by:)",
                                "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                                "type" : "method"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/withcontiguousstorageifavailable(_:)",
                                "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                                "type" : "method"
                              },
                              {
                                "title" : "Type Aliases",
                                "type" : "groupMarker"
                              },
                              {
                                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/element",
                                "title" : "OrderedDictionary.Elements.SubSequence.Element",
                                "type" : "typealias"
                              }
                            ],
                            "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence\/sequence-implementations",
                            "title" : "Sequence Implementations",
                            "type" : "symbol"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subsequence",
                        "title" : "OrderedDictionary.Elements.SubSequence",
                        "type" : "struct"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/endindex",
                        "title" : "var endIndex: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/startindex",
                        "title" : "var startIndex: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/distance(from:to:)",
                        "title" : "func distance(from: Int, to: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/formindex(after:)",
                        "title" : "func formIndex(after: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/formindex(before:)",
                        "title" : "func formIndex(before: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(_:offsetby:)",
                        "title" : "func index(Int, offsetBy: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(after:)",
                        "title" : "func index(after: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index(before:)",
                        "title" : "func index(before: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-4xwc2",
                        "title" : "subscript(Int) -> OrderedDictionary<Key, Value>.Elements.Element",
                        "type" : "subscript"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/subscript(_:)-5kdk6",
                        "title" : "subscript(Range<Int>) -> OrderedDictionary<Key, Value>.Elements.SubSequence",
                        "type" : "subscript"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/index",
                        "title" : "OrderedDictionary.Elements.Index",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/indices",
                        "title" : "OrderedDictionary.Elements.Indices",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/randomaccesscollection-implementations",
                    "title" : "RandomAccessCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/flatmap(_:)-806a1",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/flatmap(_:)-91r64",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/makeiterator()",
                        "title" : "func makeIterator() -> OrderedDictionary<Key, Value>.Iterator",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/map(_:)-5j1b0",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/withcontiguousstorageifavailable(_:)",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/element",
                        "title" : "OrderedDictionary.Elements.Element",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.struct",
                "title" : "OrderedDictionary.Elements",
                "type" : "struct"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/elements",
                    "title" : "var elements: Array<Value>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withunsafebufferpointer(_:)",
                    "title" : "func withUnsafeBufferPointer<R>((UnsafeBufferPointer<OrderedDictionary<Key, Value>.Values.Element>) throws -> R) rethrows -> R",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withunsafemutablebufferpointer(_:)",
                    "title" : "func withUnsafeMutableBufferPointer<R>((inout UnsafeMutableBufferPointer<OrderedDictionary<Key, Value>.Values.Element>) throws -> R) rethrows -> R",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/last",
                        "title" : "var last: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/difference(from:)",
                        "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/difference(from:by:)",
                        "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/droplast(_:)",
                        "title" : "func dropLast(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/firstrange(of:)-3nlux",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/joined(separator:)-1mqyi",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/last(where:)",
                        "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lastindex(of:)",
                        "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lastindex(where:)",
                        "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/reversed()",
                        "title" : "func reversed() -> ReversedCollection<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/suffix(_:)",
                        "title" : "func suffix(Int) -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/bidirectionalcollection-implementations",
                    "title" : "BidirectionalCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/count",
                        "title" : "var count: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/first",
                        "title" : "var first: Self.Element?",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/underestimatedcount",
                        "title" : "var underestimatedCount: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/contains(_:)-316th",
                        "title" : "func contains<C>(C) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/drop(while:)",
                        "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/dropfirst(_:)",
                        "title" : "func dropFirst(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/firstindex(of:)",
                        "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/firstindex(where:)",
                        "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/firstrange(of:)-1abqc",
                        "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/formindex(_:offsetby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/formindex(_:offsetby:limitedby:)",
                        "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(of:)",
                        "title" : "func index(of: Self.Element) -> Self.Index?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/makeiterator()",
                        "title" : "func makeIterator() -> IndexingIterator<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/map(_:)-35c33",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/prefix(_:)",
                        "title" : "func prefix(Int) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/prefix(through:)",
                        "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/prefix(upto:)",
                        "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/prefix(while:)",
                        "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/randomelement()",
                        "title" : "func randomElement() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/randomelement(using:)",
                        "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/ranges(of:)",
                        "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                        "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-10hnb",
                        "title" : "func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-7mv79",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/suffix(from:)",
                        "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/trimmingprefix(_:)",
                        "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/trimmingprefix(while:)",
                        "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/collection-implementations",
                    "title" : "Collection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/==(_:_:)",
                        "title" : "static func == (OrderedDictionary<Key, Value>.Values, OrderedDictionary<Key, Value>.Values) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/hashable-implementations",
                    "title" : "Hashable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/partition(by:)-6cdt6",
                        "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/partition(by:)-7ahp1",
                        "title" : "func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/partition(by:)-9x0i5",
                        "title" : "func partition(by: (Value) throws -> Bool) rethrows -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/reverse()",
                        "title" : "func reverse()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/shuffle()",
                        "title" : "func shuffle()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/shuffle(using:)",
                        "title" : "func shuffle<T>(using: inout T)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sort()",
                        "title" : "func sort()",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sort(by:)",
                        "title" : "func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/swapat(_:_:)-77eiy",
                        "title" : "func swapAt(Int, Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/swapat(_:_:)-7t6ng",
                        "title" : "func swapAt(Self.Index, Self.Index)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withcontiguousmutablestorageifavailable(_:)-3l1og",
                        "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withcontiguousmutablestorageifavailable(_:)-4xcqv",
                        "title" : "func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<OrderedDictionary<Key, Value>.Values.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/mutablecollection-implementations",
                    "title" : "MutableCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/endindex",
                        "title" : "var endIndex: Int",
                        "type" : "property"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/startindex",
                        "title" : "var startIndex: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/distance(from:to:)",
                        "title" : "func distance(from: Int, to: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/formindex(after:)",
                        "title" : "func formIndex(after: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/formindex(before:)",
                        "title" : "func formIndex(before: inout Int)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(_:offsetby:)",
                        "title" : "func index(Int, offsetBy: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(_:offsetby:limitedby:)",
                        "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(after:)",
                        "title" : "func index(after: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index(before:)",
                        "title" : "func index(before: Int) -> Int",
                        "type" : "method"
                      },
                      {
                        "title" : "Subscripts",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/subscript(_:)",
                        "title" : "subscript(Int) -> Value",
                        "type" : "subscript"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/index",
                        "title" : "OrderedDictionary.Values.Index",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/indices",
                        "title" : "OrderedDictionary.Values.Indices",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/randomaccesscollection-implementations",
                    "title" : "RandomAccessCollection Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lazy",
                        "title" : "var lazy: LazySequence<Self>",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/allsatisfy(_:)",
                        "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/compactmap(_:)",
                        "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/contains(_:)-1926",
                        "title" : "func contains(Self.Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/contains(where:)",
                        "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/elementsequal(_:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/elementsequal(_:by:)",
                        "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/enumerated()",
                        "title" : "func enumerated() -> EnumeratedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/filter(_:)",
                        "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/first(where:)",
                        "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/flatmap(_:)-4xf12",
                        "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/flatmap(_:)-5nzbh",
                        "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/foreach(_:)",
                        "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/joined()",
                        "title" : "func joined() -> FlattenSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/joined(separator:)-8009t",
                        "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/joined(separator:)-9chrb",
                        "title" : "func joined(separator: String) -> String",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lexicographicallyprecedes(_:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/lexicographicallyprecedes(_:by:)",
                        "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/map(_:)-9ei4k",
                        "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/max()",
                        "title" : "func max() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/max(by:)",
                        "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/min()",
                        "title" : "func min() -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/min(by:)",
                        "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/reduce(_:_:)",
                        "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/reduce(into:_:)",
                        "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/shuffled()",
                        "title" : "func shuffled() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/shuffled(using:)",
                        "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sorted()",
                        "title" : "func sorted() -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sorted(by:)",
                        "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)-7bb2j",
                        "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/starts(with:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/starts(with:by:)",
                        "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)-8v21t",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Value>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/withcontiguousstorageifavailable(_:)-8wk8n",
                        "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/element",
                        "title" : "OrderedDictionary.Values.Element",
                        "type" : "typealias"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/iterator",
                        "title" : "OrderedDictionary.Values.Iterator",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct\/sequence-implementations",
                    "title" : "Sequence Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.struct",
                "title" : "OrderedDictionary.Values",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(_:uniquingkeyswith:)-2y39b",
                "title" : "init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(_:uniquingkeyswith:)-zhfp",
                "title" : "init<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(grouping:by:)-6m2zw",
                "title" : "init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(grouping:by:)-6mahw",
                "title" : "init<S>(grouping: S, by: (S.Element) throws -> Key) rethrows",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(minimumcapacity:persistent:)",
                "title" : "init(minimumCapacity: Int, persistent: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uncheckeduniquekeys:values:)",
                "title" : "init<Keys, Values>(uncheckedUniqueKeys: Keys, values: Values)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uncheckeduniquekeyswithvalues:)-2j0dw",
                "title" : "init<S>(uncheckedUniqueKeysWithValues: S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uncheckeduniquekeyswithvalues:)-6gxhj",
                "title" : "init<S>(uncheckedUniqueKeysWithValues: S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uniquekeys:values:)",
                "title" : "init<Keys, Values>(uniqueKeys: Keys, values: Values)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uniquekeyswithvalues:)-5ux9r",
                "title" : "init<S>(uniqueKeysWithValues: S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(uniquekeyswithvalues:)-88mzi",
                "title" : "init<S>(uniqueKeysWithValues: S)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/count",
                "title" : "var count: Int",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elements-swift.property",
                "title" : "var elements: OrderedDictionary<Key, Value>.Elements",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/isempty",
                "title" : "var isEmpty: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/keys",
                "title" : "var keys: OrderedSet<Key>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/values-swift.property",
                "title" : "var values: OrderedDictionary<Key, Value>.Values",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/compactmapvalues(_:)",
                "title" : "func compactMapValues<T>((Value) throws -> T?) rethrows -> OrderedDictionary<Key, T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/filter(_:)",
                "title" : "func filter((OrderedDictionary<Key, Value>.Element) throws -> Bool) rethrows -> OrderedDictionary<Key, Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/index(forkey:)",
                "title" : "func index(forKey: Key) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/mapvalues(_:)",
                "title" : "func mapValues<T>((Value) throws -> T) rethrows -> OrderedDictionary<Key, T>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/merge(_:uniquingkeyswith:)-6ka2i",
                "title" : "func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/merge(_:uniquingkeyswith:)-9wkad",
                "title" : "func merge<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/merging(_:uniquingkeyswith:)-2e0xa",
                "title" : "func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> OrderedDictionary<Key, Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/merging(_:uniquingkeyswith:)-4z49c",
                "title" : "func merging<S>(S, uniquingKeysWith: (Value, Value) throws -> Value) rethrows -> OrderedDictionary<Key, Value>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/partition(by:)",
                "title" : "func partition(by: (OrderedDictionary<Key, Value>.Element) throws -> Bool) rethrows -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/remove(at:)",
                "title" : "func remove(at: Int) -> OrderedDictionary<Key, Value>.Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removeall(keepingcapacity:)",
                "title" : "func removeAll(keepingCapacity: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removeall(where:)",
                "title" : "func removeAll(where: (OrderedDictionary<Key, Value>.Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removefirst()",
                "title" : "func removeFirst() -> OrderedDictionary<Key, Value>.Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removefirst(_:)",
                "title" : "func removeFirst(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removelast()",
                "title" : "func removeLast() -> OrderedDictionary<Key, Value>.Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removelast(_:)",
                "title" : "func removeLast(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removesubrange(_:)-512n3",
                "title" : "func removeSubrange(Range<Int>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removesubrange(_:)-8rmzx",
                "title" : "func removeSubrange<R>(R)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/removevalue(forkey:)",
                "title" : "func removeValue(forKey: Key) -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reservecapacity(_:)",
                "title" : "func reserveCapacity(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reverse()",
                "title" : "func reverse()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/shuffle()",
                "title" : "func shuffle()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/shuffle(using:)",
                "title" : "func shuffle<T>(using: inout T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/sort()",
                "title" : "func sort()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/sort(by:)",
                "title" : "func sort(by: (OrderedDictionary<Key, Value>.Element, OrderedDictionary<Key, Value>.Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/swapat(_:_:)",
                "title" : "func swapAt(Int, Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/updatevalue(_:forkey:)",
                "title" : "func updateValue(Value, forKey: Key) -> Value?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/updatevalue(_:forkey:insertingat:)",
                "title" : "func updateValue(Value, forKey: Key, insertingAt: Int) -> (originalMember: Value?, index: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/updatevalue(forkey:default:with:)",
                "title" : "func updateValue<R>(forKey: Key, default: () -> Value, with: (inout Value) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/updatevalue(forkey:insertingdefault:at:with:)",
                "title" : "func updateValue<R>(forKey: Key, insertingDefault: () -> Value, at: Int, with: (inout Value) throws -> R) rethrows -> R",
                "type" : "method"
              },
              {
                "title" : "Subscripts",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/subscript(_:)",
                "title" : "subscript(Key) -> Value?",
                "type" : "subscript"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/subscript(_:default:)",
                "title" : "subscript(Key, default _: () -> Value) -> Value",
                "type" : "subscript"
              },
              {
                "title" : "Type Aliases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/index",
                "title" : "OrderedDictionary.Index",
                "type" : "typealias"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/custommirror",
                    "title" : "var customMirror: Mirror",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/customreflectable-implementations",
                "title" : "CustomReflectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/==(_:_:)",
                    "title" : "static func == (OrderedDictionary<Key, Value>, OrderedDictionary<Key, Value>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/init(dictionaryliteral:)",
                    "title" : "init(dictionaryLiteral: (Key, Value)...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/expressiblebydictionaryliteral-implementations",
                "title" : "ExpressibleByDictionaryLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/ordereddictionary\/iterator\/next()",
                        "title" : "func next() -> OrderedDictionary<Key, Value>.Element?",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/iterator",
                    "title" : "OrderedDictionary.Iterator",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> DropFirstSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/droplast(_:)",
                    "title" : "func dropLast(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/flatmap(_:)-4t9a4",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/flatmap(_:)-7ykj5",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/makeiterator()",
                    "title" : "func makeIterator() -> OrderedDictionary<Key, Value>.Iterator",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/map(_:)",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/prefix(_:)",
                    "title" : "func prefix(Int) -> PrefixSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/reversed()",
                    "title" : "func reversed() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/suffix(_:)",
                    "title" : "func suffix(Int) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/withcontiguousstorageifavailable(_:)",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/ordereddictionary\/element",
                    "title" : "OrderedDictionary.Element",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/ordereddictionary\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/orderedcollections\/ordereddictionary",
            "title" : "OrderedDictionary",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-23otz",
                    "title" : "init(OrderedSet<Element>.UnorderedView)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-7u7kx",
                    "title" : "init<Value>(Dictionary<Element, Value>.Keys)",
                    "type" : "init"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-9639t",
                    "title" : "init(Set<Element>)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formintersection(_:)-80iht",
                    "title" : "func formIntersection<S>(S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formsymmetricdifference(_:)-75z52",
                    "title" : "func formSymmetricDifference<S>(S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formunion(_:)-8tuol",
                    "title" : "func formUnion<S>(S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/intersection(_:)-6ee3o",
                    "title" : "func intersection<S>(S) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isdisjoint(with:)-25vmx",
                    "title" : "func isDisjoint(with: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isdisjoint(with:)-8nfqs",
                    "title" : "func isDisjoint<S>(with: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsubset(of:)-7n66e",
                    "title" : "func isStrictSubset<S>(of: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsubset(of:)-91par",
                    "title" : "func isStrictSubset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsubset(of:)-9o6mg",
                    "title" : "func isStrictSubset(of: OrderedSet<Element>.UnorderedView) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsuperset(of:)-1e0xt",
                    "title" : "func isStrictSuperset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsuperset(of:)-5dsfd",
                    "title" : "func isStrictSuperset<S>(of: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsuperset(of:)-89ig3",
                    "title" : "func isStrictSuperset(of: OrderedSet<Element>.UnorderedView) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issubset(of:)-801lo",
                    "title" : "func isSubset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issubset(of:)-952h5",
                    "title" : "func isSubset<S>(of: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issuperset(of:)-2vtig",
                    "title" : "func isSuperset(of: Set<Element>) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issuperset(of:)-9krpz",
                    "title" : "func isSuperset<S>(of: S) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtract(_:)-4pjhu",
                    "title" : "func subtract<S>(S)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtracting(_:)-8e6mw",
                    "title" : "func subtracting<S>(S) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/symmetricdifference(_:)-7r79p",
                    "title" : "func symmetricDifference<S>(S) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/union(_:)-23dm1",
                    "title" : "func union<S>(S) -> OrderedSet<Element>.UnorderedView",
                    "type" : "method"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/debugdescription",
                        "title" : "var debugDescription: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/customdebugstringconvertible-implementations",
                    "title" : "CustomDebugStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/custommirror",
                        "title" : "var customMirror: Mirror",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/customreflectable-implementations",
                    "title" : "CustomReflectable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/description",
                        "title" : "var description: String",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/customstringconvertible-implementations",
                    "title" : "CustomStringConvertible Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/==(_:_:)",
                        "title" : "static func == (OrderedSet<Element>.UnorderedView, OrderedSet<Element>.UnorderedView) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(arrayliteral:)-1tjdx",
                        "title" : "init(arrayLiteral: Element...)",
                        "type" : "init"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/expressiblebyarrayliteral-implementations",
                    "title" : "ExpressibleByArrayLiteral Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/hashable-implementations",
                    "title" : "Hashable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init()",
                        "title" : "init()",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-5b080",
                        "title" : "init<S>(S)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(_:)-6svoq",
                        "title" : "init<S>(S)",
                        "type" : "init"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/init(arrayliteral:)-39slg",
                        "title" : "init(arrayLiteral: Self.Element...)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isempty",
                        "title" : "var isEmpty: Bool",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/contains(_:)",
                        "title" : "func contains(Element) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formintersection(_:)-4ow38",
                        "title" : "func formIntersection(OrderedSet<Element>.UnorderedView)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formsymmetricdifference(_:)-8pkt5",
                        "title" : "func formSymmetricDifference(OrderedSet<Element>.UnorderedView)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/formunion(_:)-6ijb",
                        "title" : "func formUnion(OrderedSet<Element>.UnorderedView)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/insert(_:)",
                        "title" : "func insert(Element) -> (inserted: Bool, memberAfterInsert: Element)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/intersection(_:)-3q45l",
                        "title" : "func intersection(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isdisjoint(with:)-3wuso",
                        "title" : "func isDisjoint(with: OrderedSet<Element>.UnorderedView) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isdisjoint(with:)-7sbsg",
                        "title" : "func isDisjoint(with: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsubset(of:)-33z0l",
                        "title" : "func isStrictSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/isstrictsuperset(of:)-8pbce",
                        "title" : "func isStrictSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issubset(of:)-2dx31",
                        "title" : "func isSubset(of: OrderedSet<Element>.UnorderedView) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issubset(of:)-n4t7",
                        "title" : "func isSubset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issuperset(of:)-4ea6h",
                        "title" : "func isSuperset(of: Self) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/issuperset(of:)-9t33p",
                        "title" : "func isSuperset(of: OrderedSet<Element>.UnorderedView) -> Bool",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/remove(_:)",
                        "title" : "func remove(Element) -> Element?",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtract(_:)-4d5uc",
                        "title" : "func subtract(OrderedSet<Element>.UnorderedView)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtract(_:)-627eq",
                        "title" : "func subtract(Self)",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/subtracting(_:)-3ct1b",
                        "title" : "func subtracting(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/symmetricdifference(_:)-6aed7",
                        "title" : "func symmetricDifference(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/union(_:)-79uk3",
                        "title" : "func union(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>.UnorderedView",
                        "type" : "method"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/update(with:)",
                        "title" : "func update(with: Element) -> Element?",
                        "type" : "method"
                      },
                      {
                        "title" : "Type Aliases",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/element",
                        "title" : "OrderedSet.UnorderedView.Element",
                        "type" : "typealias"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview\/setalgebra-implementations",
                    "title" : "SetAlgebra Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/unorderedview",
                "title" : "OrderedSet.UnorderedView",
                "type" : "struct"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-2d3a9",
                "title" : "init<Value>(Dictionary<Element, Value>.Keys)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-3d7qr",
                "title" : "init<C>(C)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-5zktd",
                "title" : "init<S>(S)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-68j7",
                "title" : "init(OrderedSet<Element>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-7rt2h",
                "title" : "init(OrderedSet<Element>.UnorderedView)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-8tli8",
                "title" : "init(Set<Element>)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(_:)-8zm9d",
                "title" : "init(OrderedSet<Element>.SubSequence)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(minimumcapacity:persistent:)",
                "title" : "init(minimumCapacity: Int, persistent: Bool)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/init(uncheckeduniqueelements:)",
                "title" : "init<S>(uncheckedUniqueElements: S)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/elements",
                "title" : "var elements: [Element]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/unordered",
                "title" : "var unordered: OrderedSet<Element>.UnorderedView",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/append(_:)",
                "title" : "func append(Element) -> (inserted: Bool, index: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/append(contentsof:)",
                "title" : "func append<S>(contentsOf: S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/applying(_:)",
                "title" : "func applying(CollectionDifference<Element>) -> OrderedSet<Element>?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/contains(_:)",
                "title" : "func contains(Element) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/difference(from:)-30bkk",
                "title" : "func difference(from: OrderedSet<Element>) -> CollectionDifference<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/firstindex(of:)",
                "title" : "func firstIndex(of: Element) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formintersection(_:)-2a4y4",
                "title" : "func formIntersection(OrderedSet<Element>.UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formintersection(_:)-43o1u",
                "title" : "func formIntersection(OrderedSet<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formintersection(_:)-7odn2",
                "title" : "func formIntersection<S>(S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formsymmetricdifference(_:)-2ll2z",
                "title" : "func formSymmetricDifference(OrderedSet<Element>.UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formsymmetricdifference(_:)-391sm",
                "title" : "func formSymmetricDifference<S>(S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formsymmetricdifference(_:)-96csi",
                "title" : "func formSymmetricDifference(OrderedSet<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formunion(_:)-3dkzw",
                "title" : "func formUnion(OrderedSet<Element>.UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formunion(_:)-59end",
                "title" : "func formUnion<S>(S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/formunion(_:)-6pksr",
                "title" : "func formUnion(OrderedSet<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/insert(_:at:)",
                "title" : "func insert(Element, at: Int) -> (inserted: Bool, index: Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/intersection(_:)-4o09a",
                "title" : "func intersection(OrderedSet<Element>) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/intersection(_:)-80md4",
                "title" : "func intersection<S>(S) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/intersection(_:)-9yzg3",
                "title" : "func intersection(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isdisjoint(with:)-4tsmx",
                "title" : "func isDisjoint(with: OrderedSet<Element>.UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isdisjoint(with:)-54iy6",
                "title" : "func isDisjoint(with: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isdisjoint(with:)-6vmoh",
                "title" : "func isDisjoint(with: OrderedSet<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isdisjoint(with:)-7nqur",
                "title" : "func isDisjoint<S>(with: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsubset(of:)-10abw",
                "title" : "func isStrictSubset<S>(of: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsubset(of:)-4efhn",
                "title" : "func isStrictSubset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsubset(of:)-8m21h",
                "title" : "func isStrictSubset(of: OrderedSet<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsubset(of:)-9lv3x",
                "title" : "func isStrictSubset(of: OrderedSet<Element>.UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsuperset(of:)-3kfwa",
                "title" : "func isStrictSuperset(of: OrderedSet<Element>.UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsuperset(of:)-5e6d5",
                "title" : "func isStrictSuperset<S>(of: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsuperset(of:)-7u97x",
                "title" : "func isStrictSuperset(of: OrderedSet<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/isstrictsuperset(of:)-98d9s",
                "title" : "func isStrictSuperset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issubset(of:)-3mw6r",
                "title" : "func isSubset(of: OrderedSet<Element>.UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issubset(of:)-8yb29",
                "title" : "func isSubset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issubset(of:)-9hxl4",
                "title" : "func isSubset<S>(of: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issubset(of:)-ptij",
                "title" : "func isSubset(of: OrderedSet<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issuperset(of:)-2bbv8",
                "title" : "func isSuperset(of: OrderedSet<Element>.UnorderedView) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issuperset(of:)-4rrsh",
                "title" : "func isSuperset(of: OrderedSet<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issuperset(of:)-7oow7",
                "title" : "func isSuperset<S>(of: S) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/issuperset(of:)-7xvog",
                "title" : "func isSuperset(of: Set<Element>) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/lastindex(of:)",
                "title" : "func lastIndex(of: Element) -> Int?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/partition(by:)",
                "title" : "func partition(by: (Element) throws -> Bool) rethrows -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/remove(_:)",
                "title" : "func remove(Element) -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/remove(at:)",
                "title" : "func remove(at: Int) -> OrderedSet<Element>.Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removeall(keepingcapacity:)",
                "title" : "func removeAll(keepingCapacity: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removeall(where:)",
                "title" : "func removeAll(where: (Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removefirst()",
                "title" : "func removeFirst() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removefirst(_:)",
                "title" : "func removeFirst(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removelast()",
                "title" : "func removeLast() -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removelast(_:)",
                "title" : "func removeLast(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removesubrange(_:)-2fqke",
                "title" : "func removeSubrange(Range<Int>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/removesubrange(_:)-62u6a",
                "title" : "func removeSubrange<R>(R)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/reservecapacity(_:)",
                "title" : "func reserveCapacity(Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/reverse()",
                "title" : "func reverse()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/shuffle()",
                "title" : "func shuffle()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/shuffle(using:)",
                "title" : "func shuffle<T>(using: inout T)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/sort()",
                "title" : "func sort()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/sort(by:)",
                "title" : "func sort(by: (Element, Element) throws -> Bool) rethrows",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtract(_:)-3b6nj",
                "title" : "func subtract(OrderedSet<Element>)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtract(_:)-9rtmd",
                "title" : "func subtract(OrderedSet<Element>.UnorderedView)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtract(_:)-9wmg8",
                "title" : "func subtract<S>(S)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtracting(_:)-1gl4y",
                "title" : "func subtracting<S>(S) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtracting(_:)-5graf",
                "title" : "func subtracting(OrderedSet<Element>) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/subtracting(_:)-7kl8r",
                "title" : "func subtracting(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/swapat(_:_:)",
                "title" : "func swapAt(Int, Int)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/symmetricdifference(_:)-1810l",
                "title" : "func symmetricDifference(OrderedSet<Element>) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/symmetricdifference(_:)-8dvm6",
                "title" : "func symmetricDifference(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/symmetricdifference(_:)-9huk7",
                "title" : "func symmetricDifference<S>(S) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/union(_:)-2939h",
                "title" : "func union<S>(S) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/union(_:)-3lt5i",
                "title" : "func union(OrderedSet<Element>.UnorderedView) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/union(_:)-67y2h",
                "title" : "func union(OrderedSet<Element>) -> OrderedSet<Element>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/update(_:at:)",
                "title" : "func update(Element, at: Int) -> Element",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/updateorappend(_:)",
                "title" : "func updateOrAppend(Element) -> Element?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/orderedcollections\/orderedset\/updateorinsert(_:at:)",
                "title" : "func updateOrInsert(Element, at: Int) -> (originalMember: Element?, index: Int)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/last",
                    "title" : "var last: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/difference(from:)-4dq1z",
                    "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/difference(from:by:)",
                    "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/droplast(_:)",
                    "title" : "func dropLast(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/firstrange(of:)-38ioh",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/joined(separator:)-9vy69",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/last(where:)",
                    "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/lastindex(where:)",
                    "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/reversed()",
                    "title" : "func reversed() -> ReversedCollection<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/suffix(_:)",
                    "title" : "func suffix(Int) -> Self.SubSequence",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/bidirectionalcollection-implementations",
                "title" : "BidirectionalCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/count",
                    "title" : "var count: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/first",
                    "title" : "var first: Self.Element?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/isempty",
                    "title" : "var isEmpty: Bool",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/underestimatedcount",
                    "title" : "var underestimatedCount: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/drop(while:)",
                    "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/dropfirst(_:)",
                    "title" : "func dropFirst(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/firstindex(where:)",
                    "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/firstrange(of:)-9s1o",
                    "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/formindex(_:offsetby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/formindex(_:offsetby:limitedby:)",
                    "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(of:)",
                    "title" : "func index(of: Self.Element) -> Self.Index?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/makeiterator()",
                    "title" : "func makeIterator() -> IndexingIterator<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/map(_:)-7i7ee",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/prefix(_:)",
                    "title" : "func prefix(Int) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/prefix(through:)",
                    "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/prefix(upto:)",
                    "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/prefix(while:)",
                    "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/randomelement()",
                    "title" : "func randomElement() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/randomelement(using:)",
                    "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/ranges(of:)",
                    "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                    "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/split(separator:maxsplits:omittingemptysubsequences:)",
                    "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/suffix(from:)",
                    "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/trimmingprefix(_:)",
                    "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/trimmingprefix(while:)",
                    "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subscript(_:)-1f4x9",
                    "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subscript(_:)-3qjhg",
                    "title" : "subscript<R>(R) -> Self.SubSequence",
                    "type" : "subscript"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/collection-implementations",
                "title" : "Collection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/debugdescription",
                    "title" : "var debugDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/customdebugstringconvertible-implementations",
                "title" : "CustomDebugStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/custommirror",
                    "title" : "var customMirror: Mirror",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/customreflectable-implementations",
                "title" : "CustomReflectable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/description",
                    "title" : "var description: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/customstringconvertible-implementations",
                "title" : "CustomStringConvertible Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/init(from:)",
                    "title" : "init(from: any Decoder) throws",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/decodable-implementations",
                "title" : "Decodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/encode(to:)",
                    "title" : "func encode(to: any Encoder) throws",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/encodable-implementations",
                "title" : "Encodable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/==(_:_:)",
                    "title" : "static func == (OrderedSet<Element>, OrderedSet<Element>) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/init(arrayliteral:)",
                    "title" : "init(arrayLiteral: Element...)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/expressiblebyarrayliteral-implementations",
                "title" : "ExpressibleByArrayLiteral Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/hashable-implementations",
                "title" : "Hashable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Structures",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Default Implementations",
                        "type" : "groupMarker"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/last",
                            "title" : "var last: Self.Element?",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/difference(from:)",
                            "title" : "func difference<C>(from: C) -> CollectionDifference<Self.Element>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/difference(from:by:)",
                            "title" : "func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/droplast(_:)",
                            "title" : "func dropLast(Int) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/firstrange(of:)-4zhmi",
                            "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/joined(separator:)-72f98",
                            "title" : "func joined(separator: String) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/last(where:)",
                            "title" : "func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lastindex(of:)",
                            "title" : "func lastIndex(of: Self.Element) -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lastindex(where:)",
                            "title" : "func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/poplast()",
                            "title" : "func popLast() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/removelast()",
                            "title" : "func removeLast() -> Self.Element",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/removelast(_:)",
                            "title" : "func removeLast(Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/reversed()",
                            "title" : "func reversed() -> ReversedCollection<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/suffix(_:)",
                            "title" : "func suffix(Int) -> Self.SubSequence",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/bidirectionalcollection-implementations",
                        "title" : "BidirectionalCollection Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/count",
                            "title" : "var count: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/first",
                            "title" : "var first: Self.Element?",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/isempty",
                            "title" : "var isEmpty: Bool",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/underestimatedcount",
                            "title" : "var underestimatedCount: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/drop(while:)",
                            "title" : "func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/dropfirst(_:)",
                            "title" : "func dropFirst(Int) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/firstindex(of:)",
                            "title" : "func firstIndex(of: Self.Element) -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/firstindex(where:)",
                            "title" : "func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/firstrange(of:)-13m6n",
                            "title" : "func firstRange<C>(of: C) -> Range<Self.Index>?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/formindex(_:offsetby:)",
                            "title" : "func formIndex(inout Self.Index, offsetBy: Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/formindex(_:offsetby:limitedby:)",
                            "title" : "func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(of:)",
                            "title" : "func index(of: Self.Element) -> Self.Index?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/makeiterator()",
                            "title" : "func makeIterator() -> IndexingIterator<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/map(_:)-3aqct",
                            "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/popfirst()",
                            "title" : "func popFirst() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/prefix(_:)",
                            "title" : "func prefix(Int) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/prefix(through:)",
                            "title" : "func prefix(through: Self.Index) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/prefix(upto:)",
                            "title" : "func prefix(upTo: Self.Index) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/prefix(while:)",
                            "title" : "func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/randomelement()",
                            "title" : "func randomElement() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/randomelement(using:)",
                            "title" : "func randomElement<T>(using: inout T) -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/ranges(of:)",
                            "title" : "func ranges<C>(of: C) -> [Range<Self.Index>]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/removefirst()",
                            "title" : "func removeFirst() -> Self.Element",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/removefirst(_:)",
                            "title" : "func removeFirst(Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)",
                            "title" : "func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/split(separator:maxsplits:omittingemptysubsequences:)",
                            "title" : "func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/suffix(from:)",
                            "title" : "func suffix(from: Self.Index) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/trimprefix(_:)",
                            "title" : "func trimPrefix<Prefix>(Prefix)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/trimprefix(while:)",
                            "title" : "func trimPrefix(while: (Self.Element) throws -> Bool) throws",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/trimmingprefix(_:)",
                            "title" : "func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/trimmingprefix(while:)",
                            "title" : "func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence",
                            "type" : "method"
                          },
                          {
                            "title" : "Subscripts",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subscript(_:)-3pqvw",
                            "title" : "subscript((UnboundedRange_) -> ()) -> Self.SubSequence",
                            "type" : "subscript"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subscript(_:)-8r0e1",
                            "title" : "subscript<R>(R) -> Self.SubSequence",
                            "type" : "subscript"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/collection-implementations",
                        "title" : "Collection Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Operators",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/!=(_:_:)",
                            "title" : "static func != (Self, Self) -> Bool",
                            "type" : "op"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/==(_:_:)",
                            "title" : "static func == (OrderedSet<Element>.SubSequence, OrderedSet<Element>.SubSequence) -> Bool",
                            "type" : "op"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/equatable-implementations",
                        "title" : "Equatable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/hash(into:)",
                            "title" : "func hash(into: inout Hasher)",
                            "type" : "method"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/hashable-implementations",
                        "title" : "Hashable Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/endindex",
                            "title" : "var endIndex: Int",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/indices-swift.property",
                            "title" : "var indices: OrderedSet<Element>.SubSequence.Indices",
                            "type" : "property"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/startindex",
                            "title" : "var startIndex: Int",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/distance(from:to:)",
                            "title" : "func distance(from: Int, to: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/formindex(after:)",
                            "title" : "func formIndex(after: inout Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/formindex(before:)",
                            "title" : "func formIndex(before: inout Int)",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(_:offsetby:)",
                            "title" : "func index(Int, offsetBy: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(_:offsetby:limitedby:)",
                            "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(after:)",
                            "title" : "func index(after: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index(before:)",
                            "title" : "func index(before: Int) -> Int",
                            "type" : "method"
                          },
                          {
                            "title" : "Subscripts",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subscript(_:)-8zt5n",
                            "title" : "subscript(Int) -> Element",
                            "type" : "subscript"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subscript(_:)-9h1wd",
                            "title" : "subscript(Range<Int>) -> OrderedSet<Element>.SubSequence.SubSequence",
                            "type" : "subscript"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/index",
                            "title" : "OrderedSet.SubSequence.Index",
                            "type" : "typealias"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/indices-swift.typealias",
                            "title" : "OrderedSet.SubSequence.Indices",
                            "type" : "typealias"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/subsequence",
                            "title" : "OrderedSet.SubSequence.SubSequence",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/randomaccesscollection-implementations",
                        "title" : "RandomAccessCollection Implementations",
                        "type" : "symbol"
                      },
                      {
                        "children" : [
                          {
                            "title" : "Instance Properties",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lazy",
                            "title" : "var lazy: LazySequence<Self>",
                            "type" : "property"
                          },
                          {
                            "title" : "Instance Methods",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/allsatisfy(_:)",
                            "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/compactmap(_:)",
                            "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/contains(_:)",
                            "title" : "func contains(Self.Element) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/contains(where:)",
                            "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/elementsequal(_:)",
                            "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/elementsequal(_:by:)",
                            "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/enumerated()",
                            "title" : "func enumerated() -> EnumeratedSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/filter(_:)",
                            "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/first(where:)",
                            "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/flatmap(_:)-87q9z",
                            "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/flatmap(_:)-iuyu",
                            "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/foreach(_:)",
                            "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/joined()",
                            "title" : "func joined() -> FlattenSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/joined(separator:)-42wk1",
                            "title" : "func joined(separator: String) -> String",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/joined(separator:)-6dlvl",
                            "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lexicographicallyprecedes(_:)",
                            "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/lexicographicallyprecedes(_:by:)",
                            "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/map(_:)-wv4l",
                            "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/max()",
                            "title" : "func max() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/max(by:)",
                            "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/min()",
                            "title" : "func min() -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/min(by:)",
                            "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/reduce(_:_:)",
                            "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/reduce(into:_:)",
                            "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/shuffled()",
                            "title" : "func shuffled() -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/shuffled(using:)",
                            "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/sorted()",
                            "title" : "func sorted() -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/sorted(by:)",
                            "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/starts(with:)",
                            "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/starts(with:by:)",
                            "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/withcontiguousstorageifavailable(_:)-16p2s",
                            "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?",
                            "type" : "method"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/withcontiguousstorageifavailable(_:)-9f4iv",
                            "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                            "type" : "method"
                          },
                          {
                            "title" : "Type Aliases",
                            "type" : "groupMarker"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/element",
                            "title" : "OrderedSet.SubSequence.Element",
                            "type" : "typealias"
                          },
                          {
                            "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/iterator",
                            "title" : "OrderedSet.SubSequence.Iterator",
                            "type" : "typealias"
                          }
                        ],
                        "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence\/sequence-implementations",
                        "title" : "Sequence Implementations",
                        "type" : "symbol"
                      }
                    ],
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subsequence",
                    "title" : "OrderedSet.SubSequence",
                    "type" : "struct"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/endindex",
                    "title" : "var endIndex: Int",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/indices-swift.property",
                    "title" : "var indices: OrderedSet<Element>.Indices",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/startindex",
                    "title" : "var startIndex: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/distance(from:to:)",
                    "title" : "func distance(from: Int, to: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/formindex(after:)",
                    "title" : "func formIndex(after: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/formindex(before:)",
                    "title" : "func formIndex(before: inout Int)",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(_:offsetby:)",
                    "title" : "func index(Int, offsetBy: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(_:offsetby:limitedby:)",
                    "title" : "func index(Int, offsetBy: Int, limitedBy: Int) -> Int?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(after:)",
                    "title" : "func index(after: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index(before:)",
                    "title" : "func index(before: Int) -> Int",
                    "type" : "method"
                  },
                  {
                    "title" : "Subscripts",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subscript(_:)-3zzoq",
                    "title" : "subscript(Range<Int>) -> OrderedSet<Element>.SubSequence",
                    "type" : "subscript"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/subscript(_:)-7e56c",
                    "title" : "subscript(Int) -> Element",
                    "type" : "subscript"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/index",
                    "title" : "OrderedSet.Index",
                    "type" : "typealias"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/indices-swift.typealias",
                    "title" : "OrderedSet.Indices",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/randomaccesscollection-implementations",
                "title" : "RandomAccessCollection Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/lazy",
                    "title" : "var lazy: LazySequence<Self>",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/allsatisfy(_:)",
                    "title" : "func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/compactmap(_:)",
                    "title" : "func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/contains(where:)",
                    "title" : "func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/elementsequal(_:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/elementsequal(_:by:)",
                    "title" : "func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/enumerated()",
                    "title" : "func enumerated() -> EnumeratedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/filter(_:)",
                    "title" : "func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/first(where:)",
                    "title" : "func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/flatmap(_:)-4upo",
                    "title" : "func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/flatmap(_:)-mpwk",
                    "title" : "func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/foreach(_:)",
                    "title" : "func forEach((Self.Element) throws -> Void) rethrows",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/joined()",
                    "title" : "func joined() -> FlattenSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/joined(separator:)-364rm",
                    "title" : "func joined<Separator>(separator: Separator) -> JoinedSequence<Self>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/joined(separator:)-7er73",
                    "title" : "func joined(separator: String) -> String",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/lexicographicallyprecedes(_:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/lexicographicallyprecedes(_:by:)",
                    "title" : "func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/map(_:)-60smk",
                    "title" : "func map<T>((Self.Element) throws -> T) rethrows -> [T]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/max()",
                    "title" : "func max() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/max(by:)",
                    "title" : "func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/min()",
                    "title" : "func min() -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/min(by:)",
                    "title" : "func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/reduce(_:_:)",
                    "title" : "func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/reduce(into:_:)",
                    "title" : "func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/shuffled()",
                    "title" : "func shuffled() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/shuffled(using:)",
                    "title" : "func shuffled<T>(using: inout T) -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/sorted()",
                    "title" : "func sorted() -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/sorted(by:)",
                    "title" : "func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/starts(with:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/starts(with:by:)",
                    "title" : "func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/withcontiguousstorageifavailable(_:)-8bjz2",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/withcontiguousstorageifavailable(_:)-8k26k",
                    "title" : "func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Element>) throws -> R) rethrows -> R?",
                    "type" : "method"
                  },
                  {
                    "title" : "Type Aliases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/orderedcollections\/orderedset\/iterator",
                    "title" : "OrderedSet.Iterator",
                    "type" : "typealias"
                  }
                ],
                "path" : "\/documentation\/orderedcollections\/orderedset\/sequence-implementations",
                "title" : "Sequence Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/orderedcollections\/orderedset",
            "title" : "OrderedSet",
            "type" : "struct"
          }
        ],
        "path" : "\/documentation\/collections",
        "title" : "Collections",
        "type" : "module"
      },
      {
        "path" : "\/documentation\/dequemodule",
        "title" : "DequeModule",
        "type" : "module"
      },
      {
        "path" : "\/documentation\/orderedcollections",
        "title" : "OrderedCollections",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 1
  }
}